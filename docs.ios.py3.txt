Python3IDE(Python 3.7) running!
[__ios_io]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'cachePath', 'docPath', 'ios_errput', 'ios_input', 'ios_output', 'libPath', 'mainPath', 'printImage']

ios input and output

[_abc]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_abc_init', '_abc_instancecheck', '_abc_register', '_abc_subclasscheck', '_get_dump', '_reset_caches', '_reset_registry', 'get_cache_token']

Module contains faster C implementation of abc.ABCMeta

[_ast]
['AST', 'Add', 'And', 'AnnAssign', 'Assert', 'Assign', 'AsyncFor', 'AsyncFunctionDef', 'AsyncWith', 'Attribute', 'AugAssign', 'AugLoad', 'AugStore', 'Await', 'BinOp', 'BitAnd', 'BitOr', 'BitXor', 'BoolOp', 'Break', 'Bytes', 'Call', 'ClassDef', 'Compare', 'Constant', 'Continue', 'Del', 'Delete', 'Dict', 'DictComp', 'Div', 'Ellipsis', 'Eq', 'ExceptHandler', 'Expr', 'Expression', 'ExtSlice', 'FloorDiv', 'For', 'FormattedValue', 'FunctionDef', 'GeneratorExp', 'Global', 'Gt', 'GtE', 'If', 'IfExp', 'Import', 'ImportFrom', 'In', 'Index', 'Interactive', 'Invert', 'Is', 'IsNot', 'JoinedStr', 'LShift', 'Lambda', 'List', 'ListComp', 'Load', 'Lt', 'LtE', 'MatMult', 'Mod', 'Module', 'Mult', 'Name', 'NameConstant', 'Nonlocal', 'Not', 'NotEq', 'NotIn', 'Num', 'Or', 'Param', 'Pass', 'Pow', 'PyCF_ONLY_AST', 'RShift', 'Raise', 'Return', 'Set', 'SetComp', 'Slice', 'Starred', 'Store', 'Str', 'Sub', 'Subscript', 'Suite', 'Try', 'Tuple', 'UAdd', 'USub', 'UnaryOp', 'While', 'With', 'Yield', 'YieldFrom', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'alias', 'arg', 'arguments', 'boolop', 'cmpop', 'comprehension', 'excepthandler', 'expr', 'expr_context', 'keyword', 'mod', 'operator', 'slice', 'stmt', 'unaryop', 'withitem']

None

[_bisect]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'bisect_left', 'bisect_right', 'insort_left', 'insort_right']

Bisection algorithms.

This module provides support for maintaining a list in sorted order without
having to sort the list after each insertion. For long lists of items with
expensive comparison operations, this can be an improvement over the more
common approach.


[_blake2]
['BLAKE2B_MAX_DIGEST_SIZE', 'BLAKE2B_MAX_KEY_SIZE', 'BLAKE2B_PERSON_SIZE', 'BLAKE2B_SALT_SIZE', 'BLAKE2S_MAX_DIGEST_SIZE', 'BLAKE2S_MAX_KEY_SIZE', 'BLAKE2S_PERSON_SIZE', 'BLAKE2S_SALT_SIZE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'blake2b', 'blake2s']

_blake2b provides BLAKE2b for hashlib


[_bz2]
['BZ2Compressor', 'BZ2Decompressor', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

None

[_cffi_backend]
['FFI', 'FFI_CDECL', 'FFI_DEFAULT_ABI', 'Lib', 'RTLD_GLOBAL', 'RTLD_LAZY', 'RTLD_LOCAL', 'RTLD_NODELETE', 'RTLD_NOLOAD', 'RTLD_NOW', '_C_API', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_get_common_types', '_get_types', '_init_cffi_1_0_external_module', '_testbuff', '_testfunc', 'alignof', 'buffer', 'callback', 'cast', 'complete_struct_or_union', 'from_buffer', 'from_handle', 'gcp', 'get_errno', 'getcname', 'load_library', 'memmove', 'new_array_type', 'new_enum_type', 'new_function_type', 'new_pointer_type', 'new_primitive_type', 'new_struct_type', 'new_union_type', 'new_void_type', 'newp', 'newp_handle', 'rawaddressof', 'set_errno', 'sizeof', 'string', 'typeof', 'typeoffsetof', 'unpack']

None

[_cffi_ext]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_cffi_layout__zmq_msg_t', '_cffi_layout__zmq_pollitem_t', '_cffi_setup', 'get_ipc_path_max_len', 'memcpy', 'zmq_bind', 'zmq_close', 'zmq_connect', 'zmq_ctx_destroy', 'zmq_ctx_get', 'zmq_ctx_new', 'zmq_ctx_set', 'zmq_curve_keypair', 'zmq_curve_public', 'zmq_device', 'zmq_disconnect', 'zmq_errno', 'zmq_getsockopt', 'zmq_has', 'zmq_msg_close', 'zmq_msg_data', 'zmq_msg_init', 'zmq_msg_init_data', 'zmq_msg_init_size', 'zmq_msg_recv', 'zmq_msg_send', 'zmq_msg_size', 'zmq_poll', 'zmq_proxy', 'zmq_setsockopt', 'zmq_socket', 'zmq_socket_monitor', 'zmq_strerror', 'zmq_unbind', 'zmq_version']

None

[_codecs]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_forget_codec', 'ascii_decode', 'ascii_encode', 'charmap_build', 'charmap_decode', 'charmap_encode', 'decode', 'encode', 'escape_decode', 'escape_encode', 'latin_1_decode', 'latin_1_encode', 'lookup', 'lookup_error', 'raw_unicode_escape_decode', 'raw_unicode_escape_encode', 'readbuffer_encode', 'register', 'register_error', 'unicode_escape_decode', 'unicode_escape_encode', 'unicode_internal_decode', 'unicode_internal_encode', 'utf_16_be_decode', 'utf_16_be_encode', 'utf_16_decode', 'utf_16_encode', 'utf_16_ex_decode', 'utf_16_le_decode', 'utf_16_le_encode', 'utf_32_be_decode', 'utf_32_be_encode', 'utf_32_decode', 'utf_32_encode', 'utf_32_ex_decode', 'utf_32_le_decode', 'utf_32_le_encode', 'utf_7_decode', 'utf_7_encode', 'utf_8_decode', 'utf_8_encode']

None

[_codecs_cn]
['__doc__', '__loader__', '__map_gb18030ext', '__map_gb2312', '__map_gbcommon', '__map_gbkext', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_hk]
['__doc__', '__loader__', '__map_big5hkscs', '__map_big5hkscs_bmp', '__map_big5hkscs_nonbmp', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_iso2022]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_jp]
['__doc__', '__loader__', '__map_cp932ext', '__map_jisx0208', '__map_jisx0212', '__map_jisx0213_1_bmp', '__map_jisx0213_1_emp', '__map_jisx0213_2_bmp', '__map_jisx0213_2_emp', '__map_jisx0213_bmp', '__map_jisx0213_emp', '__map_jisx0213_pair', '__map_jisxcommon', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_kr]
['__doc__', '__loader__', '__map_cp949', '__map_cp949ext', '__map_ksx1001', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_tw]
['__doc__', '__loader__', '__map_big5', '__map_cp950ext', '__name__', '__package__', '__spec__', 'getcodec']

None

[_collections]
['OrderedDict', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_count_elements', '_deque_iterator', '_deque_reverse_iterator', 'defaultdict', 'deque']

High performance data structures.
- deque:        ordered collection accessible from endpoints only
- defaultdict:  dict subclass with a default value factory


[_contextvars]
['Context', 'ContextVar', 'Token', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'copy_context']

Context Variables

[_crypt]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'crypt']

None

[_csv]
['Dialect', 'Error', 'QUOTE_ALL', 'QUOTE_MINIMAL', 'QUOTE_NONE', 'QUOTE_NONNUMERIC', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_dialects', 'field_size_limit', 'get_dialect', 'list_dialects', 'reader', 'register_dialect', 'unregister_dialect', 'writer']

CSV parsing and writing.

This module provides classes that assist in the reading and writing
of Comma Separated Value (CSV) files, and implements the interface
described by PEP 305.  Although many CSV files are simple to parse,
the format is not formally defined by a stable specification and
is subtle enough that parsing lines of a CSV file with something
like line.split(",") is bound to fail.  The module supports three
basic APIs: reading, writing, and registration of dialects.


DIALECT REGISTRATION:

Readers and writers support a dialect argument, which is a convenient
handle on a group of settings.  When the dialect argument is a string,
it identifies one of the dialects previously registered with the module.
If it is a class or instance, the attributes of the argument are used as
the settings for the reader or writer:

    class excel:
        delimiter = ','
        quotechar = '"'
        escapechar = None
        doublequote = True
        skipinitialspace = False
        lineterminator = '\r\n'
        quoting = QUOTE_MINIMAL

SETTINGS:

    * quotechar - specifies a one-character string to use as the 
        quoting character.  It defaults to '"'.
    * delimiter - specifies a one-character string to use as the 
        field separator.  It defaults to ','.
    * skipinitialspace - specifies how to interpret whitespace which
        immediately follows a delimiter.  It defaults to False, which
        means that whitespace immediately following a delimiter is part
        of the following field.
    * lineterminator -  specifies the character sequence which should 
        terminate rows.
    * quoting - controls when quotes should be generated by the writer.
        It can take on any of the following module constants:

        csv.QUOTE_MINIMAL means only when required, for example, when a
            field contains either the quotechar or the delimiter
        csv.QUOTE_ALL means that quotes are always placed around fields.
        csv.QUOTE_NONNUMERIC means that quotes are always placed around
            fields which do not parse as integers or floating point
            numbers.
        csv.QUOTE_NONE means that quotes are never placed around fields.
    * escapechar - specifies a one-character string used to escape 
        the delimiter when quoting is set to QUOTE_NONE.
    * doublequote - controls the handling of quotes inside fields.  When
        True, two consecutive quotes are interpreted as one during read,
        and when writing, each quote character embedded in the data is
        written as two quotes


[_ctypes]
['ArgumentError', 'Array', 'CFuncPtr', 'FUNCFLAG_CDECL', 'FUNCFLAG_PYTHONAPI', 'FUNCFLAG_USE_ERRNO', 'FUNCFLAG_USE_LASTERROR', 'POINTER', 'PyObj_FromPtr', 'Py_DECREF', 'Py_INCREF', 'RTLD_GLOBAL', 'RTLD_LOCAL', 'Structure', 'Union', '_Pointer', '_SimpleCData', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_cast_addr', '_memmove_addr', '_memset_addr', '_pointer_type_cache', '_string_at_addr', '_unpickle', '_wstring_at_addr', 'addressof', 'alignment', 'buffer_info', 'byref', 'call_cdeclfunction', 'call_function', 'dlclose', 'dlopen', 'dlsym', 'get_errno', 'pointer', 'resize', 'set_errno', 'sizeof']

Create and manipulate C compatible data types in Python.

[_ctypes_test]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'func', 'func_si']

None

[_datetime]
['MAXYEAR', 'MINYEAR', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'date', 'datetime', 'datetime_CAPI', 'time', 'timedelta', 'timezone', 'tzinfo']

Fast implementation of the datetime type.

[_dbm]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'library', 'open']

None

[_decimal]
['BasicContext', 'Clamped', 'Context', 'ConversionSyntax', 'Decimal', 'DecimalException', 'DecimalTuple', 'DefaultContext', 'DivisionByZero', 'DivisionImpossible', 'DivisionUndefined', 'ExtendedContext', 'FloatOperation', 'HAVE_THREADS', 'Inexact', 'InvalidContext', 'InvalidOperation', 'MAX_EMAX', 'MAX_PREC', 'MIN_EMIN', 'MIN_ETINY', 'Overflow', 'ROUND_05UP', 'ROUND_CEILING', 'ROUND_DOWN', 'ROUND_FLOOR', 'ROUND_HALF_DOWN', 'ROUND_HALF_EVEN', 'ROUND_HALF_UP', 'ROUND_UP', 'Rounded', 'Subnormal', 'Underflow', '__doc__', '__libmpdec_version__', '__loader__', '__name__', '__package__', '__spec__', '__version__', 'getcontext', 'localcontext', 'setcontext']

C decimal arithmetic module

[_elementtree]
['Element', 'ParseError', 'SubElement', 'TreeBuilder', 'XMLParser', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

None

[_functools]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_lru_cache_wrapper', 'cmp_to_key', 'partial', 'reduce']

Tools that operate on functions.

[_fuzz]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'run']

None

[_hashlib]
['HASH', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'hmac_digest', 'new', 'openssl_md5', 'openssl_md_meth_names', 'openssl_sha1', 'openssl_sha224', 'openssl_sha256', 'openssl_sha384', 'openssl_sha512', 'pbkdf2_hmac']

None

[_heapq]
['__about__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_heapify_max', '_heappop_max', '_heapreplace_max', 'heapify', 'heappop', 'heappush', 'heappushpop', 'heapreplace']

Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!


[_imp]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_fix_co_filename', 'acquire_lock', 'check_hash_based_pycs', 'create_builtin', 'create_dynamic', 'exec_builtin', 'exec_dynamic', 'extension_suffixes', 'get_frozen_object', 'init_frozen', 'is_builtin', 'is_frozen', 'is_frozen_package', 'lock_held', 'release_lock', 'source_hash']

(Extremely) low-level import machinery bits as used by importlib and imp.

[_io]
['BlockingIOError', 'BufferedRWPair', 'BufferedRandom', 'BufferedReader', 'BufferedWriter', 'BytesIO', 'DEFAULT_BUFFER_SIZE', 'FileIO', 'IncrementalNewlineDecoder', 'StringIO', 'TextIOWrapper', 'UnsupportedOperation', '_BufferedIOBase', '_IOBase', '_RawIOBase', '_TextIOBase', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'open']

The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.


[_json]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'encode_basestring', 'encode_basestring_ascii', 'make_encoder', 'make_scanner', 'scanstring']

json speedups


[_locale]
['ABDAY_1', 'ABDAY_2', 'ABDAY_3', 'ABDAY_4', 'ABDAY_5', 'ABDAY_6', 'ABDAY_7', 'ABMON_1', 'ABMON_10', 'ABMON_11', 'ABMON_12', 'ABMON_2', 'ABMON_3', 'ABMON_4', 'ABMON_5', 'ABMON_6', 'ABMON_7', 'ABMON_8', 'ABMON_9', 'ALT_DIGITS', 'AM_STR', 'CHAR_MAX', 'CODESET', 'CRNCYSTR', 'DAY_1', 'DAY_2', 'DAY_3', 'DAY_4', 'DAY_5', 'DAY_6', 'DAY_7', 'D_FMT', 'D_T_FMT', 'ERA', 'ERA_D_FMT', 'ERA_D_T_FMT', 'ERA_T_FMT', 'Error', 'LC_ALL', 'LC_COLLATE', 'LC_CTYPE', 'LC_MESSAGES', 'LC_MONETARY', 'LC_NUMERIC', 'LC_TIME', 'MON_1', 'MON_10', 'MON_11', 'MON_12', 'MON_2', 'MON_3', 'MON_4', 'MON_5', 'MON_6', 'MON_7', 'MON_8', 'MON_9', 'NOEXPR', 'PM_STR', 'RADIXCHAR', 'THOUSEP', 'T_FMT', 'T_FMT_AMPM', 'YESEXPR', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'localeconv', 'nl_langinfo', 'setlocale', 'strcoll', 'strxfrm']

Support for POSIX locales.

[_lsprof]
['Profiler', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'profiler_entry', 'profiler_subentry']

Fast profiler

[_lzma]
['CHECK_CRC32', 'CHECK_CRC64', 'CHECK_ID_MAX', 'CHECK_NONE', 'CHECK_SHA256', 'CHECK_UNKNOWN', 'FILTER_ARM', 'FILTER_ARMTHUMB', 'FILTER_DELTA', 'FILTER_IA64', 'FILTER_LZMA1', 'FILTER_LZMA2', 'FILTER_POWERPC', 'FILTER_SPARC', 'FILTER_X86', 'FORMAT_ALONE', 'FORMAT_AUTO', 'FORMAT_RAW', 'FORMAT_XZ', 'LZMACompressor', 'LZMADecompressor', 'LZMAError', 'MF_BT2', 'MF_BT3', 'MF_BT4', 'MF_HC3', 'MF_HC4', 'MODE_FAST', 'MODE_NORMAL', 'PRESET_DEFAULT', 'PRESET_EXTREME', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_decode_filter_properties', '_encode_filter_properties', 'is_check_supported']

None

[_md5]
['MD5Type', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'md5']

None

[_monitoredqueue(nested)]
['']

[_multibytecodec]
['MultibyteIncrementalDecoder', 'MultibyteIncrementalEncoder', 'MultibyteStreamReader', 'MultibyteStreamWriter', '__create_codec', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

None

[_multiprocessing]
['SemLock', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'flags', 'sem_unlink']

None

[_opcode]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'stack_effect']

Opcode support module.

[_operator]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_compare_digest', 'abs', 'add', 'and_', 'attrgetter', 'concat', 'contains', 'countOf', 'delitem', 'eq', 'floordiv', 'ge', 'getitem', 'gt', 'iadd', 'iand', 'iconcat', 'ifloordiv', 'ilshift', 'imatmul', 'imod', 'imul', 'index', 'indexOf', 'inv', 'invert', 'ior', 'ipow', 'irshift', 'is_', 'is_not', 'isub', 'itemgetter', 'itruediv', 'ixor', 'le', 'length_hint', 'lshift', 'lt', 'matmul', 'methodcaller', 'mod', 'mul', 'ne', 'neg', 'not_', 'or_', 'pos', 'pow', 'rshift', 'setitem', 'sub', 'truediv', 'truth', 'xor']

Operator interface.

This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience.

[_pickle]
['PickleError', 'Pickler', 'PicklingError', 'Unpickler', 'UnpicklingError', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'dump', 'dumps', 'load', 'loads']

Optimized C implementation for the Python pickle module.

[_posixsubprocess]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'fork_exec']

A POSIX helper for the subprocess module.

[_queue]
['Empty', 'SimpleQueue', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

C implementation of the Python queue module.
This module is an implementation detail, please do not use it directly.

[_random]
['Random', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

Module implements the Mersenne Twister random number generator.

[_sha1]
['SHA1Type', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'sha1']

None

[_sha256]
['SHA224Type', 'SHA256Type', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'sha224', 'sha256']

None

[_sha3]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'implementation', 'keccakopt', 'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512', 'shake_128', 'shake_256']

None

[_sha512]
['SHA384Type', 'SHA512Type', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'sha384', 'sha512']

None

[_signal]
['ITIMER_PROF', 'ITIMER_REAL', 'ITIMER_VIRTUAL', 'ItimerError', 'NSIG', 'SIGABRT', 'SIGALRM', 'SIGBUS', 'SIGCHLD', 'SIGCONT', 'SIGEMT', 'SIGFPE', 'SIGHUP', 'SIGILL', 'SIGINFO', 'SIGINT', 'SIGIO', 'SIGIOT', 'SIGKILL', 'SIGPIPE', 'SIGPROF', 'SIGQUIT', 'SIGSEGV', 'SIGSTOP', 'SIGSYS', 'SIGTERM', 'SIGTRAP', 'SIGTSTP', 'SIGTTIN', 'SIGTTOU', 'SIGURG', 'SIGUSR1', 'SIGUSR2', 'SIGVTALRM', 'SIGWINCH', 'SIGXCPU', 'SIGXFSZ', 'SIG_BLOCK', 'SIG_DFL', 'SIG_IGN', 'SIG_SETMASK', 'SIG_UNBLOCK', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'alarm', 'default_int_handler', 'getitimer', 'getsignal', 'pause', 'pthread_kill', 'pthread_sigmask', 'set_wakeup_fd', 'setitimer', 'siginterrupt', 'signal', 'sigpending', 'sigwait']

This module provides mechanisms to use signal handlers in Python.

Functions:

alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler

signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers

itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.


*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.

[_socket]
['AF_APPLETALK', 'AF_DECnet', 'AF_INET', 'AF_INET6', 'AF_IPX', 'AF_LINK', 'AF_ROUTE', 'AF_SNA', 'AF_SYSTEM', 'AF_UNIX', 'AF_UNSPEC', 'AI_ADDRCONFIG', 'AI_ALL', 'AI_CANONNAME', 'AI_DEFAULT', 'AI_MASK', 'AI_NUMERICHOST', 'AI_NUMERICSERV', 'AI_PASSIVE', 'AI_V4MAPPED', 'AI_V4MAPPED_CFG', 'CAPI', 'CMSG_LEN', 'CMSG_SPACE', 'EAI_ADDRFAMILY', 'EAI_AGAIN', 'EAI_BADFLAGS', 'EAI_BADHINTS', 'EAI_FAIL', 'EAI_FAMILY', 'EAI_MAX', 'EAI_MEMORY', 'EAI_NODATA', 'EAI_NONAME', 'EAI_OVERFLOW', 'EAI_PROTOCOL', 'EAI_SERVICE', 'EAI_SOCKTYPE', 'EAI_SYSTEM', 'INADDR_ALLHOSTS_GROUP', 'INADDR_ANY', 'INADDR_BROADCAST', 'INADDR_LOOPBACK', 'INADDR_MAX_LOCAL_GROUP', 'INADDR_NONE', 'INADDR_UNSPEC_GROUP', 'IPPORT_RESERVED', 'IPPORT_USERRESERVED', 'IPPROTO_AH', 'IPPROTO_DSTOPTS', 'IPPROTO_EGP', 'IPPROTO_EON', 'IPPROTO_ESP', 'IPPROTO_FRAGMENT', 'IPPROTO_GGP', 'IPPROTO_GRE', 'IPPROTO_HELLO', 'IPPROTO_HOPOPTS', 'IPPROTO_ICMP', 'IPPROTO_ICMPV6', 'IPPROTO_IDP', 'IPPROTO_IGMP', 'IPPROTO_IP', 'IPPROTO_IPCOMP', 'IPPROTO_IPIP', 'IPPROTO_IPV4', 'IPPROTO_IPV6', 'IPPROTO_MAX', 'IPPROTO_ND', 'IPPROTO_NONE', 'IPPROTO_PIM', 'IPPROTO_PUP', 'IPPROTO_RAW', 'IPPROTO_ROUTING', 'IPPROTO_RSVP', 'IPPROTO_SCTP', 'IPPROTO_TCP', 'IPPROTO_TP', 'IPPROTO_UDP', 'IPPROTO_XTP', 'IPV6_CHECKSUM', 'IPV6_JOIN_GROUP', 'IPV6_LEAVE_GROUP', 'IPV6_MULTICAST_HOPS', 'IPV6_MULTICAST_IF', 'IPV6_MULTICAST_LOOP', 'IPV6_RECVTCLASS', 'IPV6_RTHDR_TYPE_0', 'IPV6_TCLASS', 'IPV6_UNICAST_HOPS', 'IPV6_V6ONLY', 'IP_ADD_MEMBERSHIP', 'IP_DEFAULT_MULTICAST_LOOP', 'IP_DEFAULT_MULTICAST_TTL', 'IP_DROP_MEMBERSHIP', 'IP_HDRINCL', 'IP_MAX_MEMBERSHIPS', 'IP_MULTICAST_IF', 'IP_MULTICAST_LOOP', 'IP_MULTICAST_TTL', 'IP_OPTIONS', 'IP_RECVDSTADDR', 'IP_RECVOPTS', 'IP_RECVRETOPTS', 'IP_RETOPTS', 'IP_TOS', 'IP_TTL', 'LOCAL_PEERCRED', 'MSG_CTRUNC', 'MSG_DONTROUTE', 'MSG_DONTWAIT', 'MSG_EOF', 'MSG_EOR', 'MSG_NOSIGNAL', 'MSG_OOB', 'MSG_PEEK', 'MSG_TRUNC', 'MSG_WAITALL', 'NI_DGRAM', 'NI_MAXHOST', 'NI_MAXSERV', 'NI_NAMEREQD', 'NI_NOFQDN', 'NI_NUMERICHOST', 'NI_NUMERICSERV', 'PF_SYSTEM', 'SCM_CREDS', 'SCM_RIGHTS', 'SHUT_RD', 'SHUT_RDWR', 'SHUT_WR', 'SOCK_DGRAM', 'SOCK_RAW', 'SOCK_RDM', 'SOCK_SEQPACKET', 'SOCK_STREAM', 'SOL_IP', 'SOL_SOCKET', 'SOL_TCP', 'SOL_UDP', 'SOMAXCONN', 'SO_ACCEPTCONN', 'SO_BROADCAST', 'SO_DEBUG', 'SO_DONTROUTE', 'SO_ERROR', 'SO_KEEPALIVE', 'SO_LINGER', 'SO_OOBINLINE', 'SO_RCVBUF', 'SO_RCVLOWAT', 'SO_RCVTIMEO', 'SO_REUSEADDR', 'SO_REUSEPORT', 'SO_SNDBUF', 'SO_SNDLOWAT', 'SO_SNDTIMEO', 'SO_TYPE', 'SO_USELOOPBACK', 'SocketType', 'TCP_FASTOPEN', 'TCP_KEEPCNT', 'TCP_KEEPINTVL', 'TCP_MAXSEG', 'TCP_NODELAY', 'TCP_NOTSENT_LOWAT', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'close', 'dup', 'error', 'gaierror', 'getaddrinfo', 'getdefaulttimeout', 'gethostbyaddr', 'gethostbyname', 'gethostbyname_ex', 'gethostname', 'getnameinfo', 'getprotobyname', 'getservbyname', 'getservbyport', 'has_ipv6', 'herror', 'htonl', 'htons', 'if_indextoname', 'if_nameindex', 'if_nametoindex', 'inet_aton', 'inet_ntoa', 'inet_ntop', 'inet_pton', 'ntohl', 'ntohs', 'setdefaulttimeout', 'sethostname', 'socket', 'socketpair', 'timeout']

Implementation module for socket operations.

See the socket module for documentation.

[_sqlite3]
['Cache', 'Connection', 'Cursor', 'DataError', 'DatabaseError', 'Error', 'IntegrityError', 'InterfaceError', 'InternalError', 'NotSupportedError', 'OperationalError', 'OptimizedUnicode', 'PARSE_COLNAMES', 'PARSE_DECLTYPES', 'PrepareProtocol', 'ProgrammingError', 'Row', 'SQLITE_ALTER_TABLE', 'SQLITE_ANALYZE', 'SQLITE_ATTACH', 'SQLITE_CREATE_INDEX', 'SQLITE_CREATE_TABLE', 'SQLITE_CREATE_TEMP_INDEX', 'SQLITE_CREATE_TEMP_TABLE', 'SQLITE_CREATE_TEMP_TRIGGER', 'SQLITE_CREATE_TEMP_VIEW', 'SQLITE_CREATE_TRIGGER', 'SQLITE_CREATE_VIEW', 'SQLITE_CREATE_VTABLE', 'SQLITE_DELETE', 'SQLITE_DENY', 'SQLITE_DETACH', 'SQLITE_DONE', 'SQLITE_DROP_INDEX', 'SQLITE_DROP_TABLE', 'SQLITE_DROP_TEMP_INDEX', 'SQLITE_DROP_TEMP_TABLE', 'SQLITE_DROP_TEMP_TRIGGER', 'SQLITE_DROP_TEMP_VIEW', 'SQLITE_DROP_TRIGGER', 'SQLITE_DROP_VIEW', 'SQLITE_DROP_VTABLE', 'SQLITE_FUNCTION', 'SQLITE_IGNORE', 'SQLITE_INSERT', 'SQLITE_OK', 'SQLITE_PRAGMA', 'SQLITE_READ', 'SQLITE_RECURSIVE', 'SQLITE_REINDEX', 'SQLITE_SAVEPOINT', 'SQLITE_SELECT', 'SQLITE_TRANSACTION', 'SQLITE_UPDATE', 'Statement', 'Warning', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'adapt', 'adapters', 'complete_statement', 'connect', 'converters', 'enable_callback_tracebacks', 'enable_shared_cache', 'register_adapter', 'register_converter', 'sqlite_version', 'version']

None

[_sre]
['CODESIZE', 'MAGIC', 'MAXGROUPS', 'MAXREPEAT', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'ascii_iscased', 'ascii_tolower', 'compile', 'copyright', 'getcodesize', 'unicode_iscased', 'unicode_tolower']

None

[_ssl]
['ALERT_DESCRIPTION_ACCESS_DENIED', 'ALERT_DESCRIPTION_BAD_CERTIFICATE', 'ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE', 'ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE', 'ALERT_DESCRIPTION_BAD_RECORD_MAC', 'ALERT_DESCRIPTION_CERTIFICATE_EXPIRED', 'ALERT_DESCRIPTION_CERTIFICATE_REVOKED', 'ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN', 'ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE', 'ALERT_DESCRIPTION_CLOSE_NOTIFY', 'ALERT_DESCRIPTION_DECODE_ERROR', 'ALERT_DESCRIPTION_DECOMPRESSION_FAILURE', 'ALERT_DESCRIPTION_DECRYPT_ERROR', 'ALERT_DESCRIPTION_HANDSHAKE_FAILURE', 'ALERT_DESCRIPTION_ILLEGAL_PARAMETER', 'ALERT_DESCRIPTION_INSUFFICIENT_SECURITY', 'ALERT_DESCRIPTION_INTERNAL_ERROR', 'ALERT_DESCRIPTION_NO_RENEGOTIATION', 'ALERT_DESCRIPTION_PROTOCOL_VERSION', 'ALERT_DESCRIPTION_RECORD_OVERFLOW', 'ALERT_DESCRIPTION_UNEXPECTED_MESSAGE', 'ALERT_DESCRIPTION_UNKNOWN_CA', 'ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY', 'ALERT_DESCRIPTION_UNRECOGNIZED_NAME', 'ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE', 'ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION', 'ALERT_DESCRIPTION_USER_CANCELLED', 'CERT_NONE', 'CERT_OPTIONAL', 'CERT_REQUIRED', 'HAS_ALPN', 'HAS_ECDH', 'HAS_NPN', 'HAS_SNI', 'HAS_SSLv2', 'HAS_SSLv3', 'HAS_TLS_UNIQUE', 'HAS_TLSv1', 'HAS_TLSv1_1', 'HAS_TLSv1_2', 'HAS_TLSv1_3', 'HOSTFLAG_ALWAYS_CHECK_SUBJECT', 'HOSTFLAG_MULTI_LABEL_WILDCARDS', 'HOSTFLAG_NO_PARTIAL_WILDCARDS', 'HOSTFLAG_NO_WILDCARDS', 'HOSTFLAG_SINGLE_LABEL_SUBDOMAINS', 'MemoryBIO', 'OPENSSL_VERSION', 'OPENSSL_VERSION_INFO', 'OPENSSL_VERSION_NUMBER', 'OP_ALL', 'OP_CIPHER_SERVER_PREFERENCE', 'OP_NO_COMPRESSION', 'OP_NO_SSLv2', 'OP_NO_SSLv3', 'OP_NO_TICKET', 'OP_NO_TLSv1', 'OP_NO_TLSv1_1', 'OP_NO_TLSv1_2', 'OP_NO_TLSv1_3', 'OP_SINGLE_DH_USE', 'OP_SINGLE_ECDH_USE', 'PROTOCOL_SSLv23', 'PROTOCOL_SSLv3', 'PROTOCOL_TLS', 'PROTOCOL_TLS_CLIENT', 'PROTOCOL_TLS_SERVER', 'PROTOCOL_TLSv1', 'PROTOCOL_TLSv1_1', 'PROTOCOL_TLSv1_2', 'PROTO_MAXIMUM_SUPPORTED', 'PROTO_MINIMUM_SUPPORTED', 'PROTO_SSLv3', 'PROTO_TLSv1', 'PROTO_TLSv1_1', 'PROTO_TLSv1_2', 'PROTO_TLSv1_3', 'RAND_add', 'RAND_bytes', 'RAND_egd', 'RAND_pseudo_bytes', 'RAND_status', 'SSLCertVerificationError', 'SSLEOFError', 'SSLError', 'SSLSession', 'SSLSyscallError', 'SSLWantReadError', 'SSLWantWriteError', 'SSLZeroReturnError', 'SSL_ERROR_EOF', 'SSL_ERROR_INVALID_ERROR_CODE', 'SSL_ERROR_SSL', 'SSL_ERROR_SYSCALL', 'SSL_ERROR_WANT_CONNECT', 'SSL_ERROR_WANT_READ', 'SSL_ERROR_WANT_WRITE', 'SSL_ERROR_WANT_X509_LOOKUP', 'SSL_ERROR_ZERO_RETURN', 'VERIFY_CRL_CHECK_CHAIN', 'VERIFY_CRL_CHECK_LEAF', 'VERIFY_DEFAULT', 'VERIFY_X509_STRICT', 'VERIFY_X509_TRUSTED_FIRST', '_DEFAULT_CIPHERS', '_OPENSSL_API_VERSION', '_SSLContext', '_SSLSocket', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_test_decode_cert', 'err_codes_to_names', 'err_names_to_codes', 'get_default_verify_paths', 'lib_codes_to_names', 'nid2obj', 'txt2obj']

Implementation module for SSL socket operations.  See the socket module
for documentation.

[_stat]
['SF_APPEND', 'SF_ARCHIVED', 'SF_IMMUTABLE', 'SF_NOUNLINK', 'SF_SNAPSHOT', 'ST_ATIME', 'ST_CTIME', 'ST_DEV', 'ST_GID', 'ST_INO', 'ST_MODE', 'ST_MTIME', 'ST_NLINK', 'ST_SIZE', 'ST_UID', 'S_ENFMT', 'S_IEXEC', 'S_IFBLK', 'S_IFCHR', 'S_IFDIR', 'S_IFDOOR', 'S_IFIFO', 'S_IFLNK', 'S_IFMT', 'S_IFPORT', 'S_IFREG', 'S_IFSOCK', 'S_IFWHT', 'S_IMODE', 'S_IREAD', 'S_IRGRP', 'S_IROTH', 'S_IRUSR', 'S_IRWXG', 'S_IRWXO', 'S_IRWXU', 'S_ISBLK', 'S_ISCHR', 'S_ISDIR', 'S_ISDOOR', 'S_ISFIFO', 'S_ISGID', 'S_ISLNK', 'S_ISPORT', 'S_ISREG', 'S_ISSOCK', 'S_ISUID', 'S_ISVTX', 'S_ISWHT', 'S_IWGRP', 'S_IWOTH', 'S_IWRITE', 'S_IWUSR', 'S_IXGRP', 'S_IXOTH', 'S_IXUSR', 'UF_APPEND', 'UF_COMPRESSED', 'UF_HIDDEN', 'UF_IMMUTABLE', 'UF_NODUMP', 'UF_NOUNLINK', 'UF_OPAQUE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'filemode']

S_IFMT_: file type bits
S_IFDIR: directory
S_IFCHR: character device
S_IFBLK: block device
S_IFREG: regular file
S_IFIFO: fifo (named pipe)
S_IFLNK: symbolic link
S_IFSOCK: socket file
S_IFDOOR: door
S_IFPORT: event port
S_IFWHT: whiteout

S_ISUID: set UID bit
S_ISGID: set GID bit
S_ENFMT: file locking enforcement
S_ISVTX: sticky bit
S_IREAD: Unix V7 synonym for S_IRUSR
S_IWRITE: Unix V7 synonym for S_IWUSR
S_IEXEC: Unix V7 synonym for S_IXUSR
S_IRWXU: mask for owner permissions
S_IRUSR: read by owner
S_IWUSR: write by owner
S_IXUSR: execute by owner
S_IRWXG: mask for group permissions
S_IRGRP: read by group
S_IWGRP: write by group
S_IXGRP: execute by group
S_IRWXO: mask for others (not in group) permissions
S_IROTH: read by others
S_IWOTH: write by others
S_IXOTH: execute by others

UF_NODUMP: do not dump file
UF_IMMUTABLE: file may not be changed
UF_APPEND: file may only be appended to
UF_OPAQUE: directory is opaque when viewed through a union stack
UF_NOUNLINK: file may not be renamed or deleted
UF_COMPRESSED: OS X: file is hfs-compressed
UF_HIDDEN: OS X: file should not be displayed
SF_ARCHIVED: file may be archived
SF_IMMUTABLE: file may not be changed
SF_APPEND: file may only be appended to
SF_NOUNLINK: file may not be renamed or deleted
SF_SNAPSHOT: file is a snapshot file

ST_MODE
ST_INO
ST_DEV
ST_NLINK
ST_UID
ST_GID
ST_SIZE
ST_ATIME
ST_MTIME
ST_CTIME

FILE_ATTRIBUTE_*: Windows file attribute constants
                   (only present on Windows)


[_string]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'formatter_field_name_split', 'formatter_parser']

string helper module

[_struct]
['Struct', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_clearcache', 'calcsize', 'error', 'iter_unpack', 'pack', 'pack_into', 'unpack', 'unpack_from']

Functions to convert between Python values and C structs.
Python bytes objects are used to hold the data representing the C struct
and also as format strings (explained below) to describe the layout of data
in the C struct.

The optional first format char indicates byte order, size and alignment:
  @: native order, size & alignment (default)
  =: native order, std. size & alignment
  <: little-endian, std. size & alignment
  >: big-endian, std. size & alignment
  !: same as >

The remaining chars indicate types of args and must match exactly;
these can be preceded by a decimal repeat count:
  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
  ?: _Bool (requires C99; if not available, char is used instead)
  h:short; H:unsigned short; i:int; I:unsigned int;
  l:long; L:unsigned long; f:float; d:double; e:half-float.
Special cases (preceding decimal count indicates length):
  s:string (array of char); p: pascal string (with count byte).
Special cases (only available in native format):
  n:ssize_t; N:size_t;
  P:an integer type that is wide enough to hold a pointer.
Special case (not in native mode unless 'long long' in platform C):
  q:long long; Q:unsigned long long
Whitespace between formats is ignored.

The variable struct.error is an exception raised on errors.


[_symtable]
['CELL', 'DEF_ANNOT', 'DEF_BOUND', 'DEF_FREE', 'DEF_FREE_CLASS', 'DEF_GLOBAL', 'DEF_IMPORT', 'DEF_LOCAL', 'DEF_PARAM', 'FREE', 'GLOBAL_EXPLICIT', 'GLOBAL_IMPLICIT', 'LOCAL', 'SCOPE_MASK', 'SCOPE_OFF', 'TYPE_CLASS', 'TYPE_FUNCTION', 'TYPE_MODULE', 'USE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'symtable']

None

[_testbuffer]
['ND_FORTRAN', 'ND_GETBUF_FAIL', 'ND_GETBUF_UNDEFINED', 'ND_MAX_NDIM', 'ND_PIL', 'ND_REDIRECT', 'ND_SCALAR', 'ND_VAREXPORT', 'ND_WRITABLE', 'PyBUF_ANY_CONTIGUOUS', 'PyBUF_CONTIG', 'PyBUF_CONTIG_RO', 'PyBUF_C_CONTIGUOUS', 'PyBUF_FORMAT', 'PyBUF_FULL', 'PyBUF_FULL_RO', 'PyBUF_F_CONTIGUOUS', 'PyBUF_INDIRECT', 'PyBUF_ND', 'PyBUF_READ', 'PyBUF_RECORDS', 'PyBUF_RECORDS_RO', 'PyBUF_SIMPLE', 'PyBUF_STRIDED', 'PyBUF_STRIDED_RO', 'PyBUF_STRIDES', 'PyBUF_WRITABLE', 'PyBUF_WRITE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'cmp_contig', 'get_contiguous', 'get_pointer', 'get_sizeof_void_p', 'is_contiguous', 'ndarray', 'py_buffer_to_contiguous', 'slice_indices', 'staticarray']

None

[_testcapi]
['CHAR_MAX', 'CHAR_MIN', 'DBL_MAX', 'DBL_MIN', 'FLT_MAX', 'FLT_MIN', 'Generic', 'GenericAlias', 'INT_MAX', 'INT_MIN', 'LLONG_MAX', 'LLONG_MIN', 'LONG_MAX', 'LONG_MIN', 'PY_SSIZE_T_MAX', 'PY_SSIZE_T_MIN', 'PyTime_AsMicroseconds', 'PyTime_AsMilliseconds', 'PyTime_AsSecondsDouble', 'PyTime_AsTimespec', 'PyTime_AsTimeval', 'PyTime_FromSeconds', 'PyTime_FromSecondsObject', 'RecursingInfinitelyError', 'SHRT_MAX', 'SHRT_MIN', 'SIZEOF_PYGC_HEAD', 'SIZEOF_TIME_T', 'UCHAR_MAX', 'UINT_MAX', 'ULLONG_MAX', 'ULONG_MAX', 'USHRT_MAX', 'WITH_PYMALLOC', 'W_STOPCODE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_pending_threadfunc', '_test_structmembersType', '_test_thread_state', 'argparsing', 'awaitType', 'call_in_temporary_c_thread', 'code_newempty', 'codec_incrementaldecoder', 'codec_incrementalencoder', 'crash_no_current_thread', 'create_cfunction', 'datetime_check_date', 'datetime_check_datetime', 'datetime_check_delta', 'datetime_check_time', 'datetime_check_tzinfo', 'dict_get_version', 'dict_getitem_knownhash', 'dict_hassplittable', 'docstring_empty', 'docstring_no_signature', 'docstring_with_invalid_signature', 'docstring_with_invalid_signature2', 'docstring_with_signature', 'docstring_with_signature_and_extra_newlines', 'docstring_with_signature_but_no_doc', 'docstring_with_signature_with_defaults', 'error', 'exception_print', 'get_args', 'get_kwargs', 'get_mapping_items', 'get_mapping_keys', 'get_mapping_values', 'get_recursion_depth', 'get_timezone_utc_capi', 'get_timezones_offset_zero', 'getargs_B', 'getargs_C', 'getargs_D', 'getargs_H', 'getargs_I', 'getargs_K', 'getargs_L', 'getargs_S', 'getargs_U', 'getargs_Y', 'getargs_Z', 'getargs_Z_hash', 'getargs_b', 'getargs_c', 'getargs_d', 'getargs_es', 'getargs_es_hash', 'getargs_et', 'getargs_et_hash', 'getargs_f', 'getargs_h', 'getargs_i', 'getargs_k', 'getargs_keyword_only', 'getargs_keywords', 'getargs_l', 'getargs_n', 'getargs_p', 'getargs_positional_only_and_keywords', 'getargs_s', 'getargs_s_hash', 'getargs_s_star', 'getargs_tuple', 'getargs_u', 'getargs_u_hash', 'getargs_w_star', 'getargs_y', 'getargs_y_hash', 'getargs_y_star', 'getargs_z', 'getargs_z_hash', 'getargs_z_star', 'getbuffer_with_null_view', 'hamt', 'instancemethod', 'make_exception_with_doc', 'make_memoryview_from_NULL_pointer', 'make_timezones_capi', 'matmulType', 'no_docstring', 'parse_tuple_and_keywords', 'profile_int', 'pymarshal_read_last_object_from_file', 'pymarshal_read_long_from_file', 'pymarshal_read_object_from_file', 'pymarshal_read_short_from_file', 'pymarshal_write_long_to_file', 'pymarshal_write_object_to_file', 'pymem_api_misuse', 'pymem_buffer_overflow', 'pymem_getallocatorsname', 'pymem_malloc_without_gil', 'pyobject_fastcall', 'pyobject_fastcalldict', 'pyobject_fastcallkeywords', 'pyobject_malloc_without_gil', 'pytime_object_to_time_t', 'pytime_object_to_timespec', 'pytime_object_to_timeval', 'raise_SIGINT_then_send_None', 'raise_exception', 'raise_memoryerror', 'raise_signal', 'remove_mem_hooks', 'return_null_without_error', 'return_result_with_error', 'run_in_subinterp', 'set_errno', 'set_exc_info', 'set_nomemory', 'stack_pointer', 'test_L_code', 'test_Z_code', 'test_buildvalue_N', 'test_capsule', 'test_config', 'test_datetime_capi', 'test_decref_doesnt_leak', 'test_dict_iteration', 'test_empty_argparse', 'test_from_contiguous', 'test_incref_decref_API', 'test_incref_doesnt_leak', 'test_k_code', 'test_lazy_hash_inheritance', 'test_list_api', 'test_long_and_overflow', 'test_long_api', 'test_long_as_double', 'test_long_as_size_t', 'test_long_long_and_overflow', 'test_long_numbits', 'test_longlong_api', 'test_null_strings', 'test_pymem_alloc0', 'test_pymem_setallocators', 'test_pymem_setrawallocators', 'test_pyobject_setallocators', 'test_pythread_tss_key_state', 'test_s_code', 'test_sizeof_c_types', 'test_string_from_format', 'test_string_to_double', 'test_u_code', 'test_unicode_compare_with_ascii', 'test_widechar', 'test_with_docstring', 'test_xdecref_doesnt_leak', 'test_xincref_doesnt_leak', 'the_number_three', 'traceback_print', 'tracemalloc_get_traceback', 'tracemalloc_track', 'tracemalloc_untrack', 'unicode_asucs4', 'unicode_aswidechar', 'unicode_aswidecharstring', 'unicode_copycharacters', 'unicode_encodedecimal', 'unicode_findchar', 'unicode_legacy_string', 'unicode_transformdecimaltoascii', 'with_tp_del']

None

[_testimportmultiple]
['__doc__', '__loader__', '__name__', '__package__', '__spec__']

_testimportmultiple doc

[_testmultiphase]
['Example', 'Str', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'call_state_registration_func', 'error', 'foo', 'int_const', 'str_const']

Test module main

[_thread]
['LockType', 'RLock', 'TIMEOUT_MAX', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_count', '_local', '_set_sentinel', 'allocate', 'allocate_lock', 'error', 'exit', 'exit_thread', 'get_ident', 'interrupt_main', 'stack_size', 'start_new', 'start_new_thread']

This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface.

[_tracemalloc]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_get_object_traceback', '_get_traces', 'clear_traces', 'get_traceback_limit', 'get_traced_memory', 'get_tracemalloc_memory', 'is_tracing', 'start', 'stop']

Debug module to trace memory blocks allocated by Python.

[_uuid]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'generate_time_safe', 'has_uuid_generate_time_safe']

None

[_warnings]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_defaultaction', '_filters_mutated', '_onceregistry', 'filters', 'warn', 'warn_explicit']

_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up.

[_weakref]
['CallableProxyType', 'ProxyType', 'ReferenceType', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_remove_dead_weakref', 'getweakrefcount', 'getweakrefs', 'proxy', 'ref']

Weak-reference support module.

[array]
['ArrayType', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_array_reconstructor', 'array', 'typecodes']

This module defines an object type which can efficiently represent
an array of basic values: characters, integers, floating point
numbers.  Arrays are sequence types and behave very much like lists,
except that the type of objects stored in them is constrained.


[atexit]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_clear', '_ncallbacks', '_run_exitfuncs', 'register', 'unregister']

allow programmer to define multiple exit functions to be executedupon normal program termination.

Two public functions, register and unregister, are defined.


[audioop]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'add', 'adpcm2lin', 'alaw2lin', 'avg', 'avgpp', 'bias', 'byteswap', 'cross', 'error', 'findfactor', 'findfit', 'findmax', 'getsample', 'lin2adpcm', 'lin2alaw', 'lin2lin', 'lin2ulaw', 'max', 'maxpp', 'minmax', 'mul', 'ratecv', 'reverse', 'rms', 'tomono', 'tostereo', 'ulaw2lin']

None

[binascii]
['Error', 'Incomplete', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a2b_base64', 'a2b_hex', 'a2b_hqx', 'a2b_qp', 'a2b_uu', 'b2a_base64', 'b2a_hex', 'b2a_hqx', 'b2a_qp', 'b2a_uu', 'crc32', 'crc_hqx', 'hexlify', 'rlecode_hqx', 'rledecode_hqx', 'unhexlify']

Conversion between binary data and ASCII

[builtins]
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']

Built-in functions, exceptions, and other objects.

Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.

[cmath]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cos', 'cosh', 'e', 'exp', 'inf', 'infj', 'isclose', 'isfinite', 'isinf', 'isnan', 'log', 'log10', 'nan', 'nanj', 'phase', 'pi', 'polar', 'rect', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau']

This module is always available. It provides access to mathematical
functions for complex numbers.

[errno]
['E2BIG', 'EACCES', 'EADDRINUSE', 'EADDRNOTAVAIL', 'EAFNOSUPPORT', 'EAGAIN', 'EALREADY', 'EAUTH', 'EBADARCH', 'EBADEXEC', 'EBADF', 'EBADMACHO', 'EBADMSG', 'EBADRPC', 'EBUSY', 'ECANCELED', 'ECHILD', 'ECONNABORTED', 'ECONNREFUSED', 'ECONNRESET', 'EDEADLK', 'EDESTADDRREQ', 'EDEVERR', 'EDOM', 'EDQUOT', 'EEXIST', 'EFAULT', 'EFBIG', 'EFTYPE', 'EHOSTDOWN', 'EHOSTUNREACH', 'EIDRM', 'EILSEQ', 'EINPROGRESS', 'EINTR', 'EINVAL', 'EIO', 'EISCONN', 'EISDIR', 'ELOOP', 'EMFILE', 'EMLINK', 'EMSGSIZE', 'EMULTIHOP', 'ENAMETOOLONG', 'ENEEDAUTH', 'ENETDOWN', 'ENETRESET', 'ENETUNREACH', 'ENFILE', 'ENOATTR', 'ENOBUFS', 'ENODATA', 'ENODEV', 'ENOENT', 'ENOEXEC', 'ENOLCK', 'ENOLINK', 'ENOMEM', 'ENOMSG', 'ENOPOLICY', 'ENOPROTOOPT', 'ENOSPC', 'ENOSR', 'ENOSTR', 'ENOSYS', 'ENOTBLK', 'ENOTCONN', 'ENOTDIR', 'ENOTEMPTY', 'ENOTRECOVERABLE', 'ENOTSOCK', 'ENOTSUP', 'ENOTTY', 'ENXIO', 'EOPNOTSUPP', 'EOVERFLOW', 'EOWNERDEAD', 'EPERM', 'EPFNOSUPPORT', 'EPIPE', 'EPROCLIM', 'EPROCUNAVAIL', 'EPROGMISMATCH', 'EPROGUNAVAIL', 'EPROTO', 'EPROTONOSUPPORT', 'EPROTOTYPE', 'EPWROFF', 'ERANGE', 'EREMOTE', 'EROFS', 'ERPCMISMATCH', 'ESHLIBVERS', 'ESHUTDOWN', 'ESOCKTNOSUPPORT', 'ESPIPE', 'ESRCH', 'ESTALE', 'ETIME', 'ETIMEDOUT', 'ETOOMANYREFS', 'ETXTBSY', 'EUSERS', 'EWOULDBLOCK', 'EXDEV', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'errorcode']

This module makes available standard errno system symbols.

The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.

The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.

Symbols that are not relevant to the underlying system are not defined.

To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'.

[faulthandler]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_fatal_error', '_fatal_error_c_thread', '_read_null', '_sigabrt', '_sigfpe', '_sigsegv', '_stack_overflow', 'cancel_dump_traceback_later', 'disable', 'dump_traceback', 'dump_traceback_later', 'enable', 'is_enabled', 'register', 'unregister']

faulthandler module.

[fcntl]
['FASYNC', 'FD_CLOEXEC', 'F_DUPFD', 'F_DUPFD_CLOEXEC', 'F_FULLFSYNC', 'F_GETFD', 'F_GETFL', 'F_GETLK', 'F_GETOWN', 'F_NOCACHE', 'F_RDLCK', 'F_SETFD', 'F_SETFL', 'F_SETLK', 'F_SETLKW', 'F_SETOWN', 'F_UNLCK', 'F_WRLCK', 'LOCK_EX', 'LOCK_NB', 'LOCK_SH', 'LOCK_UN', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'fcntl', 'flock', 'ioctl', 'lockf']

This module performs file control and I/O control on file 
descriptors.  It is an interface to the fcntl() and ioctl() Unix
routines.  File descriptors can be obtained with the fileno() method of
a file or socket object.

[gc]
['DEBUG_COLLECTABLE', 'DEBUG_LEAK', 'DEBUG_SAVEALL', 'DEBUG_STATS', 'DEBUG_UNCOLLECTABLE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'callbacks', 'collect', 'disable', 'enable', 'freeze', 'garbage', 'get_count', 'get_debug', 'get_freeze_count', 'get_objects', 'get_referents', 'get_referrers', 'get_stats', 'get_threshold', 'is_tracked', 'isenabled', 'set_debug', 'set_threshold', 'unfreeze']

This module provides access to the garbage collector for reference cycles.

enable() -- Enable automatic garbage collection.
disable() -- Disable automatic garbage collection.
isenabled() -- Returns true if automatic collection is enabled.
collect() -- Do a full collection right now.
get_count() -- Return the current collection counts.
get_stats() -- Return list of dictionaries containing per-generation stats.
set_debug() -- Set debugging flags.
get_debug() -- Get debugging flags.
set_threshold() -- Set the collection thresholds.
get_threshold() -- Return the current the collection thresholds.
get_objects() -- Return a list of all objects tracked by the collector.
is_tracked() -- Returns true if a given object is tracked.
get_referrers() -- Return the list of objects that refer to an object.
get_referents() -- Return the list of objects that an object refers to.
freeze() -- Freeze all tracked objects and ignore them for future collections.
unfreeze() -- Unfreeze all objects in the permanent generation.
get_freeze_count() -- Return the number of objects in the permanent generation.


[grp]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'getgrall', 'getgrgid', 'getgrnam', 'struct_group']

Access to the Unix group database.

Group entries are reported as 4-tuples containing the following fields
from the group database, in order:

  gr_name   - name of the group
  gr_passwd - group password (encrypted); often empty
  gr_gid    - numeric ID of the group
  gr_mem    - list of members

The gid is an integer, name and password are strings.  (Note that most
users are not explicitly listed as members of the groups they are in
according to the password database.  Check both databases to get
complete membership information.)

[itertools]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_grouper', '_tee', '_tee_dataobject', 'accumulate', 'chain', 'combinations', 'combinations_with_replacement', 'compress', 'count', 'cycle', 'dropwhile', 'filterfalse', 'groupby', 'islice', 'permutations', 'product', 'repeat', 'starmap', 'takewhile', 'tee', 'zip_longest']

Functional tools for creating and using iterators.

Infinite iterators:
count(start=0, step=1) --> start, start+step, start+2*step, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times

Iterators terminating on the shortest input sequence:
accumulate(p[, func]) --> p0, p0+p1, p0+p1+p2
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
chain.from_iterable([p, q, ...]) --> p0, p1, ... plast, q0, q1, ... 
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
filterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
zip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 

Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)


[libzmq]
['__doc__', '__loader__', '__name__', '__package__', '__spec__']

None

[marshal]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'dump', 'dumps', 'load', 'loads', 'version']

This module contains functions that can read and write Python values in
a binary format. The format is specific to Python, but independent of
machine architecture issues.

Not all Python object types are supported; in general, only objects
whose value is independent from a particular invocation of Python can be
written and read by this module. The following types are supported:
None, integers, floating point numbers, strings, bytes, bytearrays,
tuples, lists, sets, dictionaries, and code objects, where it
should be understood that tuples, lists and dictionaries are only
supported as long as the values contained therein are themselves
supported; and recursive lists and dictionaries should not be written
(they will cause infinite loops).

Variables:

version -- indicates the format that the module uses. Version 0 is the
    historical format, version 1 shares interned strings and version 2
    uses a binary format for floating point numbers.
    Version 3 shares common object references (New in version 3.4).

Functions:

dump() -- write value to a file
load() -- read value from a file
dumps() -- marshal value as a bytes object
loads() -- read value from a bytes-like object

[math]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']

This module is always available.  It provides access to the
mathematical functions defined by the C standard.

[mmap]
['ACCESS_COPY', 'ACCESS_DEFAULT', 'ACCESS_READ', 'ACCESS_WRITE', 'ALLOCATIONGRANULARITY', 'MAP_ANON', 'MAP_ANONYMOUS', 'MAP_PRIVATE', 'MAP_SHARED', 'PAGESIZE', 'PROT_EXEC', 'PROT_READ', 'PROT_WRITE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'mmap']

None

[parser]
['ParserError', 'STType', '__copyright__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_pickler', 'compilest', 'expr', 'isexpr', 'issuite', 'sequence2st', 'st2list', 'st2tuple', 'suite', 'tuple2st']

This is an interface to Python's internal parser.

[posix]
['CLD_CONTINUED', 'CLD_DUMPED', 'CLD_EXITED', 'CLD_TRAPPED', 'DirEntry', 'EX_CANTCREAT', 'EX_CONFIG', 'EX_DATAERR', 'EX_IOERR', 'EX_NOHOST', 'EX_NOINPUT', 'EX_NOPERM', 'EX_NOUSER', 'EX_OK', 'EX_OSERR', 'EX_OSFILE', 'EX_PROTOCOL', 'EX_SOFTWARE', 'EX_TEMPFAIL', 'EX_UNAVAILABLE', 'EX_USAGE', 'F_LOCK', 'F_OK', 'F_TEST', 'F_TLOCK', 'F_ULOCK', 'NGROUPS_MAX', 'O_ACCMODE', 'O_APPEND', 'O_ASYNC', 'O_CLOEXEC', 'O_CREAT', 'O_DIRECTORY', 'O_DSYNC', 'O_EXCL', 'O_EXLOCK', 'O_NDELAY', 'O_NOCTTY', 'O_NOFOLLOW', 'O_NONBLOCK', 'O_RDONLY', 'O_RDWR', 'O_SHLOCK', 'O_SYNC', 'O_TRUNC', 'O_WRONLY', 'PRIO_PGRP', 'PRIO_PROCESS', 'PRIO_USER', 'P_ALL', 'P_PGID', 'P_PID', 'RTLD_GLOBAL', 'RTLD_LAZY', 'RTLD_LOCAL', 'RTLD_NODELETE', 'RTLD_NOLOAD', 'RTLD_NOW', 'R_OK', 'SCHED_FIFO', 'SCHED_OTHER', 'SCHED_RR', 'SEEK_DATA', 'SEEK_HOLE', 'ST_NOSUID', 'ST_RDONLY', 'TMP_MAX', 'WCONTINUED', 'WCOREDUMP', 'WEXITED', 'WEXITSTATUS', 'WIFCONTINUED', 'WIFEXITED', 'WIFSIGNALED', 'WIFSTOPPED', 'WNOHANG', 'WNOWAIT', 'WSTOPPED', 'WSTOPSIG', 'WTERMSIG', 'WUNTRACED', 'W_OK', 'X_OK', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_exit', '_have_functions', 'abort', 'access', 'chdir', 'chflags', 'chmod', 'chown', 'chroot', 'close', 'closerange', 'confstr', 'confstr_names', 'cpu_count', 'ctermid', 'device_encoding', 'dup', 'dup2', 'environ', 'error', 'execv', 'execve', 'fchdir', 'fchmod', 'fchown', 'fork', 'forkpty', 'fpathconf', 'fspath', 'fstat', 'fstatvfs', 'fsync', 'ftruncate', 'get_blocking', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'getegid', 'geteuid', 'getgid', 'getgrouplist', 'getgroups', 'getloadavg', 'getlogin', 'getpgid', 'getpgrp', 'getpid', 'getppid', 'getpriority', 'getsid', 'getuid', 'initgroups', 'isatty', 'kill', 'killpg', 'lchflags', 'lchmod', 'lchown', 'link', 'listdir', 'lockf', 'lseek', 'lstat', 'major', 'makedev', 'minor', 'mkdir', 'mkfifo', 'mknod', 'nice', 'open', 'openpty', 'pathconf', 'pathconf_names', 'pipe', 'pread', 'putenv', 'pwrite', 'read', 'readlink', 'readv', 'register_at_fork', 'remove', 'rename', 'replace', 'rmdir', 'scandir', 'sched_get_priority_max', 'sched_get_priority_min', 'sched_yield', 'sendfile', 'set_blocking', 'set_inheritable', 'setegid', 'seteuid', 'setgid', 'setgroups', 'setpgid', 'setpgrp', 'setpriority', 'setregid', 'setreuid', 'setuid', 'stat', 'stat_result', 'statvfs', 'statvfs_result', 'strerror', 'symlink', 'sync', 'sysconf', 'sysconf_names', 'system', 'tcgetpgrp', 'tcsetpgrp', 'terminal_size', 'times', 'times_result', 'truncate', 'ttyname', 'umask', 'uname', 'uname_result', 'unlink', 'unsetenv', 'urandom', 'utime', 'wait', 'wait3', 'wait4', 'waitpid', 'write', 'writev']

This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls.

[pwd]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'getpwall', 'getpwnam', 'getpwuid', 'struct_passwd']

This module provides access to the Unix password database.
It is available on all Unix versions.

Password database entries are reported as 7-tuples containing the following
items from the password database (see `<pwd.h>'), in order:
pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.
The uid and gid items are integers, all others are strings. An
exception is raised if the entry asked for cannot be found.

[pyexpat]
['EXPAT_VERSION', 'ErrorString', 'ExpatError', 'ParserCreate', 'XMLParserType', 'XML_PARAM_ENTITY_PARSING_ALWAYS', 'XML_PARAM_ENTITY_PARSING_NEVER', 'XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'errors', 'expat_CAPI', 'features', 'model', 'native_encoding', 'version_info']

Python wrapper for Expat parser.

[pythonbox]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'cachePath', 'docPath', 'libPath', 'pbSendEvent', 'pybytes_address', 'pytexture_address', 'pytexture_create', 'pytexture_update', 'showRawImage']

pythonbox extends module

[resource]
['RLIMIT_AS', 'RLIMIT_CORE', 'RLIMIT_CPU', 'RLIMIT_DATA', 'RLIMIT_FSIZE', 'RLIMIT_MEMLOCK', 'RLIMIT_NOFILE', 'RLIMIT_NPROC', 'RLIMIT_RSS', 'RLIMIT_STACK', 'RLIM_INFINITY', 'RUSAGE_CHILDREN', 'RUSAGE_SELF', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'getpagesize', 'getrlimit', 'getrusage', 'setrlimit', 'struct_rusage']

None

[select]
['KQ_EV_ADD', 'KQ_EV_CLEAR', 'KQ_EV_DELETE', 'KQ_EV_DISABLE', 'KQ_EV_ENABLE', 'KQ_EV_EOF', 'KQ_EV_ERROR', 'KQ_EV_FLAG1', 'KQ_EV_ONESHOT', 'KQ_EV_SYSFLAGS', 'KQ_FILTER_AIO', 'KQ_FILTER_PROC', 'KQ_FILTER_READ', 'KQ_FILTER_SIGNAL', 'KQ_FILTER_TIMER', 'KQ_FILTER_VNODE', 'KQ_FILTER_WRITE', 'KQ_NOTE_ATTRIB', 'KQ_NOTE_CHILD', 'KQ_NOTE_DELETE', 'KQ_NOTE_EXEC', 'KQ_NOTE_EXIT', 'KQ_NOTE_EXTEND', 'KQ_NOTE_FORK', 'KQ_NOTE_LINK', 'KQ_NOTE_LOWAT', 'KQ_NOTE_PCTRLMASK', 'KQ_NOTE_PDATAMASK', 'KQ_NOTE_RENAME', 'KQ_NOTE_REVOKE', 'KQ_NOTE_TRACK', 'KQ_NOTE_TRACKERR', 'KQ_NOTE_WRITE', 'PIPE_BUF', 'POLLERR', 'POLLHUP', 'POLLIN', 'POLLNVAL', 'POLLOUT', 'POLLPRI', 'POLLRDBAND', 'POLLRDNORM', 'POLLWRBAND', 'POLLWRNORM', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'kevent', 'kqueue', 'poll', 'select']

This module supports asynchronous I/O on multiple file descriptors.

*** IMPORTANT NOTICE ***
On Windows, only sockets are supported; on Unix, all file descriptors.

[sys]
['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__', '__interactivehook__', '__loader__', '__name__', '__package__', '__spec__', '__stderr__', '__stdin__', '__stdout__', '_clear_type_cache', '_current_frames', '_debugmallocstats', '_framework', '_getframe', '_git', '_home', '_xoptions', 'abiflags', 'api_version', 'argv', 'base_exec_prefix', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'fd_ctrlin', 'fd_ctrlout', 'flags', 'float_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth', 'get_coroutine_wrapper', 'getallocatedblocks', 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'is_finalizing', 'last_traceback', 'last_type', 'last_value', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'set_coroutine_wrapper', 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'version', 'version_info', 'warnoptions']

This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

Static objects:

builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a struct sequence with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a struct sequence with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a struct sequence with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a struct sequence with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function


[syslog]
['LOG_ALERT', 'LOG_AUTH', 'LOG_AUTHPRIV', 'LOG_CONS', 'LOG_CRIT', 'LOG_CRON', 'LOG_DAEMON', 'LOG_DEBUG', 'LOG_EMERG', 'LOG_ERR', 'LOG_INFO', 'LOG_KERN', 'LOG_LOCAL0', 'LOG_LOCAL1', 'LOG_LOCAL2', 'LOG_LOCAL3', 'LOG_LOCAL4', 'LOG_LOCAL5', 'LOG_LOCAL6', 'LOG_LOCAL7', 'LOG_LPR', 'LOG_MAIL', 'LOG_MASK', 'LOG_NDELAY', 'LOG_NEWS', 'LOG_NOTICE', 'LOG_NOWAIT', 'LOG_ODELAY', 'LOG_PERROR', 'LOG_PID', 'LOG_SYSLOG', 'LOG_UPTO', 'LOG_USER', 'LOG_UUCP', 'LOG_WARNING', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'closelog', 'openlog', 'setlogmask', 'syslog']

None

[termios]
['B0', 'B110', 'B115200', 'B1200', 'B134', 'B150', 'B1800', 'B19200', 'B200', 'B230400', 'B2400', 'B300', 'B38400', 'B4800', 'B50', 'B57600', 'B600', 'B75', 'B9600', 'BRKINT', 'BS0', 'BS1', 'BSDLY', 'CDSUSP', 'CEOF', 'CEOL', 'CEOT', 'CERASE', 'CFLUSH', 'CINTR', 'CKILL', 'CLNEXT', 'CLOCAL', 'CQUIT', 'CR0', 'CR1', 'CR2', 'CR3', 'CRDLY', 'CREAD', 'CRPRNT', 'CRTSCTS', 'CS5', 'CS6', 'CS7', 'CS8', 'CSIZE', 'CSTART', 'CSTOP', 'CSTOPB', 'CSUSP', 'CWERASE', 'ECHO', 'ECHOCTL', 'ECHOE', 'ECHOK', 'ECHOKE', 'ECHONL', 'ECHOPRT', 'EXTA', 'EXTB', 'FF0', 'FF1', 'FFDLY', 'FIOASYNC', 'FIOCLEX', 'FIONBIO', 'FIONCLEX', 'FIONREAD', 'FLUSHO', 'HUPCL', 'ICANON', 'ICRNL', 'IEXTEN', 'IGNBRK', 'IGNCR', 'IGNPAR', 'IMAXBEL', 'INLCR', 'INPCK', 'ISIG', 'ISTRIP', 'IXANY', 'IXOFF', 'IXON', 'NCCS', 'NL0', 'NL1', 'NLDLY', 'NOFLSH', 'OCRNL', 'OFDEL', 'OFILL', 'ONLCR', 'ONLRET', 'ONOCR', 'OPOST', 'PARENB', 'PARMRK', 'PARODD', 'PENDIN', 'TAB0', 'TAB1', 'TAB2', 'TAB3', 'TABDLY', 'TCIFLUSH', 'TCIOFF', 'TCIOFLUSH', 'TCION', 'TCOFLUSH', 'TCOOFF', 'TCOON', 'TCSADRAIN', 'TCSAFLUSH', 'TCSANOW', 'TCSASOFT', 'TIOCCONS', 'TIOCEXCL', 'TIOCGETD', 'TIOCGPGRP', 'TIOCGWINSZ', 'TIOCMBIC', 'TIOCMBIS', 'TIOCMGET', 'TIOCMSET', 'TIOCM_CAR', 'TIOCM_CD', 'TIOCM_CTS', 'TIOCM_DSR', 'TIOCM_DTR', 'TIOCM_LE', 'TIOCM_RI', 'TIOCM_RNG', 'TIOCM_RTS', 'TIOCM_SR', 'TIOCM_ST', 'TIOCNOTTY', 'TIOCNXCL', 'TIOCOUTQ', 'TIOCPKT', 'TIOCPKT_DATA', 'TIOCPKT_DOSTOP', 'TIOCPKT_FLUSHREAD', 'TIOCPKT_FLUSHWRITE', 'TIOCPKT_NOSTOP', 'TIOCPKT_START', 'TIOCPKT_STOP', 'TIOCSCTTY', 'TIOCSETD', 'TIOCSPGRP', 'TIOCSTI', 'TIOCSWINSZ', 'TOSTOP', 'VDISCARD', 'VEOF', 'VEOL', 'VEOL2', 'VERASE', 'VINTR', 'VKILL', 'VLNEXT', 'VMIN', 'VQUIT', 'VREPRINT', 'VSTART', 'VSTOP', 'VSUSP', 'VT0', 'VT1', 'VTDLY', 'VTIME', 'VWERASE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'tcdrain', 'tcflow', 'tcflush', 'tcgetattr', 'tcsendbreak', 'tcsetattr']

This module provides an interface to the Posix calls for tty I/O control.
For a complete description of these calls, see the Posix or Unix manual
pages. It is only available for those Unix versions that support Posix
termios style tty I/O control.

All functions in this module take a file descriptor fd as their first
argument. This can be an integer file descriptor, such as returned by
sys.stdin.fileno(), or a file object, such as sys.stdin itself.

[time]
['CLOCK_MONOTONIC', 'CLOCK_MONOTONIC_RAW', 'CLOCK_PROCESS_CPUTIME_ID', 'CLOCK_REALTIME', 'CLOCK_THREAD_CPUTIME_ID', '_STRUCT_TM_ITEMS', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'altzone', 'asctime', 'clock', 'clock_getres', 'clock_gettime', 'clock_gettime_ns', 'ctime', 'daylight', 'get_clock_info', 'gmtime', 'localtime', 'mktime', 'monotonic', 'monotonic_ns', 'perf_counter', 'perf_counter_ns', 'process_time', 'process_time_ns', 'sleep', 'strftime', 'strptime', 'struct_time', 'thread_time', 'thread_time_ns', 'time', 'time_ns', 'timezone', 'tzname', 'tzset']

This module provides various functions to manipulate time values.

There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).

The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (including century, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.


[unicodedata]
['UCD', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'bidirectional', 'category', 'combining', 'decimal', 'decomposition', 'digit', 'east_asian_width', 'lookup', 'mirrored', 'name', 'normalize', 'numeric', 'ucd_3_2_0', 'ucnhash_CAPI', 'unidata_version']

This module provides access to the Unicode Character Database which
defines character properties for all Unicode characters. The data in
this database is based on the UnicodeData.txt file version
11.0.0 which is publicly available from ftp://ftp.unicode.org/.

The module uses the same names and symbols as defined by the
UnicodeData File Format 11.0.0.

[xxlimited]
['Null', 'Str', 'Xxo', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'foo', 'new', 'roj']

This is a template module just for instruction.

[xxsubtype]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'bench', 'spamdict', 'spamlist']

xxsubtype is an example module showing how to subtype builtin types from C.
test_descr.py in the standard test suite requires it in order to complete.
If you don't care about the examples, and don't intend to run the Python
test suite, you can recompile Python without Modules/xxsubtype.c.

[zipimport]
['ZipImportError', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_zip_directory_cache', 'zipimporter']

zipimport provides support for importing Python modules from Zip archives.

This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.

It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives.

[zlib]
['DEFLATED', 'DEF_BUF_SIZE', 'DEF_MEM_LEVEL', 'MAX_WBITS', 'ZLIB_RUNTIME_VERSION', 'ZLIB_VERSION', 'Z_BEST_COMPRESSION', 'Z_BEST_SPEED', 'Z_BLOCK', 'Z_DEFAULT_COMPRESSION', 'Z_DEFAULT_STRATEGY', 'Z_FILTERED', 'Z_FINISH', 'Z_FIXED', 'Z_FULL_FLUSH', 'Z_HUFFMAN_ONLY', 'Z_NO_COMPRESSION', 'Z_NO_FLUSH', 'Z_PARTIAL_FLUSH', 'Z_RLE', 'Z_SYNC_FLUSH', 'Z_TREES', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', 'adler32', 'compress', 'compressobj', 'crc32', 'decompress', 'decompressobj', 'error']

The functions in this module allow compression and decompression using the
zlib library, which is based on GNU zip.

adler32(string[, start]) -- Compute an Adler-32 checksum.
compress(data[, level]) -- Compress data, with compression level 0-9 or -1.
compressobj([level[, ...]]) -- Return a compressor object.
crc32(string[, start]) -- Compute a CRC-32 checksum.
decompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.
decompressobj([wbits[, zdict]]]) -- Return a decompressor object.

'wbits' is window buffer size and container format.
Compressor objects support compress() and flush() methods; decompressor
objects support decompress() and flush().

[sys]
['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__', '__interactivehook__', '__loader__', '__name__', '__package__', '__spec__', '__stderr__', '__stdin__', '__stdout__', '_clear_type_cache', '_current_frames', '_debugmallocstats', '_framework', '_getframe', '_git', '_home', '_xoptions', 'abiflags', 'api_version', 'argv', 'base_exec_prefix', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'fd_ctrlin', 'fd_ctrlout', 'flags', 'float_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth', 'get_coroutine_wrapper', 'getallocatedblocks', 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'is_finalizing', 'last_traceback', 'last_type', 'last_value', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'set_coroutine_wrapper', 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'version', 'version_info', 'warnoptions']

This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

Static objects:

builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a struct sequence with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a struct sequence with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a struct sequence with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a struct sequence with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function


[builtins]
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']

Built-in functions, exceptions, and other objects.

Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.

[_frozen_importlib]
['BuiltinImporter', 'FrozenImporter', 'ModuleSpec', '_DeadlockError', '_DummyModuleLock', '_ERR_MSG', '_ERR_MSG_PREFIX', '_ImportLockContext', '_ModuleLock', '_ModuleLockManager', '_NEEDS_LOADING', '__builtins__', '__doc__', '__file__', '__import__', '__loader__', '__name__', '__package__', '__spec__', '_blocking_on', '_bootstrap_external', '_builtin_from_name', '_calc___package__', '_call_with_frames_removed', '_exec', '_find_and_load', '_find_and_load_unlocked', '_find_spec', '_find_spec_legacy', '_gcd_import', '_get_module_lock', '_handle_fromlist', '_imp', '_init_module_attrs', '_install', '_install_external_importers', '_installed_safely', '_load', '_load_backward_compatible', '_load_module_shim', '_load_unlocked', '_lock_unlock_module', '_module_locks', '_module_repr', '_module_repr_from_spec', '_new_module', '_requires_builtin', '_requires_frozen', '_resolve_name', '_sanity_check', '_setup', '_spec_from_module', '_thread', '_verbose_message', '_warnings', '_weakref', '_wrap', 'module_from_spec', 'spec_from_loader', 'sys']

Core implementation of import.

This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.



[_imp]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_fix_co_filename', 'acquire_lock', 'check_hash_based_pycs', 'create_builtin', 'create_dynamic', 'exec_builtin', 'exec_dynamic', 'extension_suffixes', 'get_frozen_object', 'init_frozen', 'is_builtin', 'is_frozen', 'is_frozen_package', 'lock_held', 'release_lock', 'source_hash']

(Extremely) low-level import machinery bits as used by importlib and imp.

[_thread]
['LockType', 'RLock', 'TIMEOUT_MAX', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_count', '_local', '_set_sentinel', 'allocate', 'allocate_lock', 'error', 'exit', 'exit_thread', 'get_ident', 'interrupt_main', 'stack_size', 'start_new', 'start_new_thread']

This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface.

[_warnings]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_defaultaction', '_filters_mutated', '_onceregistry', 'filters', 'warn', 'warn_explicit']

_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up.

[_weakref]
['CallableProxyType', 'ProxyType', 'ReferenceType', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_remove_dead_weakref', 'getweakrefcount', 'getweakrefs', 'proxy', 'ref']

Weak-reference support module.

[zipimport]
['ZipImportError', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_zip_directory_cache', 'zipimporter']

zipimport provides support for importing Python modules from Zip archives.

This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.

It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives.

[_frozen_importlib_external]
['BYTECODE_SUFFIXES', 'DEBUG_BYTECODE_SUFFIXES', 'EXTENSION_SUFFIXES', 'ExtensionFileLoader', 'FileFinder', 'FileLoader', 'MAGIC_NUMBER', 'OPTIMIZED_BYTECODE_SUFFIXES', 'PathFinder', 'SOURCE_SUFFIXES', 'SourceFileLoader', 'SourceLoader', 'SourcelessFileLoader', 'WindowsRegistryFinder', '_CASE_INSENSITIVE_PLATFORMS', '_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY', '_CASE_INSENSITIVE_PLATFORMS_STR_KEY', '_LoaderBasics', '_NamespaceLoader', '_NamespacePath', '_OPT', '_POPULATE', '_PYCACHE', '_RAW_MAGIC_NUMBER', '__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_bootstrap', '_calc_mode', '_check_name', '_classify_pyc', '_code_to_hash_pyc', '_code_to_timestamp_pyc', '_code_type', '_compile_bytecode', '_find_module_shim', '_fix_up_module', '_get_cached', '_get_sourcefile', '_get_supported_file_loaders', '_imp', '_install', '_io', '_make_relax_case', '_os', '_path_is_mode_type', '_path_isdir', '_path_isfile', '_path_join', '_path_split', '_path_stat', '_r_long', '_relax_case', '_setup', '_thread', '_validate_hash_pyc', '_validate_timestamp_pyc', '_w_long', '_warnings', '_weakref', '_write_atomic', 'builtins', 'cache_from_source', 'decode_source', 'marshal', 'path_sep', 'path_separators', 'source_from_cache', 'spec_from_file_location', 'sys']

Core implementation of path-based import.

This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.



[_io]
['BlockingIOError', 'BufferedRWPair', 'BufferedRandom', 'BufferedReader', 'BufferedWriter', 'BytesIO', 'DEFAULT_BUFFER_SIZE', 'FileIO', 'IncrementalNewlineDecoder', 'StringIO', 'TextIOWrapper', 'UnsupportedOperation', '_BufferedIOBase', '_IOBase', '_RawIOBase', '_TextIOBase', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'open']

The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.


[marshal]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'dump', 'dumps', 'load', 'loads', 'version']

This module contains functions that can read and write Python values in
a binary format. The format is specific to Python, but independent of
machine architecture issues.

Not all Python object types are supported; in general, only objects
whose value is independent from a particular invocation of Python can be
written and read by this module. The following types are supported:
None, integers, floating point numbers, strings, bytes, bytearrays,
tuples, lists, sets, dictionaries, and code objects, where it
should be understood that tuples, lists and dictionaries are only
supported as long as the values contained therein are themselves
supported; and recursive lists and dictionaries should not be written
(they will cause infinite loops).

Variables:

version -- indicates the format that the module uses. Version 0 is the
    historical format, version 1 shares interned strings and version 2
    uses a binary format for floating point numbers.
    Version 3 shares common object references (New in version 3.4).

Functions:

dump() -- write value to a file
load() -- read value from a file
dumps() -- marshal value as a bytes object
loads() -- read value from a bytes-like object

[posix]
['CLD_CONTINUED', 'CLD_DUMPED', 'CLD_EXITED', 'CLD_TRAPPED', 'DirEntry', 'EX_CANTCREAT', 'EX_CONFIG', 'EX_DATAERR', 'EX_IOERR', 'EX_NOHOST', 'EX_NOINPUT', 'EX_NOPERM', 'EX_NOUSER', 'EX_OK', 'EX_OSERR', 'EX_OSFILE', 'EX_PROTOCOL', 'EX_SOFTWARE', 'EX_TEMPFAIL', 'EX_UNAVAILABLE', 'EX_USAGE', 'F_LOCK', 'F_OK', 'F_TEST', 'F_TLOCK', 'F_ULOCK', 'NGROUPS_MAX', 'O_ACCMODE', 'O_APPEND', 'O_ASYNC', 'O_CLOEXEC', 'O_CREAT', 'O_DIRECTORY', 'O_DSYNC', 'O_EXCL', 'O_EXLOCK', 'O_NDELAY', 'O_NOCTTY', 'O_NOFOLLOW', 'O_NONBLOCK', 'O_RDONLY', 'O_RDWR', 'O_SHLOCK', 'O_SYNC', 'O_TRUNC', 'O_WRONLY', 'PRIO_PGRP', 'PRIO_PROCESS', 'PRIO_USER', 'P_ALL', 'P_PGID', 'P_PID', 'RTLD_GLOBAL', 'RTLD_LAZY', 'RTLD_LOCAL', 'RTLD_NODELETE', 'RTLD_NOLOAD', 'RTLD_NOW', 'R_OK', 'SCHED_FIFO', 'SCHED_OTHER', 'SCHED_RR', 'SEEK_DATA', 'SEEK_HOLE', 'ST_NOSUID', 'ST_RDONLY', 'TMP_MAX', 'WCONTINUED', 'WCOREDUMP', 'WEXITED', 'WEXITSTATUS', 'WIFCONTINUED', 'WIFEXITED', 'WIFSIGNALED', 'WIFSTOPPED', 'WNOHANG', 'WNOWAIT', 'WSTOPPED', 'WSTOPSIG', 'WTERMSIG', 'WUNTRACED', 'W_OK', 'X_OK', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_exit', '_have_functions', 'abort', 'access', 'chdir', 'chflags', 'chmod', 'chown', 'chroot', 'close', 'closerange', 'confstr', 'confstr_names', 'cpu_count', 'ctermid', 'device_encoding', 'dup', 'dup2', 'environ', 'error', 'execv', 'execve', 'fchdir', 'fchmod', 'fchown', 'fork', 'forkpty', 'fpathconf', 'fspath', 'fstat', 'fstatvfs', 'fsync', 'ftruncate', 'get_blocking', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'getegid', 'geteuid', 'getgid', 'getgrouplist', 'getgroups', 'getloadavg', 'getlogin', 'getpgid', 'getpgrp', 'getpid', 'getppid', 'getpriority', 'getsid', 'getuid', 'initgroups', 'isatty', 'kill', 'killpg', 'lchflags', 'lchmod', 'lchown', 'link', 'listdir', 'lockf', 'lseek', 'lstat', 'major', 'makedev', 'minor', 'mkdir', 'mkfifo', 'mknod', 'nice', 'open', 'openpty', 'pathconf', 'pathconf_names', 'pipe', 'pread', 'putenv', 'pwrite', 'read', 'readlink', 'readv', 'register_at_fork', 'remove', 'rename', 'replace', 'rmdir', 'scandir', 'sched_get_priority_max', 'sched_get_priority_min', 'sched_yield', 'sendfile', 'set_blocking', 'set_inheritable', 'setegid', 'seteuid', 'setgid', 'setgroups', 'setpgid', 'setpgrp', 'setpriority', 'setregid', 'setreuid', 'setuid', 'stat', 'stat_result', 'statvfs', 'statvfs_result', 'strerror', 'symlink', 'sync', 'sysconf', 'sysconf_names', 'system', 'tcgetpgrp', 'tcsetpgrp', 'terminal_size', 'times', 'times_result', 'truncate', 'ttyname', 'umask', 'uname', 'uname_result', 'unlink', 'unsetenv', 'urandom', 'utime', 'wait', 'wait3', 'wait4', 'waitpid', 'write', 'writev']

This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls.

[encodings]
['CodecRegistryError', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '_aliases', '_cache', '_import_tail', '_unknown', 'aliases', 'codecs', 'latin_1', 'normalize_encoding', 'search_function', 'sys', 'utf_8']

 Standard "encodings" Package

    Standard Python encoding modules are stored in this package
    directory.

    Codec modules must have names corresponding to normalized encoding
    names as defined in the normalize_encoding() function below, e.g.
    'utf-8' must be implemented by the module 'utf_8.py'.

    Each codec module must export the following interface:

    * getregentry() -> codecs.CodecInfo object
    The getregentry() API must return a CodecInfo object with encoder, decoder,
    incrementalencoder, incrementaldecoder, streamwriter and streamreader
    atttributes which adhere to the Python Codec Interface Standard.

    In addition, a module may optionally also define the following
    APIs which are then used by the package's codec search function:

    * getaliases() -> sequence of encoding name strings to use as aliases

    Alias names returned by getaliases() must be normalized encoding
    names as defined by normalize_encoding().

Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.



[codecs]
['BOM', 'BOM32_BE', 'BOM32_LE', 'BOM64_BE', 'BOM64_LE', 'BOM_BE', 'BOM_LE', 'BOM_UTF16', 'BOM_UTF16_BE', 'BOM_UTF16_LE', 'BOM_UTF32', 'BOM_UTF32_BE', 'BOM_UTF32_LE', 'BOM_UTF8', 'BufferedIncrementalDecoder', 'BufferedIncrementalEncoder', 'Codec', 'CodecInfo', 'EncodedFile', 'IncrementalDecoder', 'IncrementalEncoder', 'StreamReader', 'StreamReaderWriter', 'StreamRecoder', 'StreamWriter', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_false', 'ascii_decode', 'ascii_encode', 'backslashreplace_errors', 'builtins', 'charmap_build', 'charmap_decode', 'charmap_encode', 'decode', 'encode', 'escape_decode', 'escape_encode', 'getdecoder', 'getencoder', 'getincrementaldecoder', 'getincrementalencoder', 'getreader', 'getwriter', 'ignore_errors', 'iterdecode', 'iterencode', 'latin_1_decode', 'latin_1_encode', 'lookup', 'lookup_error', 'make_encoding_map', 'make_identity_dict', 'namereplace_errors', 'open', 'raw_unicode_escape_decode', 'raw_unicode_escape_encode', 'readbuffer_encode', 'register', 'register_error', 'replace_errors', 'strict_errors', 'sys', 'unicode_escape_decode', 'unicode_escape_encode', 'unicode_internal_decode', 'unicode_internal_encode', 'utf_16_be_decode', 'utf_16_be_encode', 'utf_16_decode', 'utf_16_encode', 'utf_16_ex_decode', 'utf_16_le_decode', 'utf_16_le_encode', 'utf_32_be_decode', 'utf_32_be_encode', 'utf_32_decode', 'utf_32_encode', 'utf_32_ex_decode', 'utf_32_le_decode', 'utf_32_le_encode', 'utf_7_decode', 'utf_7_encode', 'utf_8_decode', 'utf_8_encode', 'xmlcharrefreplace_errors']

 codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.



[_codecs]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_forget_codec', 'ascii_decode', 'ascii_encode', 'charmap_build', 'charmap_decode', 'charmap_encode', 'decode', 'encode', 'escape_decode', 'escape_encode', 'latin_1_decode', 'latin_1_encode', 'lookup', 'lookup_error', 'raw_unicode_escape_decode', 'raw_unicode_escape_encode', 'readbuffer_encode', 'register', 'register_error', 'unicode_escape_decode', 'unicode_escape_encode', 'unicode_internal_decode', 'unicode_internal_encode', 'utf_16_be_decode', 'utf_16_be_encode', 'utf_16_decode', 'utf_16_encode', 'utf_16_ex_decode', 'utf_16_le_decode', 'utf_16_le_encode', 'utf_32_be_decode', 'utf_32_be_encode', 'utf_32_decode', 'utf_32_encode', 'utf_32_ex_decode', 'utf_32_le_decode', 'utf_32_le_encode', 'utf_7_decode', 'utf_7_encode', 'utf_8_decode', 'utf_8_encode']

None

[encodings.aliases]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'aliases']

 Encoding Aliases Support

    This module is used by the encodings package search function to
    map encodings names to module names.

    Note that the search function normalizes the encoding names before
    doing the lookup, so the mapping will have to map normalized
    encoding names to module names.

    Contents:

        The following aliases dictionary contains mappings of all IANA
        character set names for which the Python core library provides
        codecs. In addition to these, a few Python specific codec
        aliases have also been added.



[encodings.utf_8]
['IncrementalDecoder', 'IncrementalEncoder', 'StreamReader', 'StreamWriter', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'codecs', 'decode', 'encode', 'getregentry']

 Python 'utf-8' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.



[encodings.latin_1]
['Codec', 'IncrementalDecoder', 'IncrementalEncoder', 'StreamConverter', 'StreamReader', 'StreamWriter', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'codecs', 'getregentry']

 Python 'latin-1' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.



[io]
['BlockingIOError', 'BufferedIOBase', 'BufferedRWPair', 'BufferedRandom', 'BufferedReader', 'BufferedWriter', 'BytesIO', 'DEFAULT_BUFFER_SIZE', 'FileIO', 'IOBase', 'IncrementalNewlineDecoder', 'OpenWrapper', 'RawIOBase', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'StringIO', 'TextIOBase', 'TextIOWrapper', 'UnsupportedOperation', '__all__', '__author__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_io', 'abc', 'open']

The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.


[abc]
['ABC', 'ABCMeta', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_abc_init', '_abc_instancecheck', '_abc_register', '_abc_subclasscheck', '_get_dump', '_reset_caches', '_reset_registry', 'abstractclassmethod', 'abstractmethod', 'abstractproperty', 'abstractstaticmethod', 'get_cache_token']

Abstract Base Classes (ABCs) according to PEP 3119.

[_abc]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_abc_init', '_abc_instancecheck', '_abc_register', '_abc_subclasscheck', '_get_dump', '_reset_caches', '_reset_registry', 'get_cache_token']

Module contains faster C implementation of abc.ABCMeta

[__main__]
['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__future__', '__loader__', '__main__', '__name__', '__package__', '__spec__', 'man', 'sys']

None

[site]
['ENABLE_USER_SITE', 'PREFIXES', 'USER_BASE', 'USER_SITE', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_get_path', '_getuserbase', '_init_pathinfo', '_script', '_sitebuiltins', 'abs_paths', 'addpackage', 'addsitedir', 'addsitepackages', 'addusersitepackages', 'builtins', 'check_enableusersite', 'enablerlcompleter', 'execsitecustomize', 'execusercustomize', 'getsitepackages', 'getuserbase', 'getusersitepackages', 'main', 'makepath', 'os', 'removeduppaths', 'setcopyright', 'sethelper', 'setquit', 'sys', 'venv']

Append module search paths for third-party packages to sys.path.

****************************************************************
* This module is automatically imported during initialization. *
****************************************************************

This will append site-specific paths to the module search path.  On
Unix (including Mac OSX), it starts with sys.prefix and
sys.exec_prefix (if different) and appends
lib/python<version>/site-packages.
On other platforms (such as Windows), it tries each of the
prefixes directly, as well as with lib/site-packages appended.  The
resulting directories, if they exist, are appended to sys.path, and
also inspected for path configuration files.

If a file named "pyvenv.cfg" exists one directory above sys.executable,
sys.prefix and sys.exec_prefix are set to that directory and
it is also checked for site-packages (sys.base_prefix and
sys.base_exec_prefix will always be the "real" prefixes of the Python
installation). If "pyvenv.cfg" (a bootstrap configuration file) contains
the key "include-system-site-packages" set to anything other than "false"
(case-insensitive), the system-level prefixes will still also be
searched for site-packages; otherwise they won't.

All of the resulting site-specific directories, if they exist, are
appended to sys.path, and also inspected for path configuration
files.

A path configuration file is a file whose name has the form
<package>.pth; its contents are additional directories (one per line)
to be added to sys.path.  Non-existing directories (or
non-directories) are never added to sys.path; no directory is added to
sys.path more than once.  Blank lines and lines beginning with
'#' are skipped. Lines starting with 'import' are executed.

For example, suppose sys.prefix and sys.exec_prefix are set to
/usr/local and there is a directory /usr/local/lib/python2.5/site-packages
with three subdirectories, foo, bar and spam, and two path
configuration files, foo.pth and bar.pth.  Assume foo.pth contains the
following:

  # foo package configuration
  foo
  bar
  bletch

and bar.pth contains:

  # bar package configuration
  bar

Then the following directories are added to sys.path, in this order:

  /usr/local/lib/python2.5/site-packages/bar
  /usr/local/lib/python2.5/site-packages/foo

Note that bletch is omitted because it doesn't exist; bar precedes foo
because bar.pth comes alphabetically before foo.pth; and spam is
omitted because it is not mentioned in either path configuration file.

The readline module is also automatically configured to enable
completion for systems that support it.  This can be overridden in
sitecustomize, usercustomize or PYTHONSTARTUP.  Starting Python in
isolated mode (-I) disables automatic readline configuration.

After these operations, an attempt is made to import a module
named sitecustomize, which can perform arbitrary additional
site-specific customizations.  If this import fails with an
ImportError exception, it is silently ignored.


[os]
['CLD_CONTINUED', 'CLD_DUMPED', 'CLD_EXITED', 'CLD_TRAPPED', 'DirEntry', 'EX_CANTCREAT', 'EX_CONFIG', 'EX_DATAERR', 'EX_IOERR', 'EX_NOHOST', 'EX_NOINPUT', 'EX_NOPERM', 'EX_NOUSER', 'EX_OK', 'EX_OSERR', 'EX_OSFILE', 'EX_PROTOCOL', 'EX_SOFTWARE', 'EX_TEMPFAIL', 'EX_UNAVAILABLE', 'EX_USAGE', 'F_LOCK', 'F_OK', 'F_TEST', 'F_TLOCK', 'F_ULOCK', 'MutableMapping', 'NGROUPS_MAX', 'O_ACCMODE', 'O_APPEND', 'O_ASYNC', 'O_CLOEXEC', 'O_CREAT', 'O_DIRECTORY', 'O_DSYNC', 'O_EXCL', 'O_EXLOCK', 'O_NDELAY', 'O_NOCTTY', 'O_NOFOLLOW', 'O_NONBLOCK', 'O_RDONLY', 'O_RDWR', 'O_SHLOCK', 'O_SYNC', 'O_TRUNC', 'O_WRONLY', 'PRIO_PGRP', 'PRIO_PROCESS', 'PRIO_USER', 'P_ALL', 'P_NOWAIT', 'P_NOWAITO', 'P_PGID', 'P_PID', 'P_WAIT', 'PathLike', 'RTLD_GLOBAL', 'RTLD_LAZY', 'RTLD_LOCAL', 'RTLD_NODELETE', 'RTLD_NOLOAD', 'RTLD_NOW', 'R_OK', 'SCHED_FIFO', 'SCHED_OTHER', 'SCHED_RR', 'SEEK_CUR', 'SEEK_DATA', 'SEEK_END', 'SEEK_HOLE', 'SEEK_SET', 'ST_NOSUID', 'ST_RDONLY', 'TMP_MAX', 'WCONTINUED', 'WCOREDUMP', 'WEXITED', 'WEXITSTATUS', 'WIFCONTINUED', 'WIFEXITED', 'WIFSIGNALED', 'WIFSTOPPED', 'WNOHANG', 'WNOWAIT', 'WSTOPPED', 'WSTOPSIG', 'WTERMSIG', 'WUNTRACED', 'W_OK', 'X_OK', '_Environ', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_execvpe', '_exists', '_exit', '_fspath', '_fwalk', '_get_exports_list', '_putenv', '_spawnvef', '_unsetenv', '_wrap_close', 'abc', 'abort', 'access', 'altsep', 'chdir', 'chflags', 'chmod', 'chown', 'chroot', 'close', 'closerange', 'confstr', 'confstr_names', 'cpu_count', 'ctermid', 'curdir', 'defpath', 'device_encoding', 'devnull', 'dup', 'dup2', 'environ', 'environb', 'error', 'execl', 'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fchdir', 'fchmod', 'fchown', 'fdopen', 'fork', 'forkpty', 'fpathconf', 'fsdecode', 'fsencode', 'fspath', 'fstat', 'fstatvfs', 'fsync', 'ftruncate', 'fwalk', 'get_blocking', 'get_exec_path', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'getegid', 'getenv', 'getenvb', 'geteuid', 'getgid', 'getgrouplist', 'getgroups', 'getloadavg', 'getlogin', 'getpgid', 'getpgrp', 'getpid', 'getppid', 'getpriority', 'getsid', 'getuid', 'initgroups', 'isatty', 'kill', 'killpg', 'lchflags', 'lchmod', 'lchown', 'linesep', 'link', 'listdir', 'lockf', 'lseek', 'lstat', 'major', 'makedev', 'makedirs', 'minor', 'mkdir', 'mkfifo', 'mknod', 'name', 'nice', 'open', 'openpty', 'pardir', 'path', 'pathconf', 'pathconf_names', 'pathsep', 'pipe', 'popen', 'pread', 'putenv', 'pwrite', 'read', 'readlink', 'readv', 'register_at_fork', 'remove', 'removedirs', 'rename', 'renames', 'replace', 'rmdir', 'scandir', 'sched_get_priority_max', 'sched_get_priority_min', 'sched_yield', 'sendfile', 'sep', 'set_blocking', 'set_inheritable', 'setegid', 'seteuid', 'setgid', 'setgroups', 'setpgid', 'setpgrp', 'setpriority', 'setregid', 'setreuid', 'setuid', 'spawnl', 'spawnle', 'spawnlp', 'spawnlpe', 'spawnv', 'spawnve', 'spawnvp', 'spawnvpe', 'st', 'stat', 'stat_result', 'statvfs', 'statvfs_result', 'strerror', 'supports_bytes_environ', 'supports_dir_fd', 'supports_effective_ids', 'supports_fd', 'supports_follow_symlinks', 'symlink', 'sync', 'sys', 'sysconf', 'sysconf_names', 'system', 'tcgetpgrp', 'tcsetpgrp', 'terminal_size', 'times', 'times_result', 'truncate', 'ttyname', 'umask', 'uname', 'uname_result', 'unlink', 'unsetenv', 'urandom', 'utime', 'wait', 'wait3', 'wait4', 'waitpid', 'walk', 'write', 'writev']

OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix or nt, e.g. unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix' or 'nt'
  - os.curdir is a string representing the current directory (always '.')
  - os.pardir is a string representing the parent directory (always '..')
  - os.sep is the (or a most common) pathname separator ('/' or '\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).


[stat]
['FILE_ATTRIBUTE_ARCHIVE', 'FILE_ATTRIBUTE_COMPRESSED', 'FILE_ATTRIBUTE_DEVICE', 'FILE_ATTRIBUTE_DIRECTORY', 'FILE_ATTRIBUTE_ENCRYPTED', 'FILE_ATTRIBUTE_HIDDEN', 'FILE_ATTRIBUTE_INTEGRITY_STREAM', 'FILE_ATTRIBUTE_NORMAL', 'FILE_ATTRIBUTE_NOT_CONTENT_INDEXED', 'FILE_ATTRIBUTE_NO_SCRUB_DATA', 'FILE_ATTRIBUTE_OFFLINE', 'FILE_ATTRIBUTE_READONLY', 'FILE_ATTRIBUTE_REPARSE_POINT', 'FILE_ATTRIBUTE_SPARSE_FILE', 'FILE_ATTRIBUTE_SYSTEM', 'FILE_ATTRIBUTE_TEMPORARY', 'FILE_ATTRIBUTE_VIRTUAL', 'SF_APPEND', 'SF_ARCHIVED', 'SF_IMMUTABLE', 'SF_NOUNLINK', 'SF_SNAPSHOT', 'ST_ATIME', 'ST_CTIME', 'ST_DEV', 'ST_GID', 'ST_INO', 'ST_MODE', 'ST_MTIME', 'ST_NLINK', 'ST_SIZE', 'ST_UID', 'S_ENFMT', 'S_IEXEC', 'S_IFBLK', 'S_IFCHR', 'S_IFDIR', 'S_IFDOOR', 'S_IFIFO', 'S_IFLNK', 'S_IFMT', 'S_IFPORT', 'S_IFREG', 'S_IFSOCK', 'S_IFWHT', 'S_IMODE', 'S_IREAD', 'S_IRGRP', 'S_IROTH', 'S_IRUSR', 'S_IRWXG', 'S_IRWXO', 'S_IRWXU', 'S_ISBLK', 'S_ISCHR', 'S_ISDIR', 'S_ISDOOR', 'S_ISFIFO', 'S_ISGID', 'S_ISLNK', 'S_ISPORT', 'S_ISREG', 'S_ISSOCK', 'S_ISUID', 'S_ISVTX', 'S_ISWHT', 'S_IWGRP', 'S_IWOTH', 'S_IWRITE', 'S_IWUSR', 'S_IXGRP', 'S_IXOTH', 'S_IXUSR', 'UF_APPEND', 'UF_COMPRESSED', 'UF_HIDDEN', 'UF_IMMUTABLE', 'UF_NODUMP', 'UF_NOUNLINK', 'UF_OPAQUE', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_filemode_table', 'filemode']

Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *


[_stat]
['SF_APPEND', 'SF_ARCHIVED', 'SF_IMMUTABLE', 'SF_NOUNLINK', 'SF_SNAPSHOT', 'ST_ATIME', 'ST_CTIME', 'ST_DEV', 'ST_GID', 'ST_INO', 'ST_MODE', 'ST_MTIME', 'ST_NLINK', 'ST_SIZE', 'ST_UID', 'S_ENFMT', 'S_IEXEC', 'S_IFBLK', 'S_IFCHR', 'S_IFDIR', 'S_IFDOOR', 'S_IFIFO', 'S_IFLNK', 'S_IFMT', 'S_IFPORT', 'S_IFREG', 'S_IFSOCK', 'S_IFWHT', 'S_IMODE', 'S_IREAD', 'S_IRGRP', 'S_IROTH', 'S_IRUSR', 'S_IRWXG', 'S_IRWXO', 'S_IRWXU', 'S_ISBLK', 'S_ISCHR', 'S_ISDIR', 'S_ISDOOR', 'S_ISFIFO', 'S_ISGID', 'S_ISLNK', 'S_ISPORT', 'S_ISREG', 'S_ISSOCK', 'S_ISUID', 'S_ISVTX', 'S_ISWHT', 'S_IWGRP', 'S_IWOTH', 'S_IWRITE', 'S_IWUSR', 'S_IXGRP', 'S_IXOTH', 'S_IXUSR', 'UF_APPEND', 'UF_COMPRESSED', 'UF_HIDDEN', 'UF_IMMUTABLE', 'UF_NODUMP', 'UF_NOUNLINK', 'UF_OPAQUE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'filemode']

S_IFMT_: file type bits
S_IFDIR: directory
S_IFCHR: character device
S_IFBLK: block device
S_IFREG: regular file
S_IFIFO: fifo (named pipe)
S_IFLNK: symbolic link
S_IFSOCK: socket file
S_IFDOOR: door
S_IFPORT: event port
S_IFWHT: whiteout

S_ISUID: set UID bit
S_ISGID: set GID bit
S_ENFMT: file locking enforcement
S_ISVTX: sticky bit
S_IREAD: Unix V7 synonym for S_IRUSR
S_IWRITE: Unix V7 synonym for S_IWUSR
S_IEXEC: Unix V7 synonym for S_IXUSR
S_IRWXU: mask for owner permissions
S_IRUSR: read by owner
S_IWUSR: write by owner
S_IXUSR: execute by owner
S_IRWXG: mask for group permissions
S_IRGRP: read by group
S_IWGRP: write by group
S_IXGRP: execute by group
S_IRWXO: mask for others (not in group) permissions
S_IROTH: read by others
S_IWOTH: write by others
S_IXOTH: execute by others

UF_NODUMP: do not dump file
UF_IMMUTABLE: file may not be changed
UF_APPEND: file may only be appended to
UF_OPAQUE: directory is opaque when viewed through a union stack
UF_NOUNLINK: file may not be renamed or deleted
UF_COMPRESSED: OS X: file is hfs-compressed
UF_HIDDEN: OS X: file should not be displayed
SF_ARCHIVED: file may be archived
SF_IMMUTABLE: file may not be changed
SF_APPEND: file may only be appended to
SF_NOUNLINK: file may not be renamed or deleted
SF_SNAPSHOT: file is a snapshot file

ST_MODE
ST_INO
ST_DEV
ST_NLINK
ST_UID
ST_GID
ST_SIZE
ST_ATIME
ST_MTIME
ST_CTIME

FILE_ATTRIBUTE_*: Windows file attribute constants
                   (only present on Windows)


[posixpath]
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_get_sep', '_joinrealpath', '_varprog', '_varprogb', 'abspath', 'altsep', 'basename', 'commonpath', 'commonprefix', 'curdir', 'defpath', 'devnull', 'dirname', 'exists', 'expanduser', 'expandvars', 'extsep', 'genericpath', 'getatime', 'getctime', 'getmtime', 'getsize', 'isabs', 'isdir', 'isfile', 'islink', 'ismount', 'join', 'lexists', 'normcase', 'normpath', 'os', 'pardir', 'pathsep', 'realpath', 'relpath', 'samefile', 'sameopenfile', 'samestat', 'sep', 'split', 'splitdrive', 'splitext', 'stat', 'supports_unicode_filenames', 'sys']

Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The "os.path" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.


[genericpath]
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_arg_types', '_splitext', 'commonprefix', 'exists', 'getatime', 'getctime', 'getmtime', 'getsize', 'isdir', 'isfile', 'os', 'samefile', 'sameopenfile', 'samestat', 'stat']


Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.


[os.path]
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_get_sep', '_joinrealpath', '_varprog', '_varprogb', 'abspath', 'altsep', 'basename', 'commonpath', 'commonprefix', 'curdir', 'defpath', 'devnull', 'dirname', 'exists', 'expanduser', 'expandvars', 'extsep', 'genericpath', 'getatime', 'getctime', 'getmtime', 'getsize', 'isabs', 'isdir', 'isfile', 'islink', 'ismount', 'join', 'lexists', 'normcase', 'normpath', 'os', 'pardir', 'pathsep', 'realpath', 'relpath', 'samefile', 'sameopenfile', 'samestat', 'sep', 'split', 'splitdrive', 'splitext', 'stat', 'supports_unicode_filenames', 'sys']

Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The "os.path" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.


[_collections_abc]
['ABCMeta', 'AsyncGenerator', 'AsyncIterable', 'AsyncIterator', 'Awaitable', 'ByteString', 'Callable', 'Collection', 'Container', 'Coroutine', 'Generator', 'Hashable', 'ItemsView', 'Iterable', 'Iterator', 'KeysView', 'Mapping', 'MappingView', 'MutableMapping', 'MutableSequence', 'MutableSet', 'Reversible', 'Sequence', 'Set', 'Sized', 'ValuesView', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_methods', 'abstractmethod', 'async_generator', 'bytearray_iterator', 'bytes_iterator', 'coroutine', 'dict_itemiterator', 'dict_items', 'dict_keyiterator', 'dict_keys', 'dict_valueiterator', 'dict_values', 'generator', 'list_iterator', 'list_reverseiterator', 'longrange_iterator', 'mappingproxy', 'range_iterator', 'set_iterator', 'str_iterator', 'sys', 'tuple_iterator', 'zip_iterator']

Abstract Base Classes (ABCs) for collections, according to PEP 3119.

Unit tests are in test_collections.


[_sitebuiltins]
['Quitter', '_Helper', '_Printer', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'sys']


The objects used by the site module to add custom builtins.


[_bootlocale]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_locale', 'getpreferredencoding', 'sys']

A minimal subset of the locale module used at interpreter startup
(imported by the _io module), in order to reduce startup time.

Don't import directly from third-party code; use the `locale` module instead!


[_locale]
['ABDAY_1', 'ABDAY_2', 'ABDAY_3', 'ABDAY_4', 'ABDAY_5', 'ABDAY_6', 'ABDAY_7', 'ABMON_1', 'ABMON_10', 'ABMON_11', 'ABMON_12', 'ABMON_2', 'ABMON_3', 'ABMON_4', 'ABMON_5', 'ABMON_6', 'ABMON_7', 'ABMON_8', 'ABMON_9', 'ALT_DIGITS', 'AM_STR', 'CHAR_MAX', 'CODESET', 'CRNCYSTR', 'DAY_1', 'DAY_2', 'DAY_3', 'DAY_4', 'DAY_5', 'DAY_6', 'DAY_7', 'D_FMT', 'D_T_FMT', 'ERA', 'ERA_D_FMT', 'ERA_D_T_FMT', 'ERA_T_FMT', 'Error', 'LC_ALL', 'LC_COLLATE', 'LC_CTYPE', 'LC_MESSAGES', 'LC_MONETARY', 'LC_NUMERIC', 'LC_TIME', 'MON_1', 'MON_10', 'MON_11', 'MON_12', 'MON_2', 'MON_3', 'MON_4', 'MON_5', 'MON_6', 'MON_7', 'MON_8', 'MON_9', 'NOEXPR', 'PM_STR', 'RADIXCHAR', 'THOUSEP', 'T_FMT', 'T_FMT_AMPM', 'YESEXPR', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'localeconv', 'nl_langinfo', 'setlocale', 'strcoll', 'strxfrm']

Support for POSIX locales.

[__ios_io]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'cachePath', 'docPath', 'ios_errput', 'ios_input', 'ios_output', 'libPath', 'mainPath', 'printImage']

ios input and output

[_ast]
['AST', 'Add', 'And', 'AnnAssign', 'Assert', 'Assign', 'AsyncFor', 'AsyncFunctionDef', 'AsyncWith', 'Attribute', 'AugAssign', 'AugLoad', 'AugStore', 'Await', 'BinOp', 'BitAnd', 'BitOr', 'BitXor', 'BoolOp', 'Break', 'Bytes', 'Call', 'ClassDef', 'Compare', 'Constant', 'Continue', 'Del', 'Delete', 'Dict', 'DictComp', 'Div', 'Ellipsis', 'Eq', 'ExceptHandler', 'Expr', 'Expression', 'ExtSlice', 'FloorDiv', 'For', 'FormattedValue', 'FunctionDef', 'GeneratorExp', 'Global', 'Gt', 'GtE', 'If', 'IfExp', 'Import', 'ImportFrom', 'In', 'Index', 'Interactive', 'Invert', 'Is', 'IsNot', 'JoinedStr', 'LShift', 'Lambda', 'List', 'ListComp', 'Load', 'Lt', 'LtE', 'MatMult', 'Mod', 'Module', 'Mult', 'Name', 'NameConstant', 'Nonlocal', 'Not', 'NotEq', 'NotIn', 'Num', 'Or', 'Param', 'Pass', 'Pow', 'PyCF_ONLY_AST', 'RShift', 'Raise', 'Return', 'Set', 'SetComp', 'Slice', 'Starred', 'Store', 'Str', 'Sub', 'Subscript', 'Suite', 'Try', 'Tuple', 'UAdd', 'USub', 'UnaryOp', 'While', 'With', 'Yield', 'YieldFrom', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'alias', 'arg', 'arguments', 'boolop', 'cmpop', 'comprehension', 'excepthandler', 'expr', 'expr_context', 'keyword', 'mod', 'operator', 'slice', 'stmt', 'unaryop', 'withitem']

None

[_bisect]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'bisect_left', 'bisect_right', 'insort_left', 'insort_right']

Bisection algorithms.

This module provides support for maintaining a list in sorted order without
having to sort the list after each insertion. For long lists of items with
expensive comparison operations, this can be an improvement over the more
common approach.


[_blake2]
['BLAKE2B_MAX_DIGEST_SIZE', 'BLAKE2B_MAX_KEY_SIZE', 'BLAKE2B_PERSON_SIZE', 'BLAKE2B_SALT_SIZE', 'BLAKE2S_MAX_DIGEST_SIZE', 'BLAKE2S_MAX_KEY_SIZE', 'BLAKE2S_PERSON_SIZE', 'BLAKE2S_SALT_SIZE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'blake2b', 'blake2s']

_blake2b provides BLAKE2b for hashlib


[_bz2]
['BZ2Compressor', 'BZ2Decompressor', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

None

[_cffi_backend]
['FFI', 'FFI_CDECL', 'FFI_DEFAULT_ABI', 'Lib', 'RTLD_GLOBAL', 'RTLD_LAZY', 'RTLD_LOCAL', 'RTLD_NODELETE', 'RTLD_NOLOAD', 'RTLD_NOW', '_C_API', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_get_common_types', '_get_types', '_init_cffi_1_0_external_module', '_testbuff', '_testfunc', 'alignof', 'buffer', 'callback', 'cast', 'complete_struct_or_union', 'from_buffer', 'from_handle', 'gcp', 'get_errno', 'getcname', 'load_library', 'memmove', 'new_array_type', 'new_enum_type', 'new_function_type', 'new_pointer_type', 'new_primitive_type', 'new_struct_type', 'new_union_type', 'new_void_type', 'newp', 'newp_handle', 'rawaddressof', 'set_errno', 'sizeof', 'string', 'typeof', 'typeoffsetof', 'unpack']

None

[_cffi_ext]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_cffi_layout__zmq_msg_t', '_cffi_layout__zmq_pollitem_t', '_cffi_setup', 'get_ipc_path_max_len', 'memcpy', 'zmq_bind', 'zmq_close', 'zmq_connect', 'zmq_ctx_destroy', 'zmq_ctx_get', 'zmq_ctx_new', 'zmq_ctx_set', 'zmq_curve_keypair', 'zmq_curve_public', 'zmq_device', 'zmq_disconnect', 'zmq_errno', 'zmq_getsockopt', 'zmq_has', 'zmq_msg_close', 'zmq_msg_data', 'zmq_msg_init', 'zmq_msg_init_data', 'zmq_msg_init_size', 'zmq_msg_recv', 'zmq_msg_send', 'zmq_msg_size', 'zmq_poll', 'zmq_proxy', 'zmq_setsockopt', 'zmq_socket', 'zmq_socket_monitor', 'zmq_strerror', 'zmq_unbind', 'zmq_version']

None

[_codecs_cn]
['__doc__', '__loader__', '__map_gb18030ext', '__map_gb2312', '__map_gbcommon', '__map_gbkext', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_hk]
['__doc__', '__loader__', '__map_big5hkscs', '__map_big5hkscs_bmp', '__map_big5hkscs_nonbmp', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_iso2022]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_jp]
['__doc__', '__loader__', '__map_cp932ext', '__map_jisx0208', '__map_jisx0212', '__map_jisx0213_1_bmp', '__map_jisx0213_1_emp', '__map_jisx0213_2_bmp', '__map_jisx0213_2_emp', '__map_jisx0213_bmp', '__map_jisx0213_emp', '__map_jisx0213_pair', '__map_jisxcommon', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_kr]
['__doc__', '__loader__', '__map_cp949', '__map_cp949ext', '__map_ksx1001', '__name__', '__package__', '__spec__', 'getcodec']

None

[_codecs_tw]
['__doc__', '__loader__', '__map_big5', '__map_cp950ext', '__name__', '__package__', '__spec__', 'getcodec']

None

[_collections]
['OrderedDict', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_count_elements', '_deque_iterator', '_deque_reverse_iterator', 'defaultdict', 'deque']

High performance data structures.
- deque:        ordered collection accessible from endpoints only
- defaultdict:  dict subclass with a default value factory


[_contextvars]
['Context', 'ContextVar', 'Token', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'copy_context']

Context Variables

[_crypt]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'crypt']

None

[_csv]
['Dialect', 'Error', 'QUOTE_ALL', 'QUOTE_MINIMAL', 'QUOTE_NONE', 'QUOTE_NONNUMERIC', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_dialects', 'field_size_limit', 'get_dialect', 'list_dialects', 'reader', 'register_dialect', 'unregister_dialect', 'writer']

CSV parsing and writing.

This module provides classes that assist in the reading and writing
of Comma Separated Value (CSV) files, and implements the interface
described by PEP 305.  Although many CSV files are simple to parse,
the format is not formally defined by a stable specification and
is subtle enough that parsing lines of a CSV file with something
like line.split(",") is bound to fail.  The module supports three
basic APIs: reading, writing, and registration of dialects.


DIALECT REGISTRATION:

Readers and writers support a dialect argument, which is a convenient
handle on a group of settings.  When the dialect argument is a string,
it identifies one of the dialects previously registered with the module.
If it is a class or instance, the attributes of the argument are used as
the settings for the reader or writer:

    class excel:
        delimiter = ','
        quotechar = '"'
        escapechar = None
        doublequote = True
        skipinitialspace = False
        lineterminator = '\r\n'
        quoting = QUOTE_MINIMAL

SETTINGS:

    * quotechar - specifies a one-character string to use as the 
        quoting character.  It defaults to '"'.
    * delimiter - specifies a one-character string to use as the 
        field separator.  It defaults to ','.
    * skipinitialspace - specifies how to interpret whitespace which
        immediately follows a delimiter.  It defaults to False, which
        means that whitespace immediately following a delimiter is part
        of the following field.
    * lineterminator -  specifies the character sequence which should 
        terminate rows.
    * quoting - controls when quotes should be generated by the writer.
        It can take on any of the following module constants:

        csv.QUOTE_MINIMAL means only when required, for example, when a
            field contains either the quotechar or the delimiter
        csv.QUOTE_ALL means that quotes are always placed around fields.
        csv.QUOTE_NONNUMERIC means that quotes are always placed around
            fields which do not parse as integers or floating point
            numbers.
        csv.QUOTE_NONE means that quotes are never placed around fields.
    * escapechar - specifies a one-character string used to escape 
        the delimiter when quoting is set to QUOTE_NONE.
    * doublequote - controls the handling of quotes inside fields.  When
        True, two consecutive quotes are interpreted as one during read,
        and when writing, each quote character embedded in the data is
        written as two quotes


[_ctypes]
['ArgumentError', 'Array', 'CFuncPtr', 'FUNCFLAG_CDECL', 'FUNCFLAG_PYTHONAPI', 'FUNCFLAG_USE_ERRNO', 'FUNCFLAG_USE_LASTERROR', 'POINTER', 'PyObj_FromPtr', 'Py_DECREF', 'Py_INCREF', 'RTLD_GLOBAL', 'RTLD_LOCAL', 'Structure', 'Union', '_Pointer', '_SimpleCData', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_cast_addr', '_memmove_addr', '_memset_addr', '_pointer_type_cache', '_string_at_addr', '_unpickle', '_wstring_at_addr', 'addressof', 'alignment', 'buffer_info', 'byref', 'call_cdeclfunction', 'call_function', 'dlclose', 'dlopen', 'dlsym', 'get_errno', 'pointer', 'resize', 'set_errno', 'sizeof']

Create and manipulate C compatible data types in Python.

[_ctypes_test]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'func', 'func_si']

None

[_datetime]
['MAXYEAR', 'MINYEAR', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'date', 'datetime', 'datetime_CAPI', 'time', 'timedelta', 'timezone', 'tzinfo']

Fast implementation of the datetime type.

[_dbm]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'library', 'open']

None

[numbers]
['ABCMeta', 'Complex', 'Integral', 'Number', 'Rational', 'Real', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'abstractmethod']

Abstract Base Classes (ABCs) for numbers, according to PEP 3141.

TODO: Fill out more detailed documentation on the operators.

[collections]
['ChainMap', 'Counter', 'OrderedDict', 'UserDict', 'UserList', 'UserString', '_Link', '_OrderedDictItemsView', '_OrderedDictKeysView', '_OrderedDictValuesView', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__getattr__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '_chain', '_collections_abc', '_count_elements', '_eq', '_heapq', '_iskeyword', '_itemgetter', '_nt_itemgetters', '_proxy', '_recursive_repr', '_repeat', '_starmap', '_sys', 'abc', 'defaultdict', 'deque', 'namedtuple']

This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* ChainMap     dict-like class for creating a single view of multiple mappings
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values
* UserDict     wrapper around dictionary objects for easier dict subclassing
* UserList     wrapper around list objects for easier list subclassing
* UserString   wrapper around string objects for easier string subclassing



[operator]
['__abs__', '__add__', '__all__', '__and__', '__builtins__', '__cached__', '__concat__', '__contains__', '__delitem__', '__doc__', '__eq__', '__file__', '__floordiv__', '__ge__', '__getitem__', '__gt__', '__iadd__', '__iand__', '__iconcat__', '__ifloordiv__', '__ilshift__', '__imatmul__', '__imod__', '__imul__', '__index__', '__inv__', '__invert__', '__ior__', '__ipow__', '__irshift__', '__isub__', '__itruediv__', '__ixor__', '__le__', '__loader__', '__lshift__', '__lt__', '__matmul__', '__mod__', '__mul__', '__name__', '__ne__', '__neg__', '__not__', '__or__', '__package__', '__pos__', '__pow__', '__rshift__', '__setitem__', '__spec__', '__sub__', '__truediv__', '__xor__', '_abs', 'abs', 'add', 'and_', 'attrgetter', 'concat', 'contains', 'countOf', 'delitem', 'eq', 'floordiv', 'ge', 'getitem', 'gt', 'iadd', 'iand', 'iconcat', 'ifloordiv', 'ilshift', 'imatmul', 'imod', 'imul', 'index', 'indexOf', 'inv', 'invert', 'ior', 'ipow', 'irshift', 'is_', 'is_not', 'isub', 'itemgetter', 'itruediv', 'ixor', 'le', 'length_hint', 'lshift', 'lt', 'matmul', 'methodcaller', 'mod', 'mul', 'ne', 'neg', 'not_', 'or_', 'pos', 'pow', 'rshift', 'setitem', 'sub', 'truediv', 'truth', 'xor']

Operator interface.

This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience.

[_operator]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_compare_digest', 'abs', 'add', 'and_', 'attrgetter', 'concat', 'contains', 'countOf', 'delitem', 'eq', 'floordiv', 'ge', 'getitem', 'gt', 'iadd', 'iand', 'iconcat', 'ifloordiv', 'ilshift', 'imatmul', 'imod', 'imul', 'index', 'indexOf', 'inv', 'invert', 'ior', 'ipow', 'irshift', 'is_', 'is_not', 'isub', 'itemgetter', 'itruediv', 'ixor', 'le', 'length_hint', 'lshift', 'lt', 'matmul', 'methodcaller', 'mod', 'mul', 'ne', 'neg', 'not_', 'or_', 'pos', 'pow', 'rshift', 'setitem', 'sub', 'truediv', 'truth', 'xor']

Operator interface.

This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience.

[keyword]
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'iskeyword', 'kwlist', 'main']

Keywords (from "graminit.c")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    ./python Lib/keyword.py


[heapq]
['__about__', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_heapify_max', '_heappop_max', '_heapreplace_max', '_siftdown', '_siftdown_max', '_siftup', '_siftup_max', 'heapify', 'heappop', 'heappush', 'heappushpop', 'heapreplace', 'merge', 'nlargest', 'nsmallest']

Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!


[_heapq]
['__about__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_heapify_max', '_heappop_max', '_heapreplace_max', 'heapify', 'heappop', 'heappush', 'heappushpop', 'heapreplace']

Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!


[itertools]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_grouper', '_tee', '_tee_dataobject', 'accumulate', 'chain', 'combinations', 'combinations_with_replacement', 'compress', 'count', 'cycle', 'dropwhile', 'filterfalse', 'groupby', 'islice', 'permutations', 'product', 'repeat', 'starmap', 'takewhile', 'tee', 'zip_longest']

Functional tools for creating and using iterators.

Infinite iterators:
count(start=0, step=1) --> start, start+step, start+2*step, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times

Iterators terminating on the shortest input sequence:
accumulate(p[, func]) --> p0, p0+p1, p0+p1+p2
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
chain.from_iterable([p, q, ...]) --> p0, p1, ... plast, q0, q1, ... 
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
filterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
zip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 

Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)


[reprlib]
['Repr', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_possibly_sorted', 'aRepr', 'builtins', 'get_ident', 'islice', 'recursive_repr', 'repr']

Redo the builtin repr() (representation) but with limits on most sizes.

[collections.abc]
['AsyncGenerator', 'AsyncIterable', 'AsyncIterator', 'Awaitable', 'ByteString', 'Callable', 'Collection', 'Container', 'Coroutine', 'Generator', 'Hashable', 'ItemsView', 'Iterable', 'Iterator', 'KeysView', 'Mapping', 'MappingView', 'MutableMapping', 'MutableSequence', 'MutableSet', 'Reversible', 'Sequence', 'Set', 'Sized', 'ValuesView', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']

None

[_decimal]
['BasicContext', 'Clamped', 'Context', 'ConversionSyntax', 'Decimal', 'DecimalException', 'DecimalTuple', 'DefaultContext', 'DivisionByZero', 'DivisionImpossible', 'DivisionUndefined', 'ExtendedContext', 'FloatOperation', 'HAVE_THREADS', 'Inexact', 'InvalidContext', 'InvalidOperation', 'MAX_EMAX', 'MAX_PREC', 'MIN_EMIN', 'MIN_ETINY', 'Overflow', 'ROUND_05UP', 'ROUND_CEILING', 'ROUND_DOWN', 'ROUND_FLOOR', 'ROUND_HALF_DOWN', 'ROUND_HALF_EVEN', 'ROUND_HALF_UP', 'ROUND_UP', 'Rounded', 'Subnormal', 'Underflow', '__doc__', '__libmpdec_version__', '__loader__', '__name__', '__package__', '__spec__', '__version__', 'getcontext', 'localcontext', 'setcontext']

C decimal arithmetic module

[copy]
['Error', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_copy_dispatch', '_copy_immutable', '_deepcopy_atomic', '_deepcopy_dict', '_deepcopy_dispatch', '_deepcopy_list', '_deepcopy_method', '_deepcopy_tuple', '_keep_alive', '_reconstruct', 'copy', 'deepcopy', 'dispatch_table', 'error']

Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
"pickle" for information on these methods.


[types]
['AsyncGeneratorType', 'BuiltinFunctionType', 'BuiltinMethodType', 'ClassMethodDescriptorType', 'CodeType', 'CoroutineType', 'DynamicClassAttribute', 'FrameType', 'FunctionType', 'GeneratorType', 'GetSetDescriptorType', 'LambdaType', 'MappingProxyType', 'MemberDescriptorType', 'MethodDescriptorType', 'MethodType', 'MethodWrapperType', 'ModuleType', 'SimpleNamespace', 'TracebackType', 'WrapperDescriptorType', '_GeneratorWrapper', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_ag', '_calculate_meta', 'coroutine', 'new_class', 'prepare_class', 'resolve_bases']


Define names for built-in types that aren't directly accessible as a builtin.


[weakref]
['CallableProxyType', 'KeyedRef', 'ProxyType', 'ProxyTypes', 'ReferenceType', 'WeakKeyDictionary', 'WeakMethod', 'WeakSet', 'WeakValueDictionary', '_IterationGuard', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_collections_abc', '_remove_dead_weakref', 'finalize', 'getweakrefcount', 'getweakrefs', 'itertools', 'proxy', 'ref', 'sys']

Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/


[_weakrefset]
['WeakSet', '_IterationGuard', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'ref']

None

[copyreg]
['_HEAPTYPE', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__newobj__', '__newobj_ex__', '__package__', '__spec__', '_extension_cache', '_extension_registry', '_inverted_registry', '_reconstructor', '_reduce_ex', '_slotnames', 'add_extension', 'clear_extension_cache', 'constructor', 'dispatch_table', 'pickle', 'pickle_complex', 'remove_extension']

Helper to provide extensibility for pickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.


[xml]
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'etree']

Core XML support for Python.

This package contains four sub-packages:

dom -- The W3C Document Object Model.  This supports DOM Level 1 +
       Namespaces.

parsers -- Python wrappers for XML parsers (currently only supports Expat).

sax -- The Simple API for XML, developed by XML-Dev, led by David
       Megginson and ported to Python by Lars Marius Garshol.  This
       supports the SAX 2 API.

etree -- The ElementTree XML library.  This is a subset of the full
       ElementTree XML release.



[xml.etree]
['ElementPath', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__']

None

[xml.etree.ElementPath]
['_SelectorContext', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_cache', 'find', 'findall', 'findtext', 'get_parent_map', 'iterfind', 'ops', 'prepare_child', 'prepare_descendant', 'prepare_parent', 'prepare_predicate', 'prepare_self', 'prepare_star', 're', 'xpath_tokenizer', 'xpath_tokenizer_re']

None

[re]
['A', 'ASCII', 'DEBUG', 'DOTALL', 'I', 'IGNORECASE', 'L', 'LOCALE', 'M', 'MULTILINE', 'Match', 'Pattern', 'RegexFlag', 'S', 'Scanner', 'T', 'TEMPLATE', 'U', 'UNICODE', 'VERBOSE', 'X', '_MAXCACHE', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_cache', '_compile', '_compile_repl', '_expand', '_locale', '_pickle', '_special_chars_map', '_subx', 'compile', 'copyreg', 'enum', 'error', 'escape', 'findall', 'finditer', 'fullmatch', 'functools', 'match', 'purge', 'search', 'split', 'sre_compile', 'sre_parse', 'sub', 'subn', 'template']

Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like "A", "a", or "0", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    "."      Matches any character except a newline.
    "^"      Matches the start of the string.
    "$"      Matches the end of the string or just before the newline at
             the end of the string.
    "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
    "?"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    "\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A "^" as the first character indicates a complementing set.
    "|"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of "\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \number  Matches the contents of the group of the same number.
    \A       Matches only at the start of the string.
    \Z       Matches only at the end of the string.
    \b       Matches the empty string, but only at the start or end of a word.
    \B       Matches the empty string, but not at the start or end of a word.
    \d       Matches any decimal digit; equivalent to the set [0-9] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode digits.
    \D       Matches any non-digit character; equivalent to [^\d].
    \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode whitespace characters.
    \S       Matches any non-whitespace character; equivalent to [^\s].
    \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
             in bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the
             range of Unicode alphanumeric characters (letters plus digits
             plus underscore).
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \W       Matches the complement of \w.
    \\       Matches a literal backslash.

This module exports the following functions:
    match     Match a regular expression pattern to the beginning of a string.
    fullmatch Match a regular expression pattern to all of a string.
    search    Search a string for the presence of a pattern.
    sub       Substitute occurrences of a pattern found in a string.
    subn      Same as sub, but also return the number of substitutions made.
    split     Split a string by the occurrences of a pattern.
    findall   Find all occurrences of a pattern in a string.
    finditer  Return an iterator yielding a Match object for each match.
    compile   Compile a pattern into a Pattern object.
    purge     Clear the regular expression cache.
    escape    Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    A  ASCII       For string patterns, make \w, \W, \b, \B, \d, \D
                   match the corresponding ASCII character categories
                   (rather than the whole Unicode categories, which is the
                   default).
                   For bytes patterns, this flag is the only available
                   behaviour and needn't be specified.
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.
    M  MULTILINE   "^" matches the beginning of lines (after a newline)
                   as well as the string.
                   "$" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      "." matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     For compatibility only. Ignored for string patterns (it
                   is the default), and forbidden for bytes patterns.

This module also defines an exception 'error'.



[enum]
['DynamicClassAttribute', 'Enum', 'EnumMeta', 'Flag', 'IntEnum', 'IntFlag', 'MappingProxyType', 'OrderedDict', '_EnumDict', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_auto_null', '_decompose', '_high_bit', '_is_descriptor', '_is_dunder', '_is_sunder', '_make_class_unpicklable', '_power_of_two', '_reduce_ex_by_name', 'auto', 'sys', 'unique']

None

[sre_compile]
['ANY', 'ANY_ALL', 'ASSERT', 'ASSERT_NOT', 'AT', 'ATCODES', 'AT_BEGINNING', 'AT_BEGINNING_LINE', 'AT_BEGINNING_STRING', 'AT_BOUNDARY', 'AT_END', 'AT_END_LINE', 'AT_END_STRING', 'AT_LOCALE', 'AT_LOC_BOUNDARY', 'AT_LOC_NON_BOUNDARY', 'AT_MULTILINE', 'AT_NON_BOUNDARY', 'AT_UNICODE', 'AT_UNI_BOUNDARY', 'AT_UNI_NON_BOUNDARY', 'BIGCHARSET', 'BRANCH', 'CALL', 'CATEGORY', 'CATEGORY_DIGIT', 'CATEGORY_LINEBREAK', 'CATEGORY_LOC_NOT_WORD', 'CATEGORY_LOC_WORD', 'CATEGORY_NOT_DIGIT', 'CATEGORY_NOT_LINEBREAK', 'CATEGORY_NOT_SPACE', 'CATEGORY_NOT_WORD', 'CATEGORY_SPACE', 'CATEGORY_UNI_DIGIT', 'CATEGORY_UNI_LINEBREAK', 'CATEGORY_UNI_NOT_DIGIT', 'CATEGORY_UNI_NOT_LINEBREAK', 'CATEGORY_UNI_NOT_SPACE', 'CATEGORY_UNI_NOT_WORD', 'CATEGORY_UNI_SPACE', 'CATEGORY_UNI_WORD', 'CATEGORY_WORD', 'CHARSET', 'CHCODES', 'CH_LOCALE', 'CH_UNICODE', 'FAILURE', 'GROUPREF', 'GROUPREF_EXISTS', 'GROUPREF_IGNORE', 'GROUPREF_LOC_IGNORE', 'GROUPREF_UNI_IGNORE', 'IN', 'INFO', 'IN_IGNORE', 'IN_LOC_IGNORE', 'IN_UNI_IGNORE', 'JUMP', 'LITERAL', 'LITERAL_IGNORE', 'LITERAL_LOC_IGNORE', 'LITERAL_UNI_IGNORE', 'MAGIC', 'MARK', 'MAXCODE', 'MAXGROUPS', 'MAXREPEAT', 'MAX_REPEAT', 'MAX_UNTIL', 'MIN_REPEAT', 'MIN_REPEAT_ONE', 'MIN_UNTIL', 'NEGATE', 'NOT_LITERAL', 'NOT_LITERAL_IGNORE', 'NOT_LITERAL_LOC_IGNORE', 'NOT_LITERAL_UNI_IGNORE', 'OPCODES', 'OP_IGNORE', 'OP_LOCALE_IGNORE', 'OP_UNICODE_IGNORE', 'RANGE', 'RANGE_UNI_IGNORE', 'REPEAT', 'REPEAT_ONE', 'SRE_FLAG_ASCII', 'SRE_FLAG_DEBUG', 'SRE_FLAG_DOTALL', 'SRE_FLAG_IGNORECASE', 'SRE_FLAG_LOCALE', 'SRE_FLAG_MULTILINE', 'SRE_FLAG_TEMPLATE', 'SRE_FLAG_UNICODE', 'SRE_FLAG_VERBOSE', 'SRE_INFO_CHARSET', 'SRE_INFO_LITERAL', 'SRE_INFO_PREFIX', 'SUBPATTERN', 'SUCCESS', '_ASSERT_CODES', '_BITS_TRANS', '_CODEBITS', '_LITERAL_CODES', '_REPEATING_CODES', '_SUCCESS_CODES', '_UNIT_CODES', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_bytes_to_codes', '_code', '_combine_flags', '_compile', '_compile_charset', '_compile_info', '_equivalences', '_generate_overlap_table', '_get_charset_prefix', '_get_iscased', '_get_literal_prefix', '_hex_code', '_ignorecase_fixes', '_mk_bitmap', '_optimize_charset', '_simple', '_sre', 'compile', 'dis', 'error', 'isstring', 'sre_parse']

Internal support module for sre

[_sre]
['CODESIZE', 'MAGIC', 'MAXGROUPS', 'MAXREPEAT', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'ascii_iscased', 'ascii_tolower', 'compile', 'copyright', 'getcodesize', 'unicode_iscased', 'unicode_tolower']

None

[sre_parse]
['ANY', 'ANY_ALL', 'ASCIILETTERS', 'ASSERT', 'ASSERT_NOT', 'AT', 'ATCODES', 'AT_BEGINNING', 'AT_BEGINNING_LINE', 'AT_BEGINNING_STRING', 'AT_BOUNDARY', 'AT_END', 'AT_END_LINE', 'AT_END_STRING', 'AT_LOCALE', 'AT_LOC_BOUNDARY', 'AT_LOC_NON_BOUNDARY', 'AT_MULTILINE', 'AT_NON_BOUNDARY', 'AT_UNICODE', 'AT_UNI_BOUNDARY', 'AT_UNI_NON_BOUNDARY', 'BIGCHARSET', 'BRANCH', 'CALL', 'CATEGORIES', 'CATEGORY', 'CATEGORY_DIGIT', 'CATEGORY_LINEBREAK', 'CATEGORY_LOC_NOT_WORD', 'CATEGORY_LOC_WORD', 'CATEGORY_NOT_DIGIT', 'CATEGORY_NOT_LINEBREAK', 'CATEGORY_NOT_SPACE', 'CATEGORY_NOT_WORD', 'CATEGORY_SPACE', 'CATEGORY_UNI_DIGIT', 'CATEGORY_UNI_LINEBREAK', 'CATEGORY_UNI_NOT_DIGIT', 'CATEGORY_UNI_NOT_LINEBREAK', 'CATEGORY_UNI_NOT_SPACE', 'CATEGORY_UNI_NOT_WORD', 'CATEGORY_UNI_SPACE', 'CATEGORY_UNI_WORD', 'CATEGORY_WORD', 'CHARSET', 'CHCODES', 'CH_LOCALE', 'CH_UNICODE', 'DIGITS', 'ESCAPES', 'FAILURE', 'FLAGS', 'GLOBAL_FLAGS', 'GROUPREF', 'GROUPREF_EXISTS', 'GROUPREF_IGNORE', 'GROUPREF_LOC_IGNORE', 'GROUPREF_UNI_IGNORE', 'HEXDIGITS', 'IN', 'INFO', 'IN_IGNORE', 'IN_LOC_IGNORE', 'IN_UNI_IGNORE', 'JUMP', 'LITERAL', 'LITERAL_IGNORE', 'LITERAL_LOC_IGNORE', 'LITERAL_UNI_IGNORE', 'MAGIC', 'MARK', 'MAXGROUPS', 'MAXREPEAT', 'MAX_REPEAT', 'MAX_UNTIL', 'MIN_REPEAT', 'MIN_REPEAT_ONE', 'MIN_UNTIL', 'NEGATE', 'NOT_LITERAL', 'NOT_LITERAL_IGNORE', 'NOT_LITERAL_LOC_IGNORE', 'NOT_LITERAL_UNI_IGNORE', 'OCTDIGITS', 'OPCODES', 'OP_IGNORE', 'OP_LOCALE_IGNORE', 'OP_UNICODE_IGNORE', 'Pattern', 'RANGE', 'RANGE_UNI_IGNORE', 'REPEAT', 'REPEAT_CHARS', 'REPEAT_ONE', 'SPECIAL_CHARS', 'SRE_FLAG_ASCII', 'SRE_FLAG_DEBUG', 'SRE_FLAG_DOTALL', 'SRE_FLAG_IGNORECASE', 'SRE_FLAG_LOCALE', 'SRE_FLAG_MULTILINE', 'SRE_FLAG_TEMPLATE', 'SRE_FLAG_UNICODE', 'SRE_FLAG_VERBOSE', 'SRE_INFO_CHARSET', 'SRE_INFO_LITERAL', 'SRE_INFO_PREFIX', 'SUBPATTERN', 'SUCCESS', 'SubPattern', 'TYPE_FLAGS', 'Tokenizer', 'Verbose', 'WHITESPACE', '_REPEATCODES', '_UNITCODES', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_class_escape', '_escape', '_parse', '_parse_flags', '_parse_sub', '_uniq', 'error', 'expand_template', 'fix_flags', 'parse', 'parse_template']

Internal support module for sre

[sre_constants]
['ANY', 'ANY_ALL', 'ASSERT', 'ASSERT_NOT', 'AT', 'ATCODES', 'AT_BEGINNING', 'AT_BEGINNING_LINE', 'AT_BEGINNING_STRING', 'AT_BOUNDARY', 'AT_END', 'AT_END_LINE', 'AT_END_STRING', 'AT_LOCALE', 'AT_LOC_BOUNDARY', 'AT_LOC_NON_BOUNDARY', 'AT_MULTILINE', 'AT_NON_BOUNDARY', 'AT_UNICODE', 'AT_UNI_BOUNDARY', 'AT_UNI_NON_BOUNDARY', 'BIGCHARSET', 'BRANCH', 'CALL', 'CATEGORY', 'CATEGORY_DIGIT', 'CATEGORY_LINEBREAK', 'CATEGORY_LOC_NOT_WORD', 'CATEGORY_LOC_WORD', 'CATEGORY_NOT_DIGIT', 'CATEGORY_NOT_LINEBREAK', 'CATEGORY_NOT_SPACE', 'CATEGORY_NOT_WORD', 'CATEGORY_SPACE', 'CATEGORY_UNI_DIGIT', 'CATEGORY_UNI_LINEBREAK', 'CATEGORY_UNI_NOT_DIGIT', 'CATEGORY_UNI_NOT_LINEBREAK', 'CATEGORY_UNI_NOT_SPACE', 'CATEGORY_UNI_NOT_WORD', 'CATEGORY_UNI_SPACE', 'CATEGORY_UNI_WORD', 'CATEGORY_WORD', 'CHARSET', 'CHCODES', 'CH_LOCALE', 'CH_UNICODE', 'FAILURE', 'GROUPREF', 'GROUPREF_EXISTS', 'GROUPREF_IGNORE', 'GROUPREF_LOC_IGNORE', 'GROUPREF_UNI_IGNORE', 'IN', 'INFO', 'IN_IGNORE', 'IN_LOC_IGNORE', 'IN_UNI_IGNORE', 'JUMP', 'LITERAL', 'LITERAL_IGNORE', 'LITERAL_LOC_IGNORE', 'LITERAL_UNI_IGNORE', 'MAGIC', 'MARK', 'MAXGROUPS', 'MAXREPEAT', 'MAX_REPEAT', 'MAX_UNTIL', 'MIN_REPEAT', 'MIN_REPEAT_ONE', 'MIN_UNTIL', 'NEGATE', 'NOT_LITERAL', 'NOT_LITERAL_IGNORE', 'NOT_LITERAL_LOC_IGNORE', 'NOT_LITERAL_UNI_IGNORE', 'OPCODES', 'OP_IGNORE', 'OP_LOCALE_IGNORE', 'OP_UNICODE_IGNORE', 'RANGE', 'RANGE_UNI_IGNORE', 'REPEAT', 'REPEAT_ONE', 'SRE_FLAG_ASCII', 'SRE_FLAG_DEBUG', 'SRE_FLAG_DOTALL', 'SRE_FLAG_IGNORECASE', 'SRE_FLAG_LOCALE', 'SRE_FLAG_MULTILINE', 'SRE_FLAG_TEMPLATE', 'SRE_FLAG_UNICODE', 'SRE_FLAG_VERBOSE', 'SRE_INFO_CHARSET', 'SRE_INFO_LITERAL', 'SRE_INFO_PREFIX', 'SUBPATTERN', 'SUCCESS', '_NamedIntConstant', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_makecodes', 'error']

Internal support module for sre

[functools]
['RLock', 'WRAPPER_ASSIGNMENTS', 'WRAPPER_UPDATES', '_CacheInfo', '_HashedSeq', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_c3_merge', '_c3_mro', '_compose_mro', '_convert', '_find_impl', '_ge_from_gt', '_ge_from_le', '_ge_from_lt', '_gt_from_ge', '_gt_from_le', '_gt_from_lt', '_le_from_ge', '_le_from_gt', '_le_from_lt', '_lru_cache_wrapper', '_lt_from_ge', '_lt_from_gt', '_lt_from_le', '_make_key', 'cmp_to_key', 'get_cache_token', 'lru_cache', 'namedtuple', 'partial', 'partialmethod', 'recursive_repr', 'reduce', 'singledispatch', 'total_ordering', 'update_wrapper', 'wraps']

functools.py - Tools for working with functions and callable objects


[_functools]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_lru_cache_wrapper', 'cmp_to_key', 'partial', 'reduce']

Tools that operate on functions.

[pyexpat.errors]
['XML_ERROR_ABORTED', 'XML_ERROR_ASYNC_ENTITY', 'XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF', 'XML_ERROR_BAD_CHAR_REF', 'XML_ERROR_BINARY_ENTITY_REF', 'XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING', 'XML_ERROR_DUPLICATE_ATTRIBUTE', 'XML_ERROR_ENTITY_DECLARED_IN_PE', 'XML_ERROR_EXTERNAL_ENTITY_HANDLING', 'XML_ERROR_FEATURE_REQUIRES_XML_DTD', 'XML_ERROR_FINISHED', 'XML_ERROR_INCOMPLETE_PE', 'XML_ERROR_INCORRECT_ENCODING', 'XML_ERROR_INVALID_TOKEN', 'XML_ERROR_JUNK_AFTER_DOC_ELEMENT', 'XML_ERROR_MISPLACED_XML_PI', 'XML_ERROR_NOT_STANDALONE', 'XML_ERROR_NOT_SUSPENDED', 'XML_ERROR_NO_ELEMENTS', 'XML_ERROR_NO_MEMORY', 'XML_ERROR_PARAM_ENTITY_REF', 'XML_ERROR_PARTIAL_CHAR', 'XML_ERROR_PUBLICID', 'XML_ERROR_RECURSIVE_ENTITY_REF', 'XML_ERROR_SUSPENDED', 'XML_ERROR_SUSPEND_PE', 'XML_ERROR_SYNTAX', 'XML_ERROR_TAG_MISMATCH', 'XML_ERROR_TEXT_DECL', 'XML_ERROR_UNBOUND_PREFIX', 'XML_ERROR_UNCLOSED_CDATA_SECTION', 'XML_ERROR_UNCLOSED_TOKEN', 'XML_ERROR_UNDECLARING_PREFIX', 'XML_ERROR_UNDEFINED_ENTITY', 'XML_ERROR_UNEXPECTED_STATE', 'XML_ERROR_UNKNOWN_ENCODING', 'XML_ERROR_XML_DECL', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'codes', 'messages']

Constants used to describe error conditions.

[pyexpat.model]
['XML_CQUANT_NONE', 'XML_CQUANT_OPT', 'XML_CQUANT_PLUS', 'XML_CQUANT_REP', 'XML_CTYPE_ANY', 'XML_CTYPE_CHOICE', 'XML_CTYPE_EMPTY', 'XML_CTYPE_MIXED', 'XML_CTYPE_NAME', 'XML_CTYPE_SEQ', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

Constants used to interpret content model information.

[pyexpat]
['EXPAT_VERSION', 'ErrorString', 'ExpatError', 'ParserCreate', 'XMLParserType', 'XML_PARAM_ENTITY_PARSING_ALWAYS', 'XML_PARAM_ENTITY_PARSING_NEVER', 'XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'errors', 'expat_CAPI', 'features', 'model', 'native_encoding', 'version_info']

Python wrapper for Expat parser.

[_elementtree]
['Element', 'ParseError', 'SubElement', 'TreeBuilder', 'XMLParser', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

None

[_fuzz]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'run']

None

[_hashlib]
['HASH', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'hmac_digest', 'new', 'openssl_md5', 'openssl_md_meth_names', 'openssl_sha1', 'openssl_sha224', 'openssl_sha256', 'openssl_sha384', 'openssl_sha512', 'pbkdf2_hmac']

None

[_json]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'encode_basestring', 'encode_basestring_ascii', 'make_encoder', 'make_scanner', 'scanstring']

json speedups


[_lsprof]
['Profiler', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'profiler_entry', 'profiler_subentry']

Fast profiler

[_lzma]
['CHECK_CRC32', 'CHECK_CRC64', 'CHECK_ID_MAX', 'CHECK_NONE', 'CHECK_SHA256', 'CHECK_UNKNOWN', 'FILTER_ARM', 'FILTER_ARMTHUMB', 'FILTER_DELTA', 'FILTER_IA64', 'FILTER_LZMA1', 'FILTER_LZMA2', 'FILTER_POWERPC', 'FILTER_SPARC', 'FILTER_X86', 'FORMAT_ALONE', 'FORMAT_AUTO', 'FORMAT_RAW', 'FORMAT_XZ', 'LZMACompressor', 'LZMADecompressor', 'LZMAError', 'MF_BT2', 'MF_BT3', 'MF_BT4', 'MF_HC3', 'MF_HC4', 'MODE_FAST', 'MODE_NORMAL', 'PRESET_DEFAULT', 'PRESET_EXTREME', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_decode_filter_properties', '_encode_filter_properties', 'is_check_supported']

None

[_md5]
['MD5Type', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'md5']

None

[_cython_0_28_5]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'cython_function_or_method']

None

[cython_runtime]
['__doc__', '__loader__', '__name__', '__package__', '__spec__']

None

[zmq.devices.monitoredqueue]
[]

None

[zmq]
['AFFINITY', 'Again', 'BACKLOG', 'BLOCKY', 'CONFLATE', 'CONNECT_RID', 'CONNECT_TIMEOUT', 'COPY_THRESHOLD', 'CURVE', 'CURVE_PUBLICKEY', 'CURVE_SECRETKEY', 'CURVE_SERVER', 'CURVE_SERVERKEY', 'Context', 'ContextTerminated', 'DEALER', 'DELAY_ATTACH_ON_CONNECT', 'DONTWAIT', 'DRAFT_API', 'EADDRINUSE', 'EADDRNOTAVAIL', 'EAFNOSUPPORT', 'EAGAIN', 'ECONNABORTED', 'ECONNREFUSED', 'ECONNRESET', 'EFAULT', 'EFSM', 'EHOSTUNREACH', 'EINPROGRESS', 'EINVAL', 'EMSGSIZE', 'EMTHREAD', 'ENETDOWN', 'ENETRESET', 'ENETUNREACH', 'ENOBUFS', 'ENOCOMPATPROTO', 'ENODEV', 'ENOMEM', 'ENOTCONN', 'ENOTSOCK', 'ENOTSUP', 'EPROTONOSUPPORT', 'ETERM', 'ETIMEDOUT', 'EVENTS', 'EVENT_ACCEPTED', 'EVENT_ACCEPT_FAILED', 'EVENT_ALL', 'EVENT_BIND_FAILED', 'EVENT_CLOSED', 'EVENT_CLOSE_FAILED', 'EVENT_CONNECTED', 'EVENT_CONNECT_DELAYED', 'EVENT_CONNECT_RETRIED', 'EVENT_DISCONNECTED', 'EVENT_LISTENING', 'EVENT_MONITOR_STOPPED', 'FAIL_UNROUTABLE', 'FD', 'FORWARDER', 'Frame', 'GSSAPI', 'GSSAPI_PLAINTEXT', 'GSSAPI_PRINCIPAL', 'GSSAPI_SERVER', 'GSSAPI_SERVICE_PRINCIPAL', 'HANDSHAKE_IVL', 'HAUSNUMERO', 'HEARTBEAT_IVL', 'HEARTBEAT_TIMEOUT', 'HEARTBEAT_TTL', 'IDENTITY', 'IMMEDIATE', 'INVERT_MATCHING', 'IO_THREADS', 'IO_THREADS_DFLT', 'IPC_FILTER_GID', 'IPC_FILTER_PID', 'IPC_FILTER_UID', 'IPC_PATH_MAX_LEN', 'IPV4ONLY', 'IPV6', 'InterruptedSystemCall', 'LAST_ENDPOINT', 'LINGER', 'MAXMSGSIZE', 'MAX_SOCKETS', 'MAX_SOCKETS_DFLT', 'MECHANISM', 'MORE', 'MULTICAST_HOPS', 'MULTICAST_MAXTPDU', 'Message', 'MessageTracker', 'NOBLOCK', 'NULL', 'NotDone', 'PAIR', 'PLAIN', 'PLAIN_PASSWORD', 'PLAIN_SERVER', 'PLAIN_USERNAME', 'POLLERR', 'POLLIN', 'POLLITEMS_DFLT', 'POLLOUT', 'POLLPRI', 'PROBE_ROUTER', 'PUB', 'PULL', 'PUSH', 'Poller', 'QUEUE', 'RATE', 'RCVBUF', 'RCVHWM', 'RCVMORE', 'RCVTIMEO', 'RECONNECT_IVL', 'RECONNECT_IVL_MAX', 'RECOVERY_IVL', 'REP', 'REQ', 'REQ_CORRELATE', 'REQ_RELAXED', 'ROUTER', 'ROUTER_BEHAVIOR', 'ROUTER_HANDOVER', 'ROUTER_MANDATORY', 'ROUTER_RAW', 'SHARED', 'SNDBUF', 'SNDHWM', 'SNDMORE', 'SNDTIMEO', 'SOCKET_LIMIT', 'SOCKS_PROXY', 'SRCFD', 'STREAM', 'STREAMER', 'STREAM_NOTIFY', 'SUB', 'SUBSCRIBE', 'Socket', 'Stopwatch', 'TCP_ACCEPT_FILTER', 'TCP_KEEPALIVE', 'TCP_KEEPALIVE_CNT', 'TCP_KEEPALIVE_IDLE', 'TCP_KEEPALIVE_INTVL', 'TCP_MAXRT', 'THREAD_PRIORITY', 'THREAD_PRIORITY_DFLT', 'THREAD_SAFE', 'THREAD_SCHED_POLICY', 'THREAD_SCHED_POLICY_DFLT', 'TOS', 'TYPE', 'UNSUBSCRIBE', 'USE_FD', 'VERSION', 'VERSION_MAJOR', 'VERSION_MINOR', 'VERSION_PATCH', 'VMCI_BUFFER_MAX_SIZE', 'VMCI_BUFFER_MIN_SIZE', 'VMCI_BUFFER_SIZE', 'VMCI_CONNECT_TIMEOUT', 'XPUB', 'XPUB_MANUAL', 'XPUB_NODROP', 'XPUB_VERBOSE', 'XPUB_VERBOSER', 'XPUB_WELCOME_MSG', 'XREP', 'XREQ', 'XSUB', 'ZAP_DOMAIN', 'ZMQBaseError', 'ZMQBindError', 'ZMQError', 'ZMQVersionError', '_FINISHED_TRACKER', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__revision__', '__spec__', '__version__', '_load_libzmq', 'backend', 'bytes_sockopts', 'constants', 'ctx_opt_names', 'ctx_opts', 'curve_keypair', 'curve_public', 'device', 'error', 'get_includes', 'get_library_dirs', 'has', 'int64_sockopts', 'int_sockopts', 'proxy', 'pyzmq_version', 'pyzmq_version_info', 'select', 'strerror', 'sugar', 'utils', 'zmq_errno', 'zmq_poll', 'zmq_version', 'zmq_version_info']

Python bindings for 0MQ.

[ctypes]
['ARRAY', 'ArgumentError', 'Array', 'BigEndianStructure', 'CDLL', 'CFUNCTYPE', 'DEFAULT_MODE', 'LibraryLoader', 'LittleEndianStructure', 'POINTER', 'PYFUNCTYPE', 'PyDLL', 'RTLD_GLOBAL', 'RTLD_LOCAL', 'SetPointerType', 'Structure', 'Union', '_CFuncPtr', '_FUNCFLAG_CDECL', '_FUNCFLAG_PYTHONAPI', '_FUNCFLAG_USE_ERRNO', '_FUNCFLAG_USE_LASTERROR', '_Pointer', '_SimpleCData', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_c_functype_cache', '_calcsize', '_cast', '_cast_addr', '_check_size', '_ctypes_version', '_dlopen', '_endian', '_memmove_addr', '_memset_addr', '_os', '_pointer_type_cache', '_reset_cache', '_string_at', '_string_at_addr', '_sys', '_wstring_at', '_wstring_at_addr', 'addressof', 'alignment', 'byref', 'c_bool', 'c_buffer', 'c_byte', 'c_char', 'c_char_p', 'c_double', 'c_float', 'c_int', 'c_int16', 'c_int32', 'c_int64', 'c_int8', 'c_long', 'c_longdouble', 'c_longlong', 'c_short', 'c_size_t', 'c_ssize_t', 'c_ubyte', 'c_uint', 'c_uint16', 'c_uint32', 'c_uint64', 'c_uint8', 'c_ulong', 'c_ulonglong', 'c_ushort', 'c_void_p', 'c_voidp', 'c_wchar', 'c_wchar_p', 'cast', 'cdll', 'create_string_buffer', 'create_unicode_buffer', 'get_errno', 'memmove', 'memset', 'pointer', 'py_object', 'pydll', 'pythonapi', 'resize', 'set_errno', 'sizeof', 'string_at', 'wstring_at']

create and manipulate C data types in Python

[struct]
['Struct', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_clearcache', 'calcsize', 'error', 'iter_unpack', 'pack', 'pack_into', 'unpack', 'unpack_from']

Functions to convert between Python values and C structs.
Python bytes objects are used to hold the data representing the C struct
and also as format strings (explained below) to describe the layout of data
in the C struct.

The optional first format char indicates byte order, size and alignment:
  @: native order, size & alignment (default)
  =: native order, std. size & alignment
  <: little-endian, std. size & alignment
  >: big-endian, std. size & alignment
  !: same as >

The remaining chars indicate types of args and must match exactly;
these can be preceded by a decimal repeat count:
  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
  ?: _Bool (requires C99; if not available, char is used instead)
  h:short; H:unsigned short; i:int; I:unsigned int;
  l:long; L:unsigned long; f:float; d:double; e:half-float.
Special cases (preceding decimal count indicates length):
  s:string (array of char); p: pascal string (with count byte).
Special cases (only available in native format):
  n:ssize_t; N:size_t;
  P:an integer type that is wide enough to hold a pointer.
Special case (not in native mode unless 'long long' in platform C):
  q:long long; Q:unsigned long long
Whitespace between formats is ignored.

The variable struct.error is an exception raised on errors.


[_struct]
['Struct', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_clearcache', 'calcsize', 'error', 'iter_unpack', 'pack', 'pack_into', 'unpack', 'unpack_from']

Functions to convert between Python values and C structs.
Python bytes objects are used to hold the data representing the C struct
and also as format strings (explained below) to describe the layout of data
in the C struct.

The optional first format char indicates byte order, size and alignment:
  @: native order, size & alignment (default)
  =: native order, std. size & alignment
  <: little-endian, std. size & alignment
  >: big-endian, std. size & alignment
  !: same as >

The remaining chars indicate types of args and must match exactly;
these can be preceded by a decimal repeat count:
  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
  ?: _Bool (requires C99; if not available, char is used instead)
  h:short; H:unsigned short; i:int; I:unsigned int;
  l:long; L:unsigned long; f:float; d:double; e:half-float.
Special cases (preceding decimal count indicates length):
  s:string (array of char); p: pascal string (with count byte).
Special cases (only available in native format):
  n:ssize_t; N:size_t;
  P:an integer type that is wide enough to hold a pointer.
Special case (not in native mode unless 'long long' in platform C):
  q:long long; Q:unsigned long long
Whitespace between formats is ignored.

The variable struct.error is an exception raised on errors.


[ctypes._endian]
['ARRAY', 'ArgumentError', 'Array', 'BigEndianStructure', 'CDLL', 'CFUNCTYPE', 'DEFAULT_MODE', 'LibraryLoader', 'LittleEndianStructure', 'POINTER', 'PYFUNCTYPE', 'PyDLL', 'RTLD_GLOBAL', 'RTLD_LOCAL', 'SetPointerType', 'Structure', 'Union', '_OTHER_ENDIAN', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_array_type', '_other_endian', '_swapped_meta', 'addressof', 'alignment', 'byref', 'c_bool', 'c_buffer', 'c_byte', 'c_char', 'c_char_p', 'c_double', 'c_float', 'c_int', 'c_long', 'c_longdouble', 'c_longlong', 'c_short', 'c_size_t', 'c_ssize_t', 'c_ubyte', 'c_uint', 'c_ulong', 'c_ulonglong', 'c_ushort', 'c_void_p', 'c_voidp', 'c_wchar', 'c_wchar_p', 'cast', 'cdll', 'create_string_buffer', 'create_unicode_buffer', 'get_errno', 'memmove', 'memset', 'pointer', 'py_object', 'pydll', 'pythonapi', 'resize', 'set_errno', 'sizeof', 'string_at', 'sys', 'wstring_at']

None

[platform]
['DEV_NULL', '_UNIXCONFDIR', '_WIN32_CLIENT_RELEASES', '_WIN32_SERVER_RELEASES', '__builtins__', '__cached__', '__copyright__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_comparable_version', '_component_re', '_default_architecture', '_dist_try_harder', '_follow_symlinks', '_ironpython26_sys_version_parser', '_ironpython_sys_version_parser', '_java_getprop', '_libc_search', '_linux_distribution', '_lsb_release_version', '_mac_ver_xml', '_node', '_norm_version', '_parse_release_file', '_platform', '_platform_cache', '_pypy_sys_version_parser', '_release_filename', '_release_version', '_supported_dists', '_sys_version', '_sys_version_cache', '_sys_version_parser', '_syscmd_file', '_syscmd_uname', '_syscmd_ver', '_uname_cache', '_ver_output', '_ver_stages', 'architecture', 'collections', 'dist', 'java_ver', 'libc_ver', 'linux_distribution', 'mac_ver', 'machine', 'node', 'os', 'platform', 'popen', 'processor', 'python_branch', 'python_build', 'python_compiler', 'python_implementation', 'python_revision', 'python_version', 'python_version_tuple', 're', 'release', 'subprocess', 'sys', 'system', 'system_alias', 'uname', 'uname_result', 'version', 'warnings', 'win32_ver']

 This module tries to retrieve as much platform-identifying data as
    possible. It makes this information available via function APIs.

    If called from the command line, it prints the platform
    information concatenated as single string to stdout. The output
    format is useable as part of a filename.



[subprocess]
['CalledProcessError', 'CompletedProcess', 'DEVNULL', 'PIPE', 'Popen', 'STDOUT', 'SubprocessError', 'TimeoutExpired', '_PIPE_BUF', '_PopenSelector', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_active', '_args_from_interpreter_flags', '_cleanup', '_mswindows', '_optim_args_from_interpreter_flags', '_posixsubprocess', '_time', 'builtins', 'call', 'check_call', 'check_output', 'errno', 'getoutput', 'getstatusoutput', 'io', 'list2cmdline', 'os', 'run', 'select', 'selectors', 'signal', 'sys', 'threading', 'time', 'warnings']

Subprocesses with accessible I/O streams

This module allows you to spawn processes, connect to their
input/output/error pipes, and obtain their return codes.

For a complete description of this module see the Python documentation.

Main API
========
run(...): Runs a command, waits for it to complete, then returns a
          CompletedProcess instance.
Popen(...): A class for flexibly executing a command in a new process

Constants
---------
DEVNULL: Special value that indicates that os.devnull should be used
PIPE:    Special value that indicates a pipe should be created
STDOUT:  Special value that indicates that stderr should go to stdout


Older API
=========
call(...): Runs a command, waits for it to complete, then returns
    the return code.
check_call(...): Same as call() but raises CalledProcessError()
    if return code is not 0
check_output(...): Same as check_call() but returns the contents of
    stdout instead of a return code
getoutput(...): Runs a command in the shell, waits for it to complete,
    then returns the output
getstatusoutput(...): Runs a command in the shell, waits for it to complete,
    then returns a (exitcode, output) tuple


[time]
['CLOCK_MONOTONIC', 'CLOCK_MONOTONIC_RAW', 'CLOCK_PROCESS_CPUTIME_ID', 'CLOCK_REALTIME', 'CLOCK_THREAD_CPUTIME_ID', '_STRUCT_TM_ITEMS', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'altzone', 'asctime', 'clock', 'clock_getres', 'clock_gettime', 'clock_gettime_ns', 'ctime', 'daylight', 'get_clock_info', 'gmtime', 'localtime', 'mktime', 'monotonic', 'monotonic_ns', 'perf_counter', 'perf_counter_ns', 'process_time', 'process_time_ns', 'sleep', 'strftime', 'strptime', 'struct_time', 'thread_time', 'thread_time_ns', 'time', 'time_ns', 'timezone', 'tzname', 'tzset']

This module provides various functions to manipulate time values.

There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).

The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (including century, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.


[signal]
['Handlers', 'ITIMER_PROF', 'ITIMER_REAL', 'ITIMER_VIRTUAL', 'ItimerError', 'NSIG', 'SIGABRT', 'SIGALRM', 'SIGBUS', 'SIGCHLD', 'SIGCONT', 'SIGEMT', 'SIGFPE', 'SIGHUP', 'SIGILL', 'SIGINFO', 'SIGINT', 'SIGIO', 'SIGIOT', 'SIGKILL', 'SIGPIPE', 'SIGPROF', 'SIGQUIT', 'SIGSEGV', 'SIGSTOP', 'SIGSYS', 'SIGTERM', 'SIGTRAP', 'SIGTSTP', 'SIGTTIN', 'SIGTTOU', 'SIGURG', 'SIGUSR1', 'SIGUSR2', 'SIGVTALRM', 'SIGWINCH', 'SIGXCPU', 'SIGXFSZ', 'SIG_BLOCK', 'SIG_DFL', 'SIG_IGN', 'SIG_SETMASK', 'SIG_UNBLOCK', 'Sigmasks', 'Signals', '_IntEnum', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_enum_to_int', '_int_to_enum', '_signal', 'alarm', 'default_int_handler', 'getitimer', 'getsignal', 'pause', 'pthread_kill', 'pthread_sigmask', 'set_wakeup_fd', 'setitimer', 'siginterrupt', 'signal', 'sigpending', 'sigwait']

None

[_signal]
['ITIMER_PROF', 'ITIMER_REAL', 'ITIMER_VIRTUAL', 'ItimerError', 'NSIG', 'SIGABRT', 'SIGALRM', 'SIGBUS', 'SIGCHLD', 'SIGCONT', 'SIGEMT', 'SIGFPE', 'SIGHUP', 'SIGILL', 'SIGINFO', 'SIGINT', 'SIGIO', 'SIGIOT', 'SIGKILL', 'SIGPIPE', 'SIGPROF', 'SIGQUIT', 'SIGSEGV', 'SIGSTOP', 'SIGSYS', 'SIGTERM', 'SIGTRAP', 'SIGTSTP', 'SIGTTIN', 'SIGTTOU', 'SIGURG', 'SIGUSR1', 'SIGUSR2', 'SIGVTALRM', 'SIGWINCH', 'SIGXCPU', 'SIGXFSZ', 'SIG_BLOCK', 'SIG_DFL', 'SIG_IGN', 'SIG_SETMASK', 'SIG_UNBLOCK', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'alarm', 'default_int_handler', 'getitimer', 'getsignal', 'pause', 'pthread_kill', 'pthread_sigmask', 'set_wakeup_fd', 'setitimer', 'siginterrupt', 'signal', 'sigpending', 'sigwait']

This module provides mechanisms to use signal handlers in Python.

Functions:

alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler

signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers

itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.


*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.

[warnings]
['WarningMessage', '_OptionError', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_add_filter', '_defaultaction', '_filters_mutated', '_formatwarning_orig', '_formatwarnmsg', '_formatwarnmsg_impl', '_getaction', '_getcategory', '_is_internal_frame', '_next_external_frame', '_onceregistry', '_processoptions', '_setoption', '_showwarning_orig', '_showwarnmsg', '_showwarnmsg_impl', '_warn_unawaited_coroutine', 'catch_warnings', 'defaultaction', 'filters', 'filterwarnings', 'formatwarning', 'onceregistry', 'resetwarnings', 'showwarning', 'simplefilter', 'sys', 'warn', 'warn_explicit']

Python part of the warnings subsystem.

[errno]
['E2BIG', 'EACCES', 'EADDRINUSE', 'EADDRNOTAVAIL', 'EAFNOSUPPORT', 'EAGAIN', 'EALREADY', 'EAUTH', 'EBADARCH', 'EBADEXEC', 'EBADF', 'EBADMACHO', 'EBADMSG', 'EBADRPC', 'EBUSY', 'ECANCELED', 'ECHILD', 'ECONNABORTED', 'ECONNREFUSED', 'ECONNRESET', 'EDEADLK', 'EDESTADDRREQ', 'EDEVERR', 'EDOM', 'EDQUOT', 'EEXIST', 'EFAULT', 'EFBIG', 'EFTYPE', 'EHOSTDOWN', 'EHOSTUNREACH', 'EIDRM', 'EILSEQ', 'EINPROGRESS', 'EINTR', 'EINVAL', 'EIO', 'EISCONN', 'EISDIR', 'ELOOP', 'EMFILE', 'EMLINK', 'EMSGSIZE', 'EMULTIHOP', 'ENAMETOOLONG', 'ENEEDAUTH', 'ENETDOWN', 'ENETRESET', 'ENETUNREACH', 'ENFILE', 'ENOATTR', 'ENOBUFS', 'ENODATA', 'ENODEV', 'ENOENT', 'ENOEXEC', 'ENOLCK', 'ENOLINK', 'ENOMEM', 'ENOMSG', 'ENOPOLICY', 'ENOPROTOOPT', 'ENOSPC', 'ENOSR', 'ENOSTR', 'ENOSYS', 'ENOTBLK', 'ENOTCONN', 'ENOTDIR', 'ENOTEMPTY', 'ENOTRECOVERABLE', 'ENOTSOCK', 'ENOTSUP', 'ENOTTY', 'ENXIO', 'EOPNOTSUPP', 'EOVERFLOW', 'EOWNERDEAD', 'EPERM', 'EPFNOSUPPORT', 'EPIPE', 'EPROCLIM', 'EPROCUNAVAIL', 'EPROGMISMATCH', 'EPROGUNAVAIL', 'EPROTO', 'EPROTONOSUPPORT', 'EPROTOTYPE', 'EPWROFF', 'ERANGE', 'EREMOTE', 'EROFS', 'ERPCMISMATCH', 'ESHLIBVERS', 'ESHUTDOWN', 'ESOCKTNOSUPPORT', 'ESPIPE', 'ESRCH', 'ESTALE', 'ETIME', 'ETIMEDOUT', 'ETOOMANYREFS', 'ETXTBSY', 'EUSERS', 'EWOULDBLOCK', 'EXDEV', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'errorcode']

This module makes available standard errno system symbols.

The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.

The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.

Symbols that are not relevant to the underlying system are not defined.

To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'.

[_posixsubprocess]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'fork_exec']

A POSIX helper for the subprocess module.

[select]
['KQ_EV_ADD', 'KQ_EV_CLEAR', 'KQ_EV_DELETE', 'KQ_EV_DISABLE', 'KQ_EV_ENABLE', 'KQ_EV_EOF', 'KQ_EV_ERROR', 'KQ_EV_FLAG1', 'KQ_EV_ONESHOT', 'KQ_EV_SYSFLAGS', 'KQ_FILTER_AIO', 'KQ_FILTER_PROC', 'KQ_FILTER_READ', 'KQ_FILTER_SIGNAL', 'KQ_FILTER_TIMER', 'KQ_FILTER_VNODE', 'KQ_FILTER_WRITE', 'KQ_NOTE_ATTRIB', 'KQ_NOTE_CHILD', 'KQ_NOTE_DELETE', 'KQ_NOTE_EXEC', 'KQ_NOTE_EXIT', 'KQ_NOTE_EXTEND', 'KQ_NOTE_FORK', 'KQ_NOTE_LINK', 'KQ_NOTE_LOWAT', 'KQ_NOTE_PCTRLMASK', 'KQ_NOTE_PDATAMASK', 'KQ_NOTE_RENAME', 'KQ_NOTE_REVOKE', 'KQ_NOTE_TRACK', 'KQ_NOTE_TRACKERR', 'KQ_NOTE_WRITE', 'PIPE_BUF', 'POLLERR', 'POLLHUP', 'POLLIN', 'POLLNVAL', 'POLLOUT', 'POLLPRI', 'POLLRDBAND', 'POLLRDNORM', 'POLLWRBAND', 'POLLWRNORM', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'kevent', 'kqueue', 'poll', 'select']

This module supports asynchronous I/O on multiple file descriptors.

*** IMPORTANT NOTICE ***
On Windows, only sockets are supported; on Unix, all file descriptors.

[selectors]
['ABCMeta', 'BaseSelector', 'DefaultSelector', 'EVENT_READ', 'EVENT_WRITE', 'KqueueSelector', 'Mapping', 'PollSelector', 'SelectSelector', 'SelectorKey', '_BaseSelectorImpl', '_PollLikeSelector', '_SelectorMapping', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_fileobj_to_fd', 'abstractmethod', 'math', 'namedtuple', 'select', 'sys']

Selectors module.

This module allows high-level and efficient I/O multiplexing, built upon the
`select` module primitives.


[math]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']

This module is always available.  It provides access to the
mathematical functions defined by the C standard.

[threading]
['Barrier', 'BoundedSemaphore', 'BrokenBarrierError', 'Condition', 'Event', 'Lock', 'RLock', 'Semaphore', 'TIMEOUT_MAX', 'Thread', 'ThreadError', 'Timer', 'WeakSet', '_CRLock', '_DummyThread', '_MainThread', '_PyRLock', '_RLock', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_active', '_active_limbo_lock', '_after_fork', '_allocate_lock', '_count', '_counter', '_dangling', '_deque', '_enumerate', '_format_exc', '_islice', '_limbo', '_main_thread', '_newname', '_os', '_pickSomeNonDaemonThread', '_profile_hook', '_set_sentinel', '_shutdown', '_start_new_thread', '_sys', '_time', '_trace_hook', 'activeCount', 'active_count', 'currentThread', 'current_thread', 'enumerate', 'get_ident', 'local', 'main_thread', 'setprofile', 'settrace', 'stack_size']

Thread module emulating a subset of Java's threading model.

[traceback]
['FrameSummary', 'StackSummary', 'TracebackException', '_RECURSIVE_CUTOFF', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_cause_message', '_context_message', '_format_final_exc_line', '_some_str', 'clear_frames', 'collections', 'extract_stack', 'extract_tb', 'format_exc', 'format_exception', 'format_exception_only', 'format_list', 'format_stack', 'format_tb', 'itertools', 'linecache', 'print_exc', 'print_exception', 'print_last', 'print_list', 'print_stack', 'print_tb', 'sys', 'walk_stack', 'walk_tb']

Extract, format and print information about Python stack traces.

[linecache]
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'cache', 'checkcache', 'clearcache', 'functools', 'getline', 'getlines', 'lazycache', 'os', 'sys', 'tokenize', 'updatecache']

Cache lines from Python source files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.


[tokenize]
['AMPER', 'AMPEREQUAL', 'AT', 'ATEQUAL', 'BOM_UTF8', 'Binnumber', 'Bracket', 'CIRCUMFLEX', 'CIRCUMFLEXEQUAL', 'COLON', 'COMMA', 'COMMENT', 'Comment', 'ContStr', 'DEDENT', 'DOT', 'DOUBLESLASH', 'DOUBLESLASHEQUAL', 'DOUBLESTAR', 'DOUBLESTAREQUAL', 'Decnumber', 'Double', 'Double3', 'ELLIPSIS', 'ENCODING', 'ENDMARKER', 'EQEQUAL', 'EQUAL', 'ERRORTOKEN', 'EXACT_TOKEN_TYPES', 'Expfloat', 'Exponent', 'Floatnumber', 'Funny', 'GREATER', 'GREATEREQUAL', 'Hexnumber', 'INDENT', 'ISEOF', 'ISNONTERMINAL', 'ISTERMINAL', 'Ignore', 'Imagnumber', 'Intnumber', 'LBRACE', 'LEFTSHIFT', 'LEFTSHIFTEQUAL', 'LESS', 'LESSEQUAL', 'LPAR', 'LSQB', 'MINEQUAL', 'MINUS', 'NAME', 'NEWLINE', 'NL', 'NOTEQUAL', 'NT_OFFSET', 'NUMBER', 'N_TOKENS', 'Name', 'Number', 'OP', 'Octnumber', 'Operator', 'PERCENT', 'PERCENTEQUAL', 'PLUS', 'PLUSEQUAL', 'PlainToken', 'Pointfloat', 'PseudoExtras', 'PseudoToken', 'RARROW', 'RBRACE', 'RIGHTSHIFT', 'RIGHTSHIFTEQUAL', 'RPAR', 'RSQB', 'SEMI', 'SLASH', 'SLASHEQUAL', 'STAR', 'STAREQUAL', 'STRING', 'Single', 'Single3', 'Special', 'StopTokenizing', 'String', 'StringPrefix', 'TILDE', 'TextIOWrapper', 'Token', 'TokenError', 'TokenInfo', 'Triple', 'Untokenizer', 'VBAR', 'VBAREQUAL', 'Whitespace', '__all__', '__author__', '__builtins__', '__cached__', '__credits__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_all_string_prefixes', '_builtin_open', '_compile', '_get_normal_name', '_itertools', '_prefix', '_tokenize', 'any', 'blank_re', 'chain', 'collections', 'cookie_re', 'detect_encoding', 'endpats', 'generate_tokens', 'group', 'lookup', 'main', 'maybe', 'open', 're', 'single_quoted', 'sys', 't', 'tabsize', 'tok_name', 'tokenize', 'triple_quoted', 'u', 'untokenize']

Tokenization help for Python programs.

tokenize(readline) is a generator that breaks a stream of bytes into
Python tokens.  It decodes the bytes according to PEP-0263 for
determining source file encoding.

It accepts a readline-like method which is called repeatedly to get the
next line of input (or b"" for EOF).  It generates 5-tuples with these
members:

    the token type (see token.py)
    the token (a string)
    the starting (row, column) indices of the token (a 2-tuple of ints)
    the ending (row, column) indices of the token (a 2-tuple of ints)
    the original line (string)

It is designed to match the working of the Python tokenizer exactly, except
that it produces COMMENT tokens for comments and gives type OP for all
operators.  Additionally, all token lists start with an ENCODING token
which tells you which encoding was used to decode the bytes stream.


[token]
['AMPER', 'AMPEREQUAL', 'AT', 'ATEQUAL', 'CIRCUMFLEX', 'CIRCUMFLEXEQUAL', 'COLON', 'COMMA', 'COMMENT', 'DEDENT', 'DOT', 'DOUBLESLASH', 'DOUBLESLASHEQUAL', 'DOUBLESTAR', 'DOUBLESTAREQUAL', 'ELLIPSIS', 'ENCODING', 'ENDMARKER', 'EQEQUAL', 'EQUAL', 'ERRORTOKEN', 'GREATER', 'GREATEREQUAL', 'INDENT', 'ISEOF', 'ISNONTERMINAL', 'ISTERMINAL', 'LBRACE', 'LEFTSHIFT', 'LEFTSHIFTEQUAL', 'LESS', 'LESSEQUAL', 'LPAR', 'LSQB', 'MINEQUAL', 'MINUS', 'NAME', 'NEWLINE', 'NL', 'NOTEQUAL', 'NT_OFFSET', 'NUMBER', 'N_TOKENS', 'OP', 'PERCENT', 'PERCENTEQUAL', 'PLUS', 'PLUSEQUAL', 'RARROW', 'RBRACE', 'RIGHTSHIFT', 'RIGHTSHIFTEQUAL', 'RPAR', 'RSQB', 'SEMI', 'SLASH', 'SLASHEQUAL', 'STAR', 'STAREQUAL', 'STRING', 'TILDE', 'VBAR', 'VBAREQUAL', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_main', 'tok_name']

Token constants (from "token.h").

[zmq.backend]
['Context', 'Frame', 'IPC_PATH_MAX_LEN', 'Message', 'Socket', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '_ns', 'backend', 'cffi', 'constants', 'curve_keypair', 'curve_public', 'device', 'has', 'os', 'platform', 'proxy', 'public_api', 'select', 'select_backend', 'strerror', 'sys', 'zmq_errno', 'zmq_poll', 'zmq_version_info']

Import basic exposure of libzmq C API as a backend

[zmq.backend.select]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'public_api', 'select_backend']

Import basic exposure of libzmq C API as a backend

[zmq.backend.cffi]
['AFFINITY', 'BACKLOG', 'BLOCKY', 'CLIENT', 'CONFLATE', 'CONNECT_RID', 'CONNECT_TIMEOUT', 'CURVE', 'CURVE_PUBLICKEY', 'CURVE_SECRETKEY', 'CURVE_SERVER', 'CURVE_SERVERKEY', 'Context', 'DEALER', 'DELAY_ATTACH_ON_CONNECT', 'DGRAM', 'DISH', 'DONTWAIT', 'DOWNSTREAM', 'DRAFT_API', 'EADDRINUSE', 'EADDRNOTAVAIL', 'EAFNOSUPPORT', 'EAGAIN', 'ECONNABORTED', 'ECONNREFUSED', 'ECONNRESET', 'EFAULT', 'EFSM', 'EHOSTUNREACH', 'EINPROGRESS', 'EINVAL', 'EMSGSIZE', 'EMTHREAD', 'ENETDOWN', 'ENETRESET', 'ENETUNREACH', 'ENOBUFS', 'ENOCOMPATPROTO', 'ENODEV', 'ENOMEM', 'ENOTCONN', 'ENOTSOCK', 'ENOTSUP', 'EPROTONOSUPPORT', 'ETERM', 'ETIMEDOUT', 'EVENTS', 'EVENT_ACCEPTED', 'EVENT_ACCEPT_FAILED', 'EVENT_ALL', 'EVENT_BIND_FAILED', 'EVENT_CLOSED', 'EVENT_CLOSE_FAILED', 'EVENT_CONNECTED', 'EVENT_CONNECT_DELAYED', 'EVENT_CONNECT_RETRIED', 'EVENT_DISCONNECTED', 'EVENT_LISTENING', 'EVENT_MONITOR_STOPPED', 'FAIL_UNROUTABLE', 'FD', 'FORWARDER', 'Frame', 'GATHER', 'GSSAPI', 'GSSAPI_PLAINTEXT', 'GSSAPI_PRINCIPAL', 'GSSAPI_SERVER', 'GSSAPI_SERVICE_PRINCIPAL', 'HANDSHAKE_IVL', 'HAUSNUMERO', 'HEARTBEAT_IVL', 'HEARTBEAT_TIMEOUT', 'HEARTBEAT_TTL', 'HWM', 'IDENTITY', 'IMMEDIATE', 'INVERT_MATCHING', 'IO_THREADS', 'IO_THREADS_DFLT', 'IPC_FILTER_GID', 'IPC_FILTER_PID', 'IPC_FILTER_UID', 'IPC_PATH_MAX_LEN', 'IPV4ONLY', 'IPV6', 'LAST_ENDPOINT', 'LINGER', 'MAXMSGSIZE', 'MAX_SOCKETS', 'MAX_SOCKETS_DFLT', 'MCAST_LOOP', 'MECHANISM', 'MORE', 'MULTICAST_HOPS', 'MULTICAST_MAXTPDU', 'Message', 'NOBLOCK', 'NULL', 'PAIR', 'PLAIN', 'PLAIN_PASSWORD', 'PLAIN_SERVER', 'PLAIN_USERNAME', 'POLLERR', 'POLLIN', 'POLLITEMS_DFLT', 'POLLOUT', 'POLLPRI', 'PROBE_ROUTER', 'PUB', 'PULL', 'PUSH', 'QUEUE', 'RADIO', 'RATE', 'RCVBUF', 'RCVHWM', 'RCVMORE', 'RCVTIMEO', 'RECONNECT_IVL', 'RECONNECT_IVL_MAX', 'RECOVERY_IVL', 'RECOVERY_IVL_MSEC', 'REP', 'REQ', 'REQ_CORRELATE', 'REQ_RELAXED', 'ROUTER', 'ROUTER_BEHAVIOR', 'ROUTER_HANDOVER', 'ROUTER_MANDATORY', 'ROUTER_RAW', 'SCATTER', 'SERVER', 'SHARED', 'SNDBUF', 'SNDHWM', 'SNDMORE', 'SNDTIMEO', 'SOCKET_LIMIT', 'SOCKS_PROXY', 'SRCFD', 'STREAM', 'STREAMER', 'STREAM_NOTIFY', 'SUB', 'SUBSCRIBE', 'SWAP', 'Socket', 'TCP_ACCEPT_FILTER', 'TCP_KEEPALIVE', 'TCP_KEEPALIVE_CNT', 'TCP_KEEPALIVE_IDLE', 'TCP_KEEPALIVE_INTVL', 'TCP_MAXRT', 'THREAD_PRIORITY', 'THREAD_PRIORITY_DFLT', 'THREAD_SAFE', 'THREAD_SCHED_POLICY', 'THREAD_SCHED_POLICY_DFLT', 'TOS', 'TYPE', 'UNSUBSCRIBE', 'UPSTREAM', 'USE_FD', 'VERSION', 'VERSION_MAJOR', 'VERSION_MINOR', 'VERSION_PATCH', 'VMCI_BUFFER_MAX_SIZE', 'VMCI_BUFFER_MIN_SIZE', 'VMCI_BUFFER_SIZE', 'VMCI_CONNECT_TIMEOUT', 'XPUB', 'XPUB_MANUAL', 'XPUB_NODROP', 'XPUB_VERBOSE', 'XPUB_VERBOSER', 'XPUB_WELCOME_MSG', 'XREP', 'XREQ', 'XSUB', 'ZAP_DOMAIN', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '_cffi', '_poll', 'constants', 'context', 'curve_keypair', 'curve_public', 'device', 'devices', 'error', 'ffi', 'has', 'message', 'proxy', 'socket', 'strerror', 'submod', 'utils', 'zmq_errno', 'zmq_poll', 'zmq_version_info']

CFFI backend (for PyPY)

[zmq.backend.cffi.constants]
['AFFINITY', 'BACKLOG', 'BLOCKY', 'C', 'CLIENT', 'CONFLATE', 'CONNECT_RID', 'CONNECT_TIMEOUT', 'CURVE', 'CURVE_PUBLICKEY', 'CURVE_SECRETKEY', 'CURVE_SERVER', 'CURVE_SERVERKEY', 'DEALER', 'DELAY_ATTACH_ON_CONNECT', 'DGRAM', 'DISH', 'DONTWAIT', 'DOWNSTREAM', 'DRAFT_API', 'EADDRINUSE', 'EADDRNOTAVAIL', 'EAFNOSUPPORT', 'EAGAIN', 'ECONNABORTED', 'ECONNREFUSED', 'ECONNRESET', 'EFAULT', 'EFSM', 'EHOSTUNREACH', 'EINPROGRESS', 'EINVAL', 'EMSGSIZE', 'EMTHREAD', 'ENETDOWN', 'ENETRESET', 'ENETUNREACH', 'ENOBUFS', 'ENOCOMPATPROTO', 'ENODEV', 'ENOMEM', 'ENOTCONN', 'ENOTSOCK', 'ENOTSUP', 'EPROTONOSUPPORT', 'ETERM', 'ETIMEDOUT', 'EVENTS', 'EVENT_ACCEPTED', 'EVENT_ACCEPT_FAILED', 'EVENT_ALL', 'EVENT_BIND_FAILED', 'EVENT_CLOSED', 'EVENT_CLOSE_FAILED', 'EVENT_CONNECTED', 'EVENT_CONNECT_DELAYED', 'EVENT_CONNECT_RETRIED', 'EVENT_DISCONNECTED', 'EVENT_LISTENING', 'EVENT_MONITOR_STOPPED', 'FAIL_UNROUTABLE', 'FD', 'FORWARDER', 'GATHER', 'GSSAPI', 'GSSAPI_PLAINTEXT', 'GSSAPI_PRINCIPAL', 'GSSAPI_SERVER', 'GSSAPI_SERVICE_PRINCIPAL', 'HANDSHAKE_IVL', 'HAUSNUMERO', 'HEARTBEAT_IVL', 'HEARTBEAT_TIMEOUT', 'HEARTBEAT_TTL', 'HWM', 'IDENTITY', 'IMMEDIATE', 'INVERT_MATCHING', 'IO_THREADS', 'IO_THREADS_DFLT', 'IPC_FILTER_GID', 'IPC_FILTER_PID', 'IPC_FILTER_UID', 'IPV4ONLY', 'IPV6', 'LAST_ENDPOINT', 'LINGER', 'MAXMSGSIZE', 'MAX_SOCKETS', 'MAX_SOCKETS_DFLT', 'MCAST_LOOP', 'MECHANISM', 'MORE', 'MULTICAST_HOPS', 'MULTICAST_MAXTPDU', 'NOBLOCK', 'NULL', 'PAIR', 'PLAIN', 'PLAIN_PASSWORD', 'PLAIN_SERVER', 'PLAIN_USERNAME', 'POLLERR', 'POLLIN', 'POLLITEMS_DFLT', 'POLLOUT', 'POLLPRI', 'PROBE_ROUTER', 'PUB', 'PULL', 'PUSH', 'PYZMQ_DRAFT_API', 'QUEUE', 'RADIO', 'RATE', 'RCVBUF', 'RCVHWM', 'RCVMORE', 'RCVTIMEO', 'RECONNECT_IVL', 'RECONNECT_IVL_MAX', 'RECOVERY_IVL', 'RECOVERY_IVL_MSEC', 'REP', 'REQ', 'REQ_CORRELATE', 'REQ_RELAXED', 'ROUTER', 'ROUTER_BEHAVIOR', 'ROUTER_HANDOVER', 'ROUTER_MANDATORY', 'ROUTER_RAW', 'SCATTER', 'SERVER', 'SHARED', 'SNDBUF', 'SNDHWM', 'SNDMORE', 'SNDTIMEO', 'SOCKET_LIMIT', 'SOCKS_PROXY', 'SRCFD', 'STREAM', 'STREAMER', 'STREAM_NOTIFY', 'SUB', 'SUBSCRIBE', 'SWAP', 'TCP_ACCEPT_FILTER', 'TCP_KEEPALIVE', 'TCP_KEEPALIVE_CNT', 'TCP_KEEPALIVE_IDLE', 'TCP_KEEPALIVE_INTVL', 'TCP_MAXRT', 'THREAD_PRIORITY', 'THREAD_PRIORITY_DFLT', 'THREAD_SAFE', 'THREAD_SCHED_POLICY', 'THREAD_SCHED_POLICY_DFLT', 'TOS', 'TYPE', 'UNSUBSCRIBE', 'UPSTREAM', 'USE_FD', 'VERSION', 'VERSION_MAJOR', 'VERSION_MINOR', 'VERSION_PATCH', 'VMCI_BUFFER_MAX_SIZE', 'VMCI_BUFFER_MIN_SIZE', 'VMCI_BUFFER_SIZE', 'VMCI_CONNECT_TIMEOUT', 'XPUB', 'XPUB_MANUAL', 'XPUB_NODROP', 'XPUB_VERBOSE', 'XPUB_VERBOSER', 'XPUB_WELCOME_MSG', 'XREP', 'XREQ', 'XSUB', 'ZAP_DOMAIN', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'all_names', 'c_constant_names', 'cname', 'g', 'name']

zmq constants

[zmq.backend.cffi._cffi]
['C', 'FFI', 'IPC_PATH_MAX_LEN', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_cdefs', '_defines', '_make_defines', '_preprocessed', '_verify', '_version_info', '_zmqh', 'all_names', 'base_zmq_version', 'c_constant_names', 'cfg', 'dirname', 'f', 'ffi', 'here', 'join', 'json', 'load_compiler_config', 'name', 'new_binary_data', 'new_int64_pointer', 'new_int_pointer', 'new_sizet_pointer', 'new_uint64_pointer', 'no_prefix', 'nsp', 'os', 'value_binary_data', 'value_int64_pointer', 'value_int_pointer', 'value_uint64_pointer', 'zmq_version_info']

The main CFFI wrapping of libzmq

[json]
['JSONDecodeError', 'JSONDecoder', 'JSONEncoder', '__all__', '__author__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_default_decoder', '_default_encoder', 'codecs', 'decoder', 'detect_encoding', 'dump', 'dumps', 'encoder', 'load', 'loads', 'scanner']

JSON (JavaScript Object Notation) <http://json.org> is a subset of
JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data
interchange format.

:mod:`json` exposes an API familiar to users of the standard library
:mod:`marshal` and :mod:`pickle` modules.  It is derived from a
version of the externally maintained simplejson library.

Encoding basic Python object hierarchies::

    >>> import json
    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
    '["foo", {"bar": ["baz", null, 1.0, 2]}]'
    >>> print(json.dumps("\"foo\bar"))
    "\"foo\bar"
    >>> print(json.dumps('\u1234'))
    "\u1234"
    >>> print(json.dumps('\\'))
    "\\"
    >>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
    {"a": 0, "b": 0, "c": 0}
    >>> from io import StringIO
    >>> io = StringIO()
    >>> json.dump(['streaming API'], io)
    >>> io.getvalue()
    '["streaming API"]'

Compact encoding::

    >>> import json
    >>> mydict = {'4': 5, '6': 7}
    >>> json.dumps([1,2,3,mydict], separators=(',', ':'))
    '[1,2,3,{"4":5,"6":7}]'

Pretty printing::

    >>> import json
    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))
    {
        "4": 5,
        "6": 7
    }

Decoding JSON::

    >>> import json
    >>> obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]
    >>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]') == obj
    True
    >>> json.loads('"\\"foo\\bar"') == '"foo\x08ar'
    True
    >>> from io import StringIO
    >>> io = StringIO('["streaming API"]')
    >>> json.load(io)[0] == 'streaming API'
    True

Specializing JSON object decoding::

    >>> import json
    >>> def as_complex(dct):
    ...     if '__complex__' in dct:
    ...         return complex(dct['real'], dct['imag'])
    ...     return dct
    ...
    >>> json.loads('{"__complex__": true, "real": 1, "imag": 2}',
    ...     object_hook=as_complex)
    (1+2j)
    >>> from decimal import Decimal
    >>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')
    True

Specializing JSON object encoding::

    >>> import json
    >>> def encode_complex(obj):
    ...     if isinstance(obj, complex):
    ...         return [obj.real, obj.imag]
    ...     raise TypeError(f'Object of type {obj.__class__.__name__} '
    ...                     f'is not JSON serializable')
    ...
    >>> json.dumps(2 + 1j, default=encode_complex)
    '[2.0, 1.0]'
    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)
    '[2.0, 1.0]'
    >>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))
    '[2.0, 1.0]'


Using json.tool from the shell to validate and pretty-print::

    $ echo '{"json":"obj"}' | python -m json.tool
    {
        "json": "obj"
    }
    $ echo '{ 1.2:3.4}' | python -m json.tool
    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)


[json.decoder]
['BACKSLASH', 'FLAGS', 'JSONArray', 'JSONDecodeError', 'JSONDecoder', 'JSONObject', 'NaN', 'NegInf', 'PosInf', 'STRINGCHUNK', 'WHITESPACE', 'WHITESPACE_STR', '_CONSTANTS', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_decode_uXXXX', 'c_scanstring', 'py_scanstring', 're', 'scanner', 'scanstring']

Implementation of JSONDecoder


[json.scanner]
['NUMBER_RE', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'c_make_scanner', 'make_scanner', 'py_make_scanner', 're']

JSON token scanner


[json.encoder]
['ESCAPE', 'ESCAPE_ASCII', 'ESCAPE_DCT', 'HAS_UTF8', 'INFINITY', 'JSONEncoder', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_make_iterencode', 'c_encode_basestring', 'c_encode_basestring_ascii', 'c_make_encoder', 'encode_basestring', 'encode_basestring_ascii', 'i', 'py_encode_basestring', 'py_encode_basestring_ascii', 're']

Implementation of JSONEncoder


[cffi]
['CDefError', 'FFI', 'FFIError', 'VerificationError', 'VerificationMissing', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '__version_info__', '__version_verifier_modules__', 'api', 'commontypes', 'cparser', 'error', 'lock', 'model']

None

[cffi.api]
['CDefError', 'FFI', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_builtin_function_type', '_load_backend_lib', '_make_ffi_library', 'allocate_lock', 'basestring', 'model', 'sys', 'types']

None

[cffi.lock]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'allocate_lock', 'sys']

None

[cffi.error]
['CDefError', 'FFIError', 'VerificationError', 'VerificationMissing', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']

None

[cffi.model]
['ArrayType', 'BaseFunctionType', 'BasePrimitiveType', 'BaseType', 'BaseTypeByIdentity', 'CDefError', 'ConstPointerType', 'EnumType', 'FunctionPtrType', 'NamedPointerType', 'PointerType', 'PrimitiveType', 'Q_CONST', 'Q_RESTRICT', 'Q_VOLATILE', 'RawFunctionType', 'StructOrUnion', 'StructOrUnionOrEnum', 'StructType', 'UnionType', 'UnknownFloatType', 'UnknownIntegerType', 'VerificationError', 'VerificationMissing', 'VoidType', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_typecache_cffi_backend', 'allocate_lock', 'attach_exception_info', 'char_array_type', 'const_voidp_type', 'get_typecache', 'global_cache', 'global_lock', 'pointer_cache', 'qualify', 'types', 'unknown_ptr_type', 'unknown_type', 'void_type', 'voidp_type', 'weakref']

None

[zmq.utils]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'constant_names', 'jsonapi', 'strtypes']

None

[zmq.utils.constant_names]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'all_names', 'base_names', 'bytes_sockopt_names', 'ctx_opt_names', 'draft_in', 'fd_sockopt_names', 'int64_sockopt_names', 'int_sockopt_names', 'msg_opt_names', 'new_in', 'no_prefix', 'removed_in', 'switched_sockopt_names']

0MQ Constant names

[cffi.cparser]
['CDEF_SOURCE_STRING', 'CDefError', 'COMMON_TYPES', 'FFIError', 'Parser', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_common_type_names', '_get_parser', '_parser_cache', '_preprocess', '_preprocess_extern_python', '_r_cdecl', '_r_comment', '_r_define', '_r_enum_dotdotdot', '_r_extern_python', '_r_float_dotdotdot', '_r_int_dotdotdot', '_r_int_literal', '_r_partial_array', '_r_partial_enum', '_r_star_const_space', '_r_stdcall1', '_r_stdcall2', '_r_words', '_thread', '_workaround_for_old_pycparser', 'lock', 'model', 'pycparser', 're', 'resolve_common_type', 'sys', 'weakref']

None

[cffi.commontypes]
['COMMON_TYPES', 'FFIError', '_CACHE', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_get_common_types', 'model', 'resolve_common_type', 'sys', 'win_common_types']

None

[pycparser]
['CParser', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', 'ast_transforms', 'c_ast', 'c_lexer', 'c_parser', 'check_output', 'io', 'lextab', 'parse_file', 'ply', 'plyparser', 'preprocess_file', 'yacctab']

None

[pycparser.c_parser]
['CLexer', 'CParser', 'Coord', 'PLYParser', 'ParseError', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'c_ast', 'fix_switch_cases', 'parameterized', 're', 'template', 'yacc']

None

[pycparser.ply]
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', 'lex', 'yacc']

None

[pycparser.ply.yacc]
['Grammar', 'GrammarError', 'LALRError', 'LRGeneratedTable', 'LRItem', 'LRParser', 'LRTable', 'MAXINT', 'MiniProduction', 'NullLogger', 'ParserReflect', 'PlyLogger', 'Production', 'VersionError', 'YaccError', 'YaccProduction', 'YaccSymbol', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '__tabversion__', '__version__', '_errok', '_is_identifier', '_restart', '_token', '_warnmsg', 'base64', 'call_errorfunc', 'debug_file', 'default_lr', 'digraph', 'errok', 'error_count', 'format_result', 'format_stack_entry', 'get_caller_module_dict', 'inspect', 'os', 'parse', 'parse_grammar', 'pickle_protocol', 're', 'restart', 'resultlimit', 'rightmost_terminal', 'string_types', 'sys', 'tab_module', 'token', 'traverse', 'types', 'warnings', 'yacc', 'yaccdebug', 'yaccdevel']

None

[inspect]
['ArgInfo', 'ArgSpec', 'Arguments', 'Attribute', 'BlockFinder', 'BoundArguments', 'CORO_CLOSED', 'CORO_CREATED', 'CORO_RUNNING', 'CORO_SUSPENDED', 'CO_ASYNC_GENERATOR', 'CO_COROUTINE', 'CO_GENERATOR', 'CO_ITERABLE_COROUTINE', 'CO_NESTED', 'CO_NEWLOCALS', 'CO_NOFREE', 'CO_OPTIMIZED', 'CO_VARARGS', 'CO_VARKEYWORDS', 'ClosureVars', 'EndOfBlock', 'FrameInfo', 'FullArgSpec', 'GEN_CLOSED', 'GEN_CREATED', 'GEN_RUNNING', 'GEN_SUSPENDED', 'OrderedDict', 'Parameter', 'Signature', 'TPFLAGS_IS_ABSTRACT', 'Traceback', '_ClassMethodWrapper', '_KEYWORD_ONLY', '_MethodWrapper', '_NonUserDefinedCallables', '_PARAM_NAME_MAPPING', '_POSITIONAL_ONLY', '_POSITIONAL_OR_KEYWORD', '_ParameterKind', '_VAR_KEYWORD', '_VAR_POSITIONAL', '_WrapperDescriptor', '__author__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_class', '_check_instance', '_empty', '_filesbymodname', '_findclass', '_finddoc', '_get_paramkind_descr', '_getfullargs', '_is_type', '_main', '_missing_arguments', '_sentinel', '_shadowed_dict', '_signature_bound_method', '_signature_from_builtin', '_signature_from_callable', '_signature_from_function', '_signature_fromstr', '_signature_get_bound_param', '_signature_get_partial', '_signature_get_user_defined_method', '_signature_is_builtin', '_signature_is_functionlike', '_signature_strip_non_python_syntax', '_static_getmro', '_too_many', '_void', 'abc', 'attrgetter', 'builtins', 'classify_class_attrs', 'cleandoc', 'collections', 'currentframe', 'dis', 'enum', 'findsource', 'formatannotation', 'formatannotationrelativeto', 'formatargspec', 'formatargvalues', 'functools', 'getabsfile', 'getargs', 'getargspec', 'getargvalues', 'getattr_static', 'getblock', 'getcallargs', 'getclasstree', 'getclosurevars', 'getcomments', 'getcoroutinelocals', 'getcoroutinestate', 'getdoc', 'getfile', 'getframeinfo', 'getfullargspec', 'getgeneratorlocals', 'getgeneratorstate', 'getinnerframes', 'getlineno', 'getmembers', 'getmodule', 'getmodulename', 'getmro', 'getouterframes', 'getsource', 'getsourcefile', 'getsourcelines', 'importlib', 'indentsize', 'isabstract', 'isasyncgen', 'isasyncgenfunction', 'isawaitable', 'isbuiltin', 'isclass', 'iscode', 'iscoroutine', 'iscoroutinefunction', 'isdatadescriptor', 'isframe', 'isfunction', 'isgenerator', 'isgeneratorfunction', 'isgetsetdescriptor', 'ismemberdescriptor', 'ismethod', 'ismethoddescriptor', 'ismodule', 'isroutine', 'istraceback', 'itertools', 'k', 'linecache', 'mod_dict', 'modulesbyfile', 'namedtuple', 'os', 're', 'signature', 'stack', 'sys', 'token', 'tokenize', 'trace', 'types', 'unwrap', 'v', 'walktree', 'warnings']

Get useful information from live Python objects.

This module encapsulates the interface provided by the internal special
attributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.
It also provides some help for examining source code and class layout.

Here are some of the useful functions provided by this module:

    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),
        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),
        isroutine() - check object types
    getmembers() - get members of an object that satisfy a given condition

    getfile(), getsourcefile(), getsource() - find an object's source code
    getdoc(), getcomments() - get documentation on an object
    getmodule() - determine the module that an object came from
    getclasstree() - arrange classes so as to represent their hierarchy

    getargvalues(), getcallargs() - get info about function arguments
    getfullargspec() - same, with support for Python 3 features
    formatargvalues() - format an argument spec
    getouterframes(), getinnerframes() - get info about frames
    currentframe() - get the current stack frame
    stack(), trace() - get info about frames on the stack or in a traceback

    signature() - get a Signature object for the callable


[dis]
['Bytecode', 'COMPILER_FLAG_NAMES', 'EXTENDED_ARG', 'FORMAT_VALUE', 'HAVE_ARGUMENT', 'Instruction', '_Instruction', '_OPARG_WIDTH', '_OPNAME_WIDTH', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_disassemble_bytes', '_disassemble_recursive', '_disassemble_str', '_format_code_info', '_get_code_object', '_get_const_info', '_get_instructions_bytes', '_get_name_info', '_have_code', '_test', '_try_compile', '_unpack_opargs', 'cmp_op', 'code_info', 'collections', 'dis', 'disassemble', 'disco', 'distb', 'findlabels', 'findlinestarts', 'get_instructions', 'hascompare', 'hasconst', 'hasfree', 'hasjabs', 'hasjrel', 'haslocal', 'hasname', 'hasnargs', 'io', 'opmap', 'opname', 'pretty_flags', 'show_code', 'stack_effect', 'sys', 'types']

Disassembler of Python byte code into mnemonics.

[opcode]
['EXTENDED_ARG', 'HAVE_ARGUMENT', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'cmp_op', 'hascompare', 'hasconst', 'hasfree', 'hasjabs', 'hasjrel', 'haslocal', 'hasname', 'hasnargs', 'opmap', 'opname', 'stack_effect']


opcode module - potentially shared between dis and other modules which
operate on bytecodes (e.g. peephole optimizers).


[_opcode]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'stack_effect']

Opcode support module.

[importlib]
['_RELOADING', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__import__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '_bootstrap', '_bootstrap_external', '_imp', '_r_long', '_w_long', 'find_loader', 'import_module', 'invalidate_caches', 'machinery', 'reload', 'sys', 'types', 'warnings']

A pure Python implementation of import.

[importlib._bootstrap]
['BuiltinImporter', 'FrozenImporter', 'ModuleSpec', '_DeadlockError', '_DummyModuleLock', '_ERR_MSG', '_ERR_MSG_PREFIX', '_ImportLockContext', '_ModuleLock', '_ModuleLockManager', '_NEEDS_LOADING', '__builtins__', '__doc__', '__file__', '__import__', '__loader__', '__name__', '__package__', '__spec__', '_blocking_on', '_bootstrap_external', '_builtin_from_name', '_calc___package__', '_call_with_frames_removed', '_exec', '_find_and_load', '_find_and_load_unlocked', '_find_spec', '_find_spec_legacy', '_gcd_import', '_get_module_lock', '_handle_fromlist', '_imp', '_init_module_attrs', '_install', '_install_external_importers', '_installed_safely', '_load', '_load_backward_compatible', '_load_module_shim', '_load_unlocked', '_lock_unlock_module', '_module_locks', '_module_repr', '_module_repr_from_spec', '_new_module', '_requires_builtin', '_requires_frozen', '_resolve_name', '_sanity_check', '_setup', '_spec_from_module', '_thread', '_verbose_message', '_warnings', '_weakref', '_wrap', 'module_from_spec', 'spec_from_loader', 'sys']

Core implementation of import.

This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.



[importlib._bootstrap_external]
['BYTECODE_SUFFIXES', 'DEBUG_BYTECODE_SUFFIXES', 'EXTENSION_SUFFIXES', 'ExtensionFileLoader', 'FileFinder', 'FileLoader', 'MAGIC_NUMBER', 'OPTIMIZED_BYTECODE_SUFFIXES', 'PathFinder', 'SOURCE_SUFFIXES', 'SourceFileLoader', 'SourceLoader', 'SourcelessFileLoader', 'WindowsRegistryFinder', '_CASE_INSENSITIVE_PLATFORMS', '_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY', '_CASE_INSENSITIVE_PLATFORMS_STR_KEY', '_LoaderBasics', '_NamespaceLoader', '_NamespacePath', '_OPT', '_POPULATE', '_PYCACHE', '_RAW_MAGIC_NUMBER', '__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_bootstrap', '_calc_mode', '_check_name', '_classify_pyc', '_code_to_hash_pyc', '_code_to_timestamp_pyc', '_code_type', '_compile_bytecode', '_find_module_shim', '_fix_up_module', '_get_cached', '_get_sourcefile', '_get_supported_file_loaders', '_imp', '_install', '_io', '_make_relax_case', '_os', '_path_is_mode_type', '_path_isdir', '_path_isfile', '_path_join', '_path_split', '_path_stat', '_r_long', '_relax_case', '_setup', '_thread', '_validate_hash_pyc', '_validate_timestamp_pyc', '_w_long', '_warnings', '_weakref', '_write_atomic', 'builtins', 'cache_from_source', 'decode_source', 'marshal', 'path_sep', 'path_separators', 'source_from_cache', 'spec_from_file_location', 'sys']

Core implementation of path-based import.

This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.



[importlib.machinery]
['BYTECODE_SUFFIXES', 'BuiltinImporter', 'DEBUG_BYTECODE_SUFFIXES', 'EXTENSION_SUFFIXES', 'ExtensionFileLoader', 'FileFinder', 'FrozenImporter', 'ModuleSpec', 'OPTIMIZED_BYTECODE_SUFFIXES', 'PathFinder', 'SOURCE_SUFFIXES', 'SourceFileLoader', 'SourcelessFileLoader', 'WindowsRegistryFinder', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_imp', 'all_suffixes']

The machinery of importlib: finders, loaders, hooks, etc.

[base64]
['MAXBINSIZE', 'MAXLINESIZE', '_85encode', '_A85END', '_A85START', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_a85chars', '_a85chars2', '_b32alphabet', '_b32rev', '_b32tab2', '_b85alphabet', '_b85chars', '_b85chars2', '_b85dec', '_bytes_from_decode_data', '_input_type_check', '_urlsafe_decode_translation', '_urlsafe_encode_translation', 'a85decode', 'a85encode', 'b16decode', 'b16encode', 'b32decode', 'b32encode', 'b64decode', 'b64encode', 'b85decode', 'b85encode', 'binascii', 'bytes_types', 'decode', 'decodebytes', 'decodestring', 'encode', 'encodebytes', 'encodestring', 'main', 're', 'standard_b64decode', 'standard_b64encode', 'struct', 'test', 'urlsafe_b64decode', 'urlsafe_b64encode']

Base16, Base32, Base64 (RFC 3548), Base85 and Ascii85 data encodings

[binascii]
['Error', 'Incomplete', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a2b_base64', 'a2b_hex', 'a2b_hqx', 'a2b_qp', 'a2b_uu', 'b2a_base64', 'b2a_hex', 'b2a_hqx', 'b2a_qp', 'b2a_uu', 'crc32', 'crc_hqx', 'hexlify', 'rlecode_hqx', 'rledecode_hqx', 'unhexlify']

Conversion between binary data and ASCII

[pycparser.c_ast]
['ArrayDecl', 'ArrayRef', 'Assignment', 'BinaryOp', 'Break', 'Case', 'Cast', 'Compound', 'CompoundLiteral', 'Constant', 'Continue', 'Decl', 'DeclList', 'Default', 'DoWhile', 'EllipsisParam', 'EmptyStatement', 'Enum', 'Enumerator', 'EnumeratorList', 'ExprList', 'FileAST', 'For', 'FuncCall', 'FuncDecl', 'FuncDef', 'Goto', 'ID', 'IdentifierType', 'If', 'InitList', 'Label', 'NamedInitializer', 'Node', 'NodeVisitor', 'ParamList', 'Pragma', 'PtrDecl', 'Return', 'Struct', 'StructRef', 'Switch', 'TernaryOp', 'TypeDecl', 'Typedef', 'Typename', 'UnaryOp', 'Union', 'While', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_repr', 'sys']

None

[pycparser.c_lexer]
['CLexer', 'TOKEN', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'lex', 're', 'sys']

None

[pycparser.ply.lex]
['LexError', 'LexToken', 'Lexer', 'LexerReflect', 'NullLogger', 'PlyLogger', 'StringTypes', 'TOKEN', 'Token', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '__tabversion__', '__version__', '_form_master_re', '_funcs_to_names', '_get_regex', '_is_identifier', '_names_to_funcs', '_statetoken', 'copy', 'get_caller_module_dict', 'input', 'inspect', 'lex', 'lexer', 'os', 're', 'runmain', 'sys', 'token', 'types']

None

[pycparser.plyparser]
['Coord', 'PLYParser', 'ParseError', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_create_param_rules', 'parameterized', 'template', 'warnings']

None

[pycparser.ast_transforms]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_extract_nested_case', 'c_ast', 'fix_switch_cases']

None

[pycparser.lextab]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_lexliterals', '_lexreflags', '_lexstateeoff', '_lexstateerrorf', '_lexstateignore', '_lexstateinfo', '_lexstatere', '_lextokens', '_tabversion']

None

[pycparser.yacctab]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_k', '_lr_action', '_lr_goto', '_lr_method', '_lr_productions', '_lr_signature', '_tabversion', '_v', '_x', '_y']

None

[zmq.backend.cffi.error]
['C', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'ffi', 'strerror', 'zmq_errno']

zmq error functions

[zmq.backend.cffi.message]
['C', 'Frame', 'Message', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_content', 'ffi', 'unicode', 'zmq']

Dummy Frame object

[zmq.utils.strtypes]
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'asbytes', 'b', 'basestring', 'bytes', 'cast_bytes', 'cast_unicode', 'sys', 'u', 'unicode']

Declare basic string types unambiguously for various Python versions.

Authors
-------
* MinRK


[zmq.backend.cffi.context]
['C', 'Context', 'EINVAL', 'IO_THREADS', 'InterruptedSystemCall', 'LINGER', 'ZMQError', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_rc', 'ffi', 'weakref']

zmq Context class

[zmq.error]
['Again', 'ContextTerminated', 'EINTR', 'InterruptedSystemCall', 'NotDone', 'ZMQBaseError', 'ZMQBindError', 'ZMQError', 'ZMQVersionError', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_rc', '_check_version', '_zmq_version', '_zmq_version_info']

0MQ Error classes and functions.

[zmq.backend.cffi.socket]
['C', 'Frame', 'IPC_PATH_MAX_LEN', 'RCVMORE', 'Socket', 'ZMQError', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_rc', '_check_version', '_retry_sys_call', 'errno_mod', 'ffi', 'initialize_opt_pointer', 'new_binary_data', 'new_int64_pointer', 'new_int_pointer', 'new_pointer_from_opt', 'new_uint64_pointer', 'unicode', 'value_binary_data', 'value_from_opt_pointer', 'value_int64_pointer', 'value_int_pointer', 'value_uint64_pointer', 'zmq']

zmq Socket class

[zmq.backend.cffi.utils]
['C', 'EINTR', 'InterruptedSystemCall', 'ZMQError', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_rc', '_check_version', '_retry_sys_call', 'curve_keypair', 'curve_public', 'ffi', 'has', 'unicode']

miscellaneous zmq_utils wrapping

[zmq.backend.cffi._poll]
['C', 'InterruptedSystemCall', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_rc', '_make_zmq_pollitem', '_make_zmq_pollitem_fromfd', 'ffi', 'monotonic', 'warnings', 'zmq_poll']

zmq poll function

[zmq.backend.cffi.devices]
['C', 'Socket', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_retry_sys_call', 'device', 'ffi', 'proxy']

zmq device functions

[zmq.sugar]
['AFFINITY', 'Again', 'BACKLOG', 'BLOCKY', 'CONFLATE', 'CONNECT_RID', 'CONNECT_TIMEOUT', 'CURVE', 'CURVE_PUBLICKEY', 'CURVE_SECRETKEY', 'CURVE_SERVER', 'CURVE_SERVERKEY', 'Context', 'ContextTerminated', 'DEALER', 'DELAY_ATTACH_ON_CONNECT', 'DONTWAIT', 'DRAFT_API', 'EADDRINUSE', 'EADDRNOTAVAIL', 'EAFNOSUPPORT', 'EAGAIN', 'ECONNABORTED', 'ECONNREFUSED', 'ECONNRESET', 'EFAULT', 'EFSM', 'EHOSTUNREACH', 'EINPROGRESS', 'EINVAL', 'EMSGSIZE', 'EMTHREAD', 'ENETDOWN', 'ENETRESET', 'ENETUNREACH', 'ENOBUFS', 'ENOCOMPATPROTO', 'ENODEV', 'ENOMEM', 'ENOTCONN', 'ENOTSOCK', 'ENOTSUP', 'EPROTONOSUPPORT', 'ETERM', 'ETIMEDOUT', 'EVENTS', 'EVENT_ACCEPTED', 'EVENT_ACCEPT_FAILED', 'EVENT_ALL', 'EVENT_BIND_FAILED', 'EVENT_CLOSED', 'EVENT_CLOSE_FAILED', 'EVENT_CONNECTED', 'EVENT_CONNECT_DELAYED', 'EVENT_CONNECT_RETRIED', 'EVENT_DISCONNECTED', 'EVENT_LISTENING', 'EVENT_MONITOR_STOPPED', 'FAIL_UNROUTABLE', 'FD', 'FORWARDER', 'Frame', 'GSSAPI', 'GSSAPI_PLAINTEXT', 'GSSAPI_PRINCIPAL', 'GSSAPI_SERVER', 'GSSAPI_SERVICE_PRINCIPAL', 'HANDSHAKE_IVL', 'HAUSNUMERO', 'HEARTBEAT_IVL', 'HEARTBEAT_TIMEOUT', 'HEARTBEAT_TTL', 'IDENTITY', 'IMMEDIATE', 'INVERT_MATCHING', 'IO_THREADS', 'IO_THREADS_DFLT', 'IPC_FILTER_GID', 'IPC_FILTER_PID', 'IPC_FILTER_UID', 'IPV4ONLY', 'IPV6', 'InterruptedSystemCall', 'LAST_ENDPOINT', 'LINGER', 'MAXMSGSIZE', 'MAX_SOCKETS', 'MAX_SOCKETS_DFLT', 'MECHANISM', 'MORE', 'MULTICAST_HOPS', 'MULTICAST_MAXTPDU', 'Message', 'MessageTracker', 'NOBLOCK', 'NULL', 'NotDone', 'PAIR', 'PLAIN', 'PLAIN_PASSWORD', 'PLAIN_SERVER', 'PLAIN_USERNAME', 'POLLERR', 'POLLIN', 'POLLITEMS_DFLT', 'POLLOUT', 'POLLPRI', 'PROBE_ROUTER', 'PUB', 'PULL', 'PUSH', 'Poller', 'QUEUE', 'RATE', 'RCVBUF', 'RCVHWM', 'RCVMORE', 'RCVTIMEO', 'RECONNECT_IVL', 'RECONNECT_IVL_MAX', 'RECOVERY_IVL', 'REP', 'REQ', 'REQ_CORRELATE', 'REQ_RELAXED', 'ROUTER', 'ROUTER_BEHAVIOR', 'ROUTER_HANDOVER', 'ROUTER_MANDATORY', 'ROUTER_RAW', 'SHARED', 'SNDBUF', 'SNDHWM', 'SNDMORE', 'SNDTIMEO', 'SOCKET_LIMIT', 'SOCKS_PROXY', 'SRCFD', 'STREAM', 'STREAMER', 'STREAM_NOTIFY', 'SUB', 'SUBSCRIBE', 'Socket', 'Stopwatch', 'TCP_ACCEPT_FILTER', 'TCP_KEEPALIVE', 'TCP_KEEPALIVE_CNT', 'TCP_KEEPALIVE_IDLE', 'TCP_KEEPALIVE_INTVL', 'TCP_MAXRT', 'THREAD_PRIORITY', 'THREAD_PRIORITY_DFLT', 'THREAD_SAFE', 'THREAD_SCHED_POLICY', 'THREAD_SCHED_POLICY_DFLT', 'TOS', 'TYPE', 'UNSUBSCRIBE', 'USE_FD', 'VERSION', 'VERSION_MAJOR', 'VERSION_MINOR', 'VERSION_PATCH', 'VMCI_BUFFER_MAX_SIZE', 'VMCI_BUFFER_MIN_SIZE', 'VMCI_BUFFER_SIZE', 'VMCI_CONNECT_TIMEOUT', 'XPUB', 'XPUB_MANUAL', 'XPUB_NODROP', 'XPUB_VERBOSE', 'XPUB_VERBOSER', 'XPUB_WELCOME_MSG', 'XREP', 'XREQ', 'XSUB', 'ZAP_DOMAIN', 'ZMQBaseError', 'ZMQBindError', 'ZMQError', 'ZMQVersionError', '_FINISHED_TRACKER', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__revision__', '__spec__', '__version__', 'attrsettr', 'bytes_sockopts', 'constants', 'context', 'ctx_opt_names', 'ctx_opts', 'error', 'frame', 'int64_sockopts', 'int_sockopts', 'poll', 'pyzmq_version', 'pyzmq_version_info', 'select', 'socket', 'stopwatch', 'submod', 'tracker', 'version', 'zmq_version', 'zmq_version_info']

pure-Python sugar wrappers for core 0MQ objects.

[zmq.sugar.constants]
['AFFINITY', 'BACKLOG', 'BLOCKY', 'CONFLATE', 'CONNECT_RID', 'CONNECT_TIMEOUT', 'CURVE', 'CURVE_PUBLICKEY', 'CURVE_SECRETKEY', 'CURVE_SERVER', 'CURVE_SERVERKEY', 'DEALER', 'DELAY_ATTACH_ON_CONNECT', 'DONTWAIT', 'DRAFT_API', 'EADDRINUSE', 'EADDRNOTAVAIL', 'EAFNOSUPPORT', 'EAGAIN', 'ECONNABORTED', 'ECONNREFUSED', 'ECONNRESET', 'EFAULT', 'EFSM', 'EHOSTUNREACH', 'EINPROGRESS', 'EINVAL', 'EMSGSIZE', 'EMTHREAD', 'ENETDOWN', 'ENETRESET', 'ENETUNREACH', 'ENOBUFS', 'ENOCOMPATPROTO', 'ENODEV', 'ENOMEM', 'ENOTCONN', 'ENOTSOCK', 'ENOTSUP', 'EPROTONOSUPPORT', 'ETERM', 'ETIMEDOUT', 'EVENTS', 'EVENT_ACCEPTED', 'EVENT_ACCEPT_FAILED', 'EVENT_ALL', 'EVENT_BIND_FAILED', 'EVENT_CLOSED', 'EVENT_CLOSE_FAILED', 'EVENT_CONNECTED', 'EVENT_CONNECT_DELAYED', 'EVENT_CONNECT_RETRIED', 'EVENT_DISCONNECTED', 'EVENT_LISTENING', 'EVENT_MONITOR_STOPPED', 'FAIL_UNROUTABLE', 'FD', 'FORWARDER', 'GSSAPI', 'GSSAPI_PLAINTEXT', 'GSSAPI_PRINCIPAL', 'GSSAPI_SERVER', 'GSSAPI_SERVICE_PRINCIPAL', 'HANDSHAKE_IVL', 'HAUSNUMERO', 'HEARTBEAT_IVL', 'HEARTBEAT_TIMEOUT', 'HEARTBEAT_TTL', 'IDENTITY', 'IMMEDIATE', 'INVERT_MATCHING', 'IO_THREADS', 'IO_THREADS_DFLT', 'IPC_FILTER_GID', 'IPC_FILTER_PID', 'IPC_FILTER_UID', 'IPV4ONLY', 'IPV6', 'LAST_ENDPOINT', 'LINGER', 'MAXMSGSIZE', 'MAX_SOCKETS', 'MAX_SOCKETS_DFLT', 'MECHANISM', 'MORE', 'MULTICAST_HOPS', 'MULTICAST_MAXTPDU', 'NOBLOCK', 'NULL', 'PAIR', 'PLAIN', 'PLAIN_PASSWORD', 'PLAIN_SERVER', 'PLAIN_USERNAME', 'POLLERR', 'POLLIN', 'POLLITEMS_DFLT', 'POLLOUT', 'POLLPRI', 'PROBE_ROUTER', 'PUB', 'PULL', 'PUSH', 'QUEUE', 'RATE', 'RCVBUF', 'RCVHWM', 'RCVMORE', 'RCVTIMEO', 'RECONNECT_IVL', 'RECONNECT_IVL_MAX', 'RECOVERY_IVL', 'REP', 'REQ', 'REQ_CORRELATE', 'REQ_RELAXED', 'ROUTER', 'ROUTER_BEHAVIOR', 'ROUTER_HANDOVER', 'ROUTER_MANDATORY', 'ROUTER_RAW', 'SHARED', 'SNDBUF', 'SNDHWM', 'SNDMORE', 'SNDTIMEO', 'SOCKET_LIMIT', 'SOCKS_PROXY', 'SRCFD', 'STREAM', 'STREAMER', 'STREAM_NOTIFY', 'SUB', 'SUBSCRIBE', 'TCP_ACCEPT_FILTER', 'TCP_KEEPALIVE', 'TCP_KEEPALIVE_CNT', 'TCP_KEEPALIVE_IDLE', 'TCP_KEEPALIVE_INTVL', 'TCP_MAXRT', 'THREAD_PRIORITY', 'THREAD_PRIORITY_DFLT', 'THREAD_SAFE', 'THREAD_SCHED_POLICY', 'THREAD_SCHED_POLICY_DFLT', 'TOS', 'TYPE', 'UNSUBSCRIBE', 'USE_FD', 'VERSION', 'VERSION_MAJOR', 'VERSION_MINOR', 'VERSION_PATCH', 'VMCI_BUFFER_MAX_SIZE', 'VMCI_BUFFER_MIN_SIZE', 'VMCI_BUFFER_SIZE', 'VMCI_CONNECT_TIMEOUT', 'XPUB', 'XPUB_MANUAL', 'XPUB_NODROP', 'XPUB_VERBOSE', 'XPUB_VERBOSER', 'XPUB_WELCOME_MSG', 'XREP', 'XREQ', 'XSUB', 'ZAP_DOMAIN', '_UNDEFINED', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_add_constant', 'aliases', 'base_names', 'bytes_sockopt_names', 'bytes_sockopts', 'constants', 'ctx_opt_names', 'ctx_opts', 'fd_sockopt_names', 'fd_sockopts', 'found', 'group', 'has', 'int64_sockopt_names', 'int64_sockopts', 'int_sockopt_names', 'int_sockopts', 'msg_opt_names', 'msg_opts', 'name', 'switched_sockopt_names', 'undefined', 'value']

0MQ Constants.

[zmq.sugar.context]
['AttributeSetter', 'Context', 'ContextBase', 'ENOTSUP', 'Lock', 'Socket', 'ZMQError', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_exiting', '_notice_atexit', 'atexit', 'constants', 'ctx_opt_names']

Python bindings for 0MQ.

[atexit]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_clear', '_ncallbacks', '_run_exitfuncs', 'register', 'unregister']

allow programmer to define multiple exit functions to be executedupon normal program termination.

Two public functions, register and unregister, are defined.


[zmq.sugar.attrsettr]
['AttributeSetter', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'constants']

Mixin for mapping set/getattr to self.set/get

[zmq.sugar.socket]
['AttributeSetter', 'DEFAULT_PROTOCOL', 'ENOTSUP', 'POLLIN', 'Poller', 'SNDMORE', 'Socket', 'SocketBase', 'ZMQBindError', 'ZMQError', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'basestring', 'bytes', 'bytes_sockopt_names', 'cPickle', 'constants', 'errno', 'fd_sockopt_names', 'int64_sockopt_names', 'int_sockopt_names', 'jsonapi', 'pickle', 'random', 'sys', 'unicode', 'warnings', 'zmq']

0MQ Socket pure Python methods.

[random]
['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', '_BuiltinMethodType', '_MethodType', '_Sequence', '_Set', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_acos', '_bisect', '_ceil', '_cos', '_e', '_exp', '_inst', '_itertools', '_log', '_os', '_pi', '_random', '_sha512', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'choices', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'lognormvariate', 'normalvariate', 'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate']

Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           pick weighted random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.



[hashlib]
['__all__', '__builtin_constructor_cache', '__builtins__', '__cached__', '__doc__', '__file__', '__get_builtin_constructor', '__loader__', '__name__', '__package__', '__spec__', '_hashlib', 'algorithms_available', 'algorithms_guaranteed', 'blake2b', 'blake2s', 'md5', 'new', 'pbkdf2_hmac', 'sha1', 'sha224', 'sha256', 'sha384', 'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512', 'sha512', 'shake_128', 'shake_256']

hashlib module - A common interface to many hash functions.

new(name, data=b'', **kwargs) - returns a new hash object implementing the
                                given hash function; initializing the hash
                                using the given binary data.

Named constructor functions are also available, these are faster
than using new(name):

md5(), sha1(), sha224(), sha256(), sha384(), sha512(), blake2b(), blake2s(),
sha3_224, sha3_256, sha3_384, sha3_512, shake_128, and shake_256.

More algorithms may be available on your platform but the above are guaranteed
to exist.  See the algorithms_guaranteed and algorithms_available attributes
to find out what algorithm names can be passed to new().

NOTE: If you want the adler32 or crc32 hash functions they are available in
the zlib module.

Choose your hash function wisely.  Some have known collision weaknesses.
sha384 and sha512 will be slow on 32 bit platforms.

Hash objects have these methods:
 - update(data): Update the hash object with the bytes in data. Repeated calls
                 are equivalent to a single call with the concatenation of all
                 the arguments.
 - digest():     Return the digest of the bytes passed to the update() method
                 so far as a bytes object.
 - hexdigest():  Like digest() except the digest is returned as a string
                 of double length, containing only hexadecimal digits.
 - copy():       Return a copy (clone) of the hash object. This can be used to
                 efficiently compute the digests of datas that share a common
                 initial substring.

For example, to obtain the digest of the byte string 'Nobody inspects the
spammish repetition':

    >>> import hashlib
    >>> m = hashlib.md5()
    >>> m.update(b"Nobody inspects")
    >>> m.update(b" the spammish repetition")
    >>> m.digest()
    b'\xbbd\x9c\x83\xdd\x1e\xa5\xc9\xd9\xde\xc9\xa1\x8d\xf0\xff\xe9'

More condensed:

    >>> hashlib.sha224(b"Nobody inspects the spammish repetition").hexdigest()
    'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'



[_sha3]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'implementation', 'keccakopt', 'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512', 'shake_128', 'shake_256']

None

[bisect]
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'bisect', 'bisect_left', 'bisect_right', 'insort', 'insort_left', 'insort_right']

Bisection algorithms.

[_random]
['Random', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

Module implements the Mersenne Twister random number generator.

[zmq.sugar.poll]
['POLLERR', 'POLLIN', 'POLLOUT', 'Poller', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'select', 'zmq', 'zmq_poll']

0MQ polling related functions and classes.

[zmq.utils.jsonapi]
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'bytes', 'dumps', 'jsonmod', 'loads', 'mod', 'priority', 'unicode']

Priority based json library imports.

Always serializes to bytes instead of unicode for zeromq compatibility
on Python 2 and 3.

Use ``jsonapi.loads()`` and ``jsonapi.dumps()`` for guaranteed symmetry.

Priority: ``simplejson`` > ``jsonlib2`` > stdlib ``json``

``jsonapi.loads/dumps`` provide kwarg-compatibility with stdlib json.

``jsonapi.jsonmod`` will be the module of the actual underlying implementation.


[simplejson]
['Decimal', 'JSONDecodeError', 'JSONDecoder', 'JSONEncoder', 'JSONEncoderForHTML', 'OrderedDict', 'RawJSON', '__all__', '__author__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_default_decoder', '_default_encoder', '_import_OrderedDict', '_import_c_make_encoder', '_speedups', '_toggle_speedups', 'absolute_import', 'compat', 'decoder', 'dump', 'dumps', 'encoder', 'errors', 'load', 'loads', 'raw_json', 'scanner', 'simple_first']

JSON (JavaScript Object Notation) <http://json.org> is a subset of
JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data
interchange format.

:mod:`simplejson` exposes an API familiar to users of the standard library
:mod:`marshal` and :mod:`pickle` modules. It is the externally maintained
version of the :mod:`json` library contained in Python 2.6, but maintains
compatibility back to Python 2.5 and (currently) has significant performance
advantages, even without using the optional C extension for speedups.

Encoding basic Python object hierarchies::

    >>> import simplejson as json
    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
    '["foo", {"bar": ["baz", null, 1.0, 2]}]'
    >>> print(json.dumps("\"foo\bar"))
    "\"foo\bar"
    >>> print(json.dumps(u'\u1234'))
    "\u1234"
    >>> print(json.dumps('\\'))
    "\\"
    >>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
    {"a": 0, "b": 0, "c": 0}
    >>> from simplejson.compat import StringIO
    >>> io = StringIO()
    >>> json.dump(['streaming API'], io)
    >>> io.getvalue()
    '["streaming API"]'

Compact encoding::

    >>> import simplejson as json
    >>> obj = [1,2,3,{'4': 5, '6': 7}]
    >>> json.dumps(obj, separators=(',',':'), sort_keys=True)
    '[1,2,3,{"4":5,"6":7}]'

Pretty printing::

    >>> import simplejson as json
    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent='    '))
    {
        "4": 5,
        "6": 7
    }

Decoding JSON::

    >>> import simplejson as json
    >>> obj = [u'foo', {u'bar': [u'baz', None, 1.0, 2]}]
    >>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]') == obj
    True
    >>> json.loads('"\\"foo\\bar"') == u'"foo\x08ar'
    True
    >>> from simplejson.compat import StringIO
    >>> io = StringIO('["streaming API"]')
    >>> json.load(io)[0] == 'streaming API'
    True

Specializing JSON object decoding::

    >>> import simplejson as json
    >>> def as_complex(dct):
    ...     if '__complex__' in dct:
    ...         return complex(dct['real'], dct['imag'])
    ...     return dct
    ...
    >>> json.loads('{"__complex__": true, "real": 1, "imag": 2}',
    ...     object_hook=as_complex)
    (1+2j)
    >>> from decimal import Decimal
    >>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')
    True

Specializing JSON object encoding::

    >>> import simplejson as json
    >>> def encode_complex(obj):
    ...     if isinstance(obj, complex):
    ...         return [obj.real, obj.imag]
    ...     raise TypeError('Object of type %s is not JSON serializable' %
    ...                     obj.__class__.__name__)
    ...
    >>> json.dumps(2 + 1j, default=encode_complex)
    '[2.0, 1.0]'
    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)
    '[2.0, 1.0]'
    >>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))
    '[2.0, 1.0]'

Using simplejson.tool from the shell to validate and pretty-print::

    $ echo '{"json":"obj"}' | python -m simplejson.tool
    {
        "json": "obj"
    }
    $ echo '{ 1.2:3.4}' | python -m simplejson.tool
    Expecting property name: line 1 column 3 (char 2)

Parsing multiple documents serialized as JSON lines (newline-delimited JSON)::

    >>> import simplejson as json
    >>> def loads_lines(docs):
    ...     for doc in docs.splitlines():
    ...         yield json.loads(doc)
    ...
    >>> sum(doc["count"] for doc in loads_lines('{"count":1}\n{"count":2}\n{"count":3}\n'))
    6

Serializing multiple objects to JSON lines (newline-delimited JSON)::

    >>> import simplejson as json
    >>> def dumps_lines(objs):
    ...     for obj in objs:
    ...         yield json.dumps(obj, separators=(',',':')) + '\n'
    ...
    >>> ''.join(dumps_lines([{'count': 1}, {'count': 2}, {'count': 3}]))
    '{"count":1}\n{"count":2}\n{"count":3}\n'



[__future__]
['CO_FUTURE_ABSOLUTE_IMPORT', 'CO_FUTURE_ANNOTATIONS', 'CO_FUTURE_BARRY_AS_BDFL', 'CO_FUTURE_DIVISION', 'CO_FUTURE_GENERATOR_STOP', 'CO_FUTURE_PRINT_FUNCTION', 'CO_FUTURE_UNICODE_LITERALS', 'CO_FUTURE_WITH_STATEMENT', 'CO_GENERATOR_ALLOWED', 'CO_NESTED', '_Feature', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'absolute_import', 'all_feature_names', 'annotations', 'barry_as_FLUFL', 'division', 'generator_stop', 'generators', 'nested_scopes', 'print_function', 'unicode_literals', 'with_statement']

Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = "_Feature(" OptionalRelease "," MandatoryRelease ","
                              CompilerFlag ")"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # "alpha", "beta", "candidate" or "final"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.


[decimal]
['BasicContext', 'Clamped', 'Context', 'ConversionSyntax', 'Decimal', 'DecimalException', 'DecimalTuple', 'DefaultContext', 'DivisionByZero', 'DivisionImpossible', 'DivisionUndefined', 'ExtendedContext', 'FloatOperation', 'HAVE_THREADS', 'Inexact', 'InvalidContext', 'InvalidOperation', 'MAX_EMAX', 'MAX_PREC', 'MIN_EMIN', 'MIN_ETINY', 'Overflow', 'ROUND_05UP', 'ROUND_CEILING', 'ROUND_DOWN', 'ROUND_FLOOR', 'ROUND_HALF_DOWN', 'ROUND_HALF_EVEN', 'ROUND_HALF_UP', 'ROUND_UP', 'Rounded', 'Subnormal', 'Underflow', '__builtins__', '__cached__', '__doc__', '__file__', '__libmpdec_version__', '__loader__', '__name__', '__package__', '__spec__', '__version__', 'getcontext', 'localcontext', 'setcontext']

C decimal arithmetic module

[simplejson.errors]
['JSONDecodeError', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'errmsg', 'linecol']

Error classes used by simplejson


[simplejson.raw_json]
['RawJSON', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']

Implementation of RawJSON


[simplejson.decoder]
['BACKSLASH', 'DEFAULT_ENCODING', 'FLAGS', 'JSONArray', 'JSONDecodeError', 'JSONDecoder', 'JSONObject', 'NaN', 'NegInf', 'PY3', 'PosInf', 'STRINGCHUNK', 'WHITESPACE', 'WHITESPACE_STR', '_CONSTANTS', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_floatconstants', '_import_c_scanstring', 'absolute_import', 'c_scanstring', 'make_scanner', 'py_scanstring', 're', 'scanstring', 'struct', 'sys', 'unichr']

Implementation of JSONDecoder


[simplejson.compat]
['BytesIO', 'PY3', 'StringIO', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'b', 'binary_type', 'integer_types', 'long_type', 'reload_module', 'string_types', 'sys', 'text_type', 'unichr']

Python 3 compatibility shims


[simplejson.scanner]
['JSONDecodeError', 'NUMBER_RE', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_import_c_make_scanner', 'c_make_scanner', 'make_scanner', 'py_make_scanner', 're']

JSON token scanner


[simplejson._speedups]
['__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'encode_basestring_ascii', 'make_encoder', 'make_scanner', 'scanstring']

simplejson speedups


[simplejson.encoder]
['ESCAPE', 'ESCAPE_ASCII', 'ESCAPE_DCT', 'FLOAT_REPR', 'HAS_UTF8', 'JSONEncoder', 'JSONEncoderForHTML', 'PY3', 'PosInf', 'RawJSON', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_import_speedups', '_make_iterencode', 'absolute_import', 'binary_type', 'c_encode_basestring_ascii', 'c_make_encoder', 'decimal', 'encode_basestring', 'encode_basestring_ascii', 'i', 'integer_types', 'itemgetter', 'py_encode_basestring_ascii', 're', 'string_types', 'text_type', 'unichr']

Implementation of JSONEncoder


[pickle]
['ADDITEMS', 'APPEND', 'APPENDS', 'BINBYTES', 'BINBYTES8', 'BINFLOAT', 'BINGET', 'BININT', 'BININT1', 'BININT2', 'BINPERSID', 'BINPUT', 'BINSTRING', 'BINUNICODE', 'BINUNICODE8', 'BUILD', 'DEFAULT_PROTOCOL', 'DICT', 'DUP', 'EMPTY_DICT', 'EMPTY_LIST', 'EMPTY_SET', 'EMPTY_TUPLE', 'EXT1', 'EXT2', 'EXT4', 'FALSE', 'FLOAT', 'FRAME', 'FROZENSET', 'FunctionType', 'GET', 'GLOBAL', 'HIGHEST_PROTOCOL', 'INST', 'INT', 'LIST', 'LONG', 'LONG1', 'LONG4', 'LONG_BINGET', 'LONG_BINPUT', 'MARK', 'MEMOIZE', 'NEWFALSE', 'NEWOBJ', 'NEWOBJ_EX', 'NEWTRUE', 'NONE', 'OBJ', 'PERSID', 'POP', 'POP_MARK', 'PROTO', 'PUT', 'PickleError', 'Pickler', 'PicklingError', 'PyStringMap', 'REDUCE', 'SETITEM', 'SETITEMS', 'SHORT_BINBYTES', 'SHORT_BINSTRING', 'SHORT_BINUNICODE', 'STACK_GLOBAL', 'STOP', 'STRING', 'TRUE', 'TUPLE', 'TUPLE1', 'TUPLE2', 'TUPLE3', 'UNICODE', 'Unpickler', 'UnpicklingError', '_Framer', '_Pickler', '_Stop', '_Unframer', '_Unpickler', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_compat_pickle', '_dump', '_dumps', '_extension_cache', '_extension_registry', '_getattribute', '_inverted_registry', '_load', '_loads', '_test', '_tuplesize2code', 'bytes_types', 'codecs', 'compatible_formats', 'decode_long', 'dispatch_table', 'dump', 'dumps', 'encode_long', 'format_version', 'io', 'islice', 'load', 'loads', 'maxsize', 'pack', 'partial', 're', 'sys', 'unpack', 'whichmodule']

Create portable serialized representations of Python objects.

See module copyreg for a mechanism for registering custom picklers.
See module pickletools source for extensive comments.

Classes:

    Pickler
    Unpickler

Functions:

    dump(object, file)
    dumps(object) -> string
    load(file) -> object
    loads(string) -> object

Misc variables:

    __version__
    format_version
    compatible_formats



[_compat_pickle]
['IMPORT_MAPPING', 'MULTIPROCESSING_EXCEPTIONS', 'NAME_MAPPING', 'PYTHON2_EXCEPTIONS', 'PYTHON3_IMPORTERROR_EXCEPTIONS', 'PYTHON3_OSERROR_EXCEPTIONS', 'REVERSE_IMPORT_MAPPING', 'REVERSE_NAME_MAPPING', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'excname']

None

[_pickle]
['PickleError', 'Pickler', 'PicklingError', 'Unpickler', 'UnpicklingError', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'dump', 'dumps', 'load', 'loads']

Optimized C implementation for the Python pickle module.

[zmq.sugar.frame]
['AttributeSetter', 'Frame', 'FrameBase', 'Message', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_draft', 'zmq']

0MQ Frame pure Python methods.

[zmq.sugar.tracker]
['Event', 'Frame', 'MessageTracker', 'NotDone', '_FINISHED_TRACKER', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'time']

Tracker for zero-copy messages with 0MQ.

[zmq.sugar.version]
['VERSION_EXTRA', 'VERSION_MAJOR', 'VERSION_MINOR', 'VERSION_PATCH', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__revision__', '__spec__', '__version__', 'pyzmq_version', 'pyzmq_version_info', 'version_info', 'zmq_version', 'zmq_version_info']

PyZMQ and 0MQ version functions.

[zmq.sugar.stopwatch]
['Stopwatch', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']

Deprecated Stopwatch implementation

[_multibytecodec]
['MultibyteIncrementalDecoder', 'MultibyteIncrementalEncoder', 'MultibyteStreamReader', 'MultibyteStreamWriter', '__create_codec', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

None

[_multiprocessing]
['SemLock', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'flags', 'sem_unlink']

None

[_queue]
['Empty', 'SimpleQueue', '__doc__', '__loader__', '__name__', '__package__', '__spec__']

C implementation of the Python queue module.
This module is an implementation detail, please do not use it directly.

[_sha1]
['SHA1Type', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'sha1']

None

[_sha256]
['SHA224Type', 'SHA256Type', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'sha224', 'sha256']

None

[_sha512]
['SHA384Type', 'SHA512Type', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'sha384', 'sha512']

None

[_socket]
['AF_APPLETALK', 'AF_DECnet', 'AF_INET', 'AF_INET6', 'AF_IPX', 'AF_LINK', 'AF_ROUTE', 'AF_SNA', 'AF_SYSTEM', 'AF_UNIX', 'AF_UNSPEC', 'AI_ADDRCONFIG', 'AI_ALL', 'AI_CANONNAME', 'AI_DEFAULT', 'AI_MASK', 'AI_NUMERICHOST', 'AI_NUMERICSERV', 'AI_PASSIVE', 'AI_V4MAPPED', 'AI_V4MAPPED_CFG', 'CAPI', 'CMSG_LEN', 'CMSG_SPACE', 'EAI_ADDRFAMILY', 'EAI_AGAIN', 'EAI_BADFLAGS', 'EAI_BADHINTS', 'EAI_FAIL', 'EAI_FAMILY', 'EAI_MAX', 'EAI_MEMORY', 'EAI_NODATA', 'EAI_NONAME', 'EAI_OVERFLOW', 'EAI_PROTOCOL', 'EAI_SERVICE', 'EAI_SOCKTYPE', 'EAI_SYSTEM', 'INADDR_ALLHOSTS_GROUP', 'INADDR_ANY', 'INADDR_BROADCAST', 'INADDR_LOOPBACK', 'INADDR_MAX_LOCAL_GROUP', 'INADDR_NONE', 'INADDR_UNSPEC_GROUP', 'IPPORT_RESERVED', 'IPPORT_USERRESERVED', 'IPPROTO_AH', 'IPPROTO_DSTOPTS', 'IPPROTO_EGP', 'IPPROTO_EON', 'IPPROTO_ESP', 'IPPROTO_FRAGMENT', 'IPPROTO_GGP', 'IPPROTO_GRE', 'IPPROTO_HELLO', 'IPPROTO_HOPOPTS', 'IPPROTO_ICMP', 'IPPROTO_ICMPV6', 'IPPROTO_IDP', 'IPPROTO_IGMP', 'IPPROTO_IP', 'IPPROTO_IPCOMP', 'IPPROTO_IPIP', 'IPPROTO_IPV4', 'IPPROTO_IPV6', 'IPPROTO_MAX', 'IPPROTO_ND', 'IPPROTO_NONE', 'IPPROTO_PIM', 'IPPROTO_PUP', 'IPPROTO_RAW', 'IPPROTO_ROUTING', 'IPPROTO_RSVP', 'IPPROTO_SCTP', 'IPPROTO_TCP', 'IPPROTO_TP', 'IPPROTO_UDP', 'IPPROTO_XTP', 'IPV6_CHECKSUM', 'IPV6_JOIN_GROUP', 'IPV6_LEAVE_GROUP', 'IPV6_MULTICAST_HOPS', 'IPV6_MULTICAST_IF', 'IPV6_MULTICAST_LOOP', 'IPV6_RECVTCLASS', 'IPV6_RTHDR_TYPE_0', 'IPV6_TCLASS', 'IPV6_UNICAST_HOPS', 'IPV6_V6ONLY', 'IP_ADD_MEMBERSHIP', 'IP_DEFAULT_MULTICAST_LOOP', 'IP_DEFAULT_MULTICAST_TTL', 'IP_DROP_MEMBERSHIP', 'IP_HDRINCL', 'IP_MAX_MEMBERSHIPS', 'IP_MULTICAST_IF', 'IP_MULTICAST_LOOP', 'IP_MULTICAST_TTL', 'IP_OPTIONS', 'IP_RECVDSTADDR', 'IP_RECVOPTS', 'IP_RECVRETOPTS', 'IP_RETOPTS', 'IP_TOS', 'IP_TTL', 'LOCAL_PEERCRED', 'MSG_CTRUNC', 'MSG_DONTROUTE', 'MSG_DONTWAIT', 'MSG_EOF', 'MSG_EOR', 'MSG_NOSIGNAL', 'MSG_OOB', 'MSG_PEEK', 'MSG_TRUNC', 'MSG_WAITALL', 'NI_DGRAM', 'NI_MAXHOST', 'NI_MAXSERV', 'NI_NAMEREQD', 'NI_NOFQDN', 'NI_NUMERICHOST', 'NI_NUMERICSERV', 'PF_SYSTEM', 'SCM_CREDS', 'SCM_RIGHTS', 'SHUT_RD', 'SHUT_RDWR', 'SHUT_WR', 'SOCK_DGRAM', 'SOCK_RAW', 'SOCK_RDM', 'SOCK_SEQPACKET', 'SOCK_STREAM', 'SOL_IP', 'SOL_SOCKET', 'SOL_TCP', 'SOL_UDP', 'SOMAXCONN', 'SO_ACCEPTCONN', 'SO_BROADCAST', 'SO_DEBUG', 'SO_DONTROUTE', 'SO_ERROR', 'SO_KEEPALIVE', 'SO_LINGER', 'SO_OOBINLINE', 'SO_RCVBUF', 'SO_RCVLOWAT', 'SO_RCVTIMEO', 'SO_REUSEADDR', 'SO_REUSEPORT', 'SO_SNDBUF', 'SO_SNDLOWAT', 'SO_SNDTIMEO', 'SO_TYPE', 'SO_USELOOPBACK', 'SocketType', 'TCP_FASTOPEN', 'TCP_KEEPCNT', 'TCP_KEEPINTVL', 'TCP_MAXSEG', 'TCP_NODELAY', 'TCP_NOTSENT_LOWAT', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'close', 'dup', 'error', 'gaierror', 'getaddrinfo', 'getdefaulttimeout', 'gethostbyaddr', 'gethostbyname', 'gethostbyname_ex', 'gethostname', 'getnameinfo', 'getprotobyname', 'getservbyname', 'getservbyport', 'has_ipv6', 'herror', 'htonl', 'htons', 'if_indextoname', 'if_nameindex', 'if_nametoindex', 'inet_aton', 'inet_ntoa', 'inet_ntop', 'inet_pton', 'ntohl', 'ntohs', 'setdefaulttimeout', 'sethostname', 'socket', 'socketpair', 'timeout']

Implementation module for socket operations.

See the socket module for documentation.

[_sqlite3]
['Cache', 'Connection', 'Cursor', 'DataError', 'DatabaseError', 'Error', 'IntegrityError', 'InterfaceError', 'InternalError', 'NotSupportedError', 'OperationalError', 'OptimizedUnicode', 'PARSE_COLNAMES', 'PARSE_DECLTYPES', 'PrepareProtocol', 'ProgrammingError', 'Row', 'SQLITE_ALTER_TABLE', 'SQLITE_ANALYZE', 'SQLITE_ATTACH', 'SQLITE_CREATE_INDEX', 'SQLITE_CREATE_TABLE', 'SQLITE_CREATE_TEMP_INDEX', 'SQLITE_CREATE_TEMP_TABLE', 'SQLITE_CREATE_TEMP_TRIGGER', 'SQLITE_CREATE_TEMP_VIEW', 'SQLITE_CREATE_TRIGGER', 'SQLITE_CREATE_VIEW', 'SQLITE_CREATE_VTABLE', 'SQLITE_DELETE', 'SQLITE_DENY', 'SQLITE_DETACH', 'SQLITE_DONE', 'SQLITE_DROP_INDEX', 'SQLITE_DROP_TABLE', 'SQLITE_DROP_TEMP_INDEX', 'SQLITE_DROP_TEMP_TABLE', 'SQLITE_DROP_TEMP_TRIGGER', 'SQLITE_DROP_TEMP_VIEW', 'SQLITE_DROP_TRIGGER', 'SQLITE_DROP_VIEW', 'SQLITE_DROP_VTABLE', 'SQLITE_FUNCTION', 'SQLITE_IGNORE', 'SQLITE_INSERT', 'SQLITE_OK', 'SQLITE_PRAGMA', 'SQLITE_READ', 'SQLITE_RECURSIVE', 'SQLITE_REINDEX', 'SQLITE_SAVEPOINT', 'SQLITE_SELECT', 'SQLITE_TRANSACTION', 'SQLITE_UPDATE', 'Statement', 'Warning', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'adapt', 'adapters', 'complete_statement', 'connect', 'converters', 'enable_callback_tracebacks', 'enable_shared_cache', 'register_adapter', 'register_converter', 'sqlite_version', 'version']

None

[_ssl]
['ALERT_DESCRIPTION_ACCESS_DENIED', 'ALERT_DESCRIPTION_BAD_CERTIFICATE', 'ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE', 'ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE', 'ALERT_DESCRIPTION_BAD_RECORD_MAC', 'ALERT_DESCRIPTION_CERTIFICATE_EXPIRED', 'ALERT_DESCRIPTION_CERTIFICATE_REVOKED', 'ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN', 'ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE', 'ALERT_DESCRIPTION_CLOSE_NOTIFY', 'ALERT_DESCRIPTION_DECODE_ERROR', 'ALERT_DESCRIPTION_DECOMPRESSION_FAILURE', 'ALERT_DESCRIPTION_DECRYPT_ERROR', 'ALERT_DESCRIPTION_HANDSHAKE_FAILURE', 'ALERT_DESCRIPTION_ILLEGAL_PARAMETER', 'ALERT_DESCRIPTION_INSUFFICIENT_SECURITY', 'ALERT_DESCRIPTION_INTERNAL_ERROR', 'ALERT_DESCRIPTION_NO_RENEGOTIATION', 'ALERT_DESCRIPTION_PROTOCOL_VERSION', 'ALERT_DESCRIPTION_RECORD_OVERFLOW', 'ALERT_DESCRIPTION_UNEXPECTED_MESSAGE', 'ALERT_DESCRIPTION_UNKNOWN_CA', 'ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY', 'ALERT_DESCRIPTION_UNRECOGNIZED_NAME', 'ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE', 'ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION', 'ALERT_DESCRIPTION_USER_CANCELLED', 'CERT_NONE', 'CERT_OPTIONAL', 'CERT_REQUIRED', 'HAS_ALPN', 'HAS_ECDH', 'HAS_NPN', 'HAS_SNI', 'HAS_SSLv2', 'HAS_SSLv3', 'HAS_TLS_UNIQUE', 'HAS_TLSv1', 'HAS_TLSv1_1', 'HAS_TLSv1_2', 'HAS_TLSv1_3', 'HOSTFLAG_ALWAYS_CHECK_SUBJECT', 'HOSTFLAG_MULTI_LABEL_WILDCARDS', 'HOSTFLAG_NO_PARTIAL_WILDCARDS', 'HOSTFLAG_NO_WILDCARDS', 'HOSTFLAG_SINGLE_LABEL_SUBDOMAINS', 'MemoryBIO', 'OPENSSL_VERSION', 'OPENSSL_VERSION_INFO', 'OPENSSL_VERSION_NUMBER', 'OP_ALL', 'OP_CIPHER_SERVER_PREFERENCE', 'OP_NO_COMPRESSION', 'OP_NO_SSLv2', 'OP_NO_SSLv3', 'OP_NO_TICKET', 'OP_NO_TLSv1', 'OP_NO_TLSv1_1', 'OP_NO_TLSv1_2', 'OP_NO_TLSv1_3', 'OP_SINGLE_DH_USE', 'OP_SINGLE_ECDH_USE', 'PROTOCOL_SSLv23', 'PROTOCOL_SSLv3', 'PROTOCOL_TLS', 'PROTOCOL_TLS_CLIENT', 'PROTOCOL_TLS_SERVER', 'PROTOCOL_TLSv1', 'PROTOCOL_TLSv1_1', 'PROTOCOL_TLSv1_2', 'PROTO_MAXIMUM_SUPPORTED', 'PROTO_MINIMUM_SUPPORTED', 'PROTO_SSLv3', 'PROTO_TLSv1', 'PROTO_TLSv1_1', 'PROTO_TLSv1_2', 'PROTO_TLSv1_3', 'RAND_add', 'RAND_bytes', 'RAND_egd', 'RAND_pseudo_bytes', 'RAND_status', 'SSLCertVerificationError', 'SSLEOFError', 'SSLError', 'SSLSession', 'SSLSyscallError', 'SSLWantReadError', 'SSLWantWriteError', 'SSLZeroReturnError', 'SSL_ERROR_EOF', 'SSL_ERROR_INVALID_ERROR_CODE', 'SSL_ERROR_SSL', 'SSL_ERROR_SYSCALL', 'SSL_ERROR_WANT_CONNECT', 'SSL_ERROR_WANT_READ', 'SSL_ERROR_WANT_WRITE', 'SSL_ERROR_WANT_X509_LOOKUP', 'SSL_ERROR_ZERO_RETURN', 'VERIFY_CRL_CHECK_CHAIN', 'VERIFY_CRL_CHECK_LEAF', 'VERIFY_DEFAULT', 'VERIFY_X509_STRICT', 'VERIFY_X509_TRUSTED_FIRST', '_DEFAULT_CIPHERS', '_OPENSSL_API_VERSION', '_SSLContext', '_SSLSocket', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_test_decode_cert', 'err_codes_to_names', 'err_names_to_codes', 'get_default_verify_paths', 'lib_codes_to_names', 'nid2obj', 'txt2obj']

Implementation module for SSL socket operations.  See the socket module
for documentation.

[_string]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'formatter_field_name_split', 'formatter_parser']

string helper module

[_symtable]
['CELL', 'DEF_ANNOT', 'DEF_BOUND', 'DEF_FREE', 'DEF_FREE_CLASS', 'DEF_GLOBAL', 'DEF_IMPORT', 'DEF_LOCAL', 'DEF_PARAM', 'FREE', 'GLOBAL_EXPLICIT', 'GLOBAL_IMPLICIT', 'LOCAL', 'SCOPE_MASK', 'SCOPE_OFF', 'TYPE_CLASS', 'TYPE_FUNCTION', 'TYPE_MODULE', 'USE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'symtable']

None

[_testbuffer]
['ND_FORTRAN', 'ND_GETBUF_FAIL', 'ND_GETBUF_UNDEFINED', 'ND_MAX_NDIM', 'ND_PIL', 'ND_REDIRECT', 'ND_SCALAR', 'ND_VAREXPORT', 'ND_WRITABLE', 'PyBUF_ANY_CONTIGUOUS', 'PyBUF_CONTIG', 'PyBUF_CONTIG_RO', 'PyBUF_C_CONTIGUOUS', 'PyBUF_FORMAT', 'PyBUF_FULL', 'PyBUF_FULL_RO', 'PyBUF_F_CONTIGUOUS', 'PyBUF_INDIRECT', 'PyBUF_ND', 'PyBUF_READ', 'PyBUF_RECORDS', 'PyBUF_RECORDS_RO', 'PyBUF_SIMPLE', 'PyBUF_STRIDED', 'PyBUF_STRIDED_RO', 'PyBUF_STRIDES', 'PyBUF_WRITABLE', 'PyBUF_WRITE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'cmp_contig', 'get_contiguous', 'get_pointer', 'get_sizeof_void_p', 'is_contiguous', 'ndarray', 'py_buffer_to_contiguous', 'slice_indices', 'staticarray']

None

[_testcapi]
['CHAR_MAX', 'CHAR_MIN', 'DBL_MAX', 'DBL_MIN', 'FLT_MAX', 'FLT_MIN', 'Generic', 'GenericAlias', 'INT_MAX', 'INT_MIN', 'LLONG_MAX', 'LLONG_MIN', 'LONG_MAX', 'LONG_MIN', 'PY_SSIZE_T_MAX', 'PY_SSIZE_T_MIN', 'PyTime_AsMicroseconds', 'PyTime_AsMilliseconds', 'PyTime_AsSecondsDouble', 'PyTime_AsTimespec', 'PyTime_AsTimeval', 'PyTime_FromSeconds', 'PyTime_FromSecondsObject', 'RecursingInfinitelyError', 'SHRT_MAX', 'SHRT_MIN', 'SIZEOF_PYGC_HEAD', 'SIZEOF_TIME_T', 'UCHAR_MAX', 'UINT_MAX', 'ULLONG_MAX', 'ULONG_MAX', 'USHRT_MAX', 'WITH_PYMALLOC', 'W_STOPCODE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_pending_threadfunc', '_test_structmembersType', '_test_thread_state', 'argparsing', 'awaitType', 'call_in_temporary_c_thread', 'code_newempty', 'codec_incrementaldecoder', 'codec_incrementalencoder', 'crash_no_current_thread', 'create_cfunction', 'datetime_check_date', 'datetime_check_datetime', 'datetime_check_delta', 'datetime_check_time', 'datetime_check_tzinfo', 'dict_get_version', 'dict_getitem_knownhash', 'dict_hassplittable', 'docstring_empty', 'docstring_no_signature', 'docstring_with_invalid_signature', 'docstring_with_invalid_signature2', 'docstring_with_signature', 'docstring_with_signature_and_extra_newlines', 'docstring_with_signature_but_no_doc', 'docstring_with_signature_with_defaults', 'error', 'exception_print', 'get_args', 'get_kwargs', 'get_mapping_items', 'get_mapping_keys', 'get_mapping_values', 'get_recursion_depth', 'get_timezone_utc_capi', 'get_timezones_offset_zero', 'getargs_B', 'getargs_C', 'getargs_D', 'getargs_H', 'getargs_I', 'getargs_K', 'getargs_L', 'getargs_S', 'getargs_U', 'getargs_Y', 'getargs_Z', 'getargs_Z_hash', 'getargs_b', 'getargs_c', 'getargs_d', 'getargs_es', 'getargs_es_hash', 'getargs_et', 'getargs_et_hash', 'getargs_f', 'getargs_h', 'getargs_i', 'getargs_k', 'getargs_keyword_only', 'getargs_keywords', 'getargs_l', 'getargs_n', 'getargs_p', 'getargs_positional_only_and_keywords', 'getargs_s', 'getargs_s_hash', 'getargs_s_star', 'getargs_tuple', 'getargs_u', 'getargs_u_hash', 'getargs_w_star', 'getargs_y', 'getargs_y_hash', 'getargs_y_star', 'getargs_z', 'getargs_z_hash', 'getargs_z_star', 'getbuffer_with_null_view', 'hamt', 'instancemethod', 'make_exception_with_doc', 'make_memoryview_from_NULL_pointer', 'make_timezones_capi', 'matmulType', 'no_docstring', 'parse_tuple_and_keywords', 'profile_int', 'pymarshal_read_last_object_from_file', 'pymarshal_read_long_from_file', 'pymarshal_read_object_from_file', 'pymarshal_read_short_from_file', 'pymarshal_write_long_to_file', 'pymarshal_write_object_to_file', 'pymem_api_misuse', 'pymem_buffer_overflow', 'pymem_getallocatorsname', 'pymem_malloc_without_gil', 'pyobject_fastcall', 'pyobject_fastcalldict', 'pyobject_fastcallkeywords', 'pyobject_malloc_without_gil', 'pytime_object_to_time_t', 'pytime_object_to_timespec', 'pytime_object_to_timeval', 'raise_SIGINT_then_send_None', 'raise_exception', 'raise_memoryerror', 'raise_signal', 'remove_mem_hooks', 'return_null_without_error', 'return_result_with_error', 'run_in_subinterp', 'set_errno', 'set_exc_info', 'set_nomemory', 'stack_pointer', 'test_L_code', 'test_Z_code', 'test_buildvalue_N', 'test_capsule', 'test_config', 'test_datetime_capi', 'test_decref_doesnt_leak', 'test_dict_iteration', 'test_empty_argparse', 'test_from_contiguous', 'test_incref_decref_API', 'test_incref_doesnt_leak', 'test_k_code', 'test_lazy_hash_inheritance', 'test_list_api', 'test_long_and_overflow', 'test_long_api', 'test_long_as_double', 'test_long_as_size_t', 'test_long_long_and_overflow', 'test_long_numbits', 'test_longlong_api', 'test_null_strings', 'test_pymem_alloc0', 'test_pymem_setallocators', 'test_pymem_setrawallocators', 'test_pyobject_setallocators', 'test_pythread_tss_key_state', 'test_s_code', 'test_sizeof_c_types', 'test_string_from_format', 'test_string_to_double', 'test_u_code', 'test_unicode_compare_with_ascii', 'test_widechar', 'test_with_docstring', 'test_xdecref_doesnt_leak', 'test_xincref_doesnt_leak', 'the_number_three', 'traceback_print', 'tracemalloc_get_traceback', 'tracemalloc_track', 'tracemalloc_untrack', 'unicode_asucs4', 'unicode_aswidechar', 'unicode_aswidecharstring', 'unicode_copycharacters', 'unicode_encodedecimal', 'unicode_findchar', 'unicode_legacy_string', 'unicode_transformdecimaltoascii', 'with_tp_del']

None

[_testimportmultiple]
['__doc__', '__loader__', '__name__', '__package__', '__spec__']

_testimportmultiple doc

[_testmultiphase]
['Example', 'Str', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'call_state_registration_func', 'error', 'foo', 'int_const', 'str_const']

Test module main

[_tracemalloc]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_get_object_traceback', '_get_traces', 'clear_traces', 'get_traceback_limit', 'get_traced_memory', 'get_tracemalloc_memory', 'is_tracing', 'start', 'stop']

Debug module to trace memory blocks allocated by Python.

[_uuid]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'generate_time_safe', 'has_uuid_generate_time_safe']

None

[array]
['ArrayType', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_array_reconstructor', 'array', 'typecodes']

This module defines an object type which can efficiently represent
an array of basic values: characters, integers, floating point
numbers.  Arrays are sequence types and behave very much like lists,
except that the type of objects stored in them is constrained.


[audioop]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'add', 'adpcm2lin', 'alaw2lin', 'avg', 'avgpp', 'bias', 'byteswap', 'cross', 'error', 'findfactor', 'findfit', 'findmax', 'getsample', 'lin2adpcm', 'lin2alaw', 'lin2lin', 'lin2ulaw', 'max', 'maxpp', 'minmax', 'mul', 'ratecv', 'reverse', 'rms', 'tomono', 'tostereo', 'ulaw2lin']

None

[cmath]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cos', 'cosh', 'e', 'exp', 'inf', 'infj', 'isclose', 'isfinite', 'isinf', 'isnan', 'log', 'log10', 'nan', 'nanj', 'phase', 'pi', 'polar', 'rect', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau']

This module is always available. It provides access to mathematical
functions for complex numbers.

[faulthandler]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', '_fatal_error', '_fatal_error_c_thread', '_read_null', '_sigabrt', '_sigfpe', '_sigsegv', '_stack_overflow', 'cancel_dump_traceback_later', 'disable', 'dump_traceback', 'dump_traceback_later', 'enable', 'is_enabled', 'register', 'unregister']

faulthandler module.

[fcntl]
['FASYNC', 'FD_CLOEXEC', 'F_DUPFD', 'F_DUPFD_CLOEXEC', 'F_FULLFSYNC', 'F_GETFD', 'F_GETFL', 'F_GETLK', 'F_GETOWN', 'F_NOCACHE', 'F_RDLCK', 'F_SETFD', 'F_SETFL', 'F_SETLK', 'F_SETLKW', 'F_SETOWN', 'F_UNLCK', 'F_WRLCK', 'LOCK_EX', 'LOCK_NB', 'LOCK_SH', 'LOCK_UN', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'fcntl', 'flock', 'ioctl', 'lockf']

This module performs file control and I/O control on file 
descriptors.  It is an interface to the fcntl() and ioctl() Unix
routines.  File descriptors can be obtained with the fileno() method of
a file or socket object.

[gc]
['DEBUG_COLLECTABLE', 'DEBUG_LEAK', 'DEBUG_SAVEALL', 'DEBUG_STATS', 'DEBUG_UNCOLLECTABLE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'callbacks', 'collect', 'disable', 'enable', 'freeze', 'garbage', 'get_count', 'get_debug', 'get_freeze_count', 'get_objects', 'get_referents', 'get_referrers', 'get_stats', 'get_threshold', 'is_tracked', 'isenabled', 'set_debug', 'set_threshold', 'unfreeze']

This module provides access to the garbage collector for reference cycles.

enable() -- Enable automatic garbage collection.
disable() -- Disable automatic garbage collection.
isenabled() -- Returns true if automatic collection is enabled.
collect() -- Do a full collection right now.
get_count() -- Return the current collection counts.
get_stats() -- Return list of dictionaries containing per-generation stats.
set_debug() -- Set debugging flags.
get_debug() -- Get debugging flags.
set_threshold() -- Set the collection thresholds.
get_threshold() -- Return the current the collection thresholds.
get_objects() -- Return a list of all objects tracked by the collector.
is_tracked() -- Returns true if a given object is tracked.
get_referrers() -- Return the list of objects that refer to an object.
get_referents() -- Return the list of objects that an object refers to.
freeze() -- Freeze all tracked objects and ignore them for future collections.
unfreeze() -- Unfreeze all objects in the permanent generation.
get_freeze_count() -- Return the number of objects in the permanent generation.


[grp]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'getgrall', 'getgrgid', 'getgrnam', 'struct_group']

Access to the Unix group database.

Group entries are reported as 4-tuples containing the following fields
from the group database, in order:

  gr_name   - name of the group
  gr_passwd - group password (encrypted); often empty
  gr_gid    - numeric ID of the group
  gr_mem    - list of members

The gid is an integer, name and password are strings.  (Note that most
users are not explicitly listed as members of the groups they are in
according to the password database.  Check both databases to get
complete membership information.)

[libzmq]
['__doc__', '__loader__', '__name__', '__package__', '__spec__']

None

[mmap]
['ACCESS_COPY', 'ACCESS_DEFAULT', 'ACCESS_READ', 'ACCESS_WRITE', 'ALLOCATIONGRANULARITY', 'MAP_ANON', 'MAP_ANONYMOUS', 'MAP_PRIVATE', 'MAP_SHARED', 'PAGESIZE', 'PROT_EXEC', 'PROT_READ', 'PROT_WRITE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'mmap']

None

[parser]
['ParserError', 'STType', '__copyright__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', '_pickler', 'compilest', 'expr', 'isexpr', 'issuite', 'sequence2st', 'st2list', 'st2tuple', 'suite', 'tuple2st']

This is an interface to Python's internal parser.

[pwd]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'getpwall', 'getpwnam', 'getpwuid', 'struct_passwd']

This module provides access to the Unix password database.
It is available on all Unix versions.

Password database entries are reported as 7-tuples containing the following
items from the password database (see `<pwd.h>'), in order:
pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.
The uid and gid items are integers, all others are strings. An
exception is raised if the entry asked for cannot be found.

[pythonbox]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'cachePath', 'docPath', 'libPath', 'pbSendEvent', 'pybytes_address', 'pytexture_address', 'pytexture_create', 'pytexture_update', 'showRawImage']

pythonbox extends module

[resource]
['RLIMIT_AS', 'RLIMIT_CORE', 'RLIMIT_CPU', 'RLIMIT_DATA', 'RLIMIT_FSIZE', 'RLIMIT_MEMLOCK', 'RLIMIT_NOFILE', 'RLIMIT_NPROC', 'RLIMIT_RSS', 'RLIMIT_STACK', 'RLIM_INFINITY', 'RUSAGE_CHILDREN', 'RUSAGE_SELF', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'getpagesize', 'getrlimit', 'getrusage', 'setrlimit', 'struct_rusage']

None

[syslog]
['LOG_ALERT', 'LOG_AUTH', 'LOG_AUTHPRIV', 'LOG_CONS', 'LOG_CRIT', 'LOG_CRON', 'LOG_DAEMON', 'LOG_DEBUG', 'LOG_EMERG', 'LOG_ERR', 'LOG_INFO', 'LOG_KERN', 'LOG_LOCAL0', 'LOG_LOCAL1', 'LOG_LOCAL2', 'LOG_LOCAL3', 'LOG_LOCAL4', 'LOG_LOCAL5', 'LOG_LOCAL6', 'LOG_LOCAL7', 'LOG_LPR', 'LOG_MAIL', 'LOG_MASK', 'LOG_NDELAY', 'LOG_NEWS', 'LOG_NOTICE', 'LOG_NOWAIT', 'LOG_ODELAY', 'LOG_PERROR', 'LOG_PID', 'LOG_SYSLOG', 'LOG_UPTO', 'LOG_USER', 'LOG_UUCP', 'LOG_WARNING', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'closelog', 'openlog', 'setlogmask', 'syslog']

None

[termios]
['B0', 'B110', 'B115200', 'B1200', 'B134', 'B150', 'B1800', 'B19200', 'B200', 'B230400', 'B2400', 'B300', 'B38400', 'B4800', 'B50', 'B57600', 'B600', 'B75', 'B9600', 'BRKINT', 'BS0', 'BS1', 'BSDLY', 'CDSUSP', 'CEOF', 'CEOL', 'CEOT', 'CERASE', 'CFLUSH', 'CINTR', 'CKILL', 'CLNEXT', 'CLOCAL', 'CQUIT', 'CR0', 'CR1', 'CR2', 'CR3', 'CRDLY', 'CREAD', 'CRPRNT', 'CRTSCTS', 'CS5', 'CS6', 'CS7', 'CS8', 'CSIZE', 'CSTART', 'CSTOP', 'CSTOPB', 'CSUSP', 'CWERASE', 'ECHO', 'ECHOCTL', 'ECHOE', 'ECHOK', 'ECHOKE', 'ECHONL', 'ECHOPRT', 'EXTA', 'EXTB', 'FF0', 'FF1', 'FFDLY', 'FIOASYNC', 'FIOCLEX', 'FIONBIO', 'FIONCLEX', 'FIONREAD', 'FLUSHO', 'HUPCL', 'ICANON', 'ICRNL', 'IEXTEN', 'IGNBRK', 'IGNCR', 'IGNPAR', 'IMAXBEL', 'INLCR', 'INPCK', 'ISIG', 'ISTRIP', 'IXANY', 'IXOFF', 'IXON', 'NCCS', 'NL0', 'NL1', 'NLDLY', 'NOFLSH', 'OCRNL', 'OFDEL', 'OFILL', 'ONLCR', 'ONLRET', 'ONOCR', 'OPOST', 'PARENB', 'PARMRK', 'PARODD', 'PENDIN', 'TAB0', 'TAB1', 'TAB2', 'TAB3', 'TABDLY', 'TCIFLUSH', 'TCIOFF', 'TCIOFLUSH', 'TCION', 'TCOFLUSH', 'TCOOFF', 'TCOON', 'TCSADRAIN', 'TCSAFLUSH', 'TCSANOW', 'TCSASOFT', 'TIOCCONS', 'TIOCEXCL', 'TIOCGETD', 'TIOCGPGRP', 'TIOCGWINSZ', 'TIOCMBIC', 'TIOCMBIS', 'TIOCMGET', 'TIOCMSET', 'TIOCM_CAR', 'TIOCM_CD', 'TIOCM_CTS', 'TIOCM_DSR', 'TIOCM_DTR', 'TIOCM_LE', 'TIOCM_RI', 'TIOCM_RNG', 'TIOCM_RTS', 'TIOCM_SR', 'TIOCM_ST', 'TIOCNOTTY', 'TIOCNXCL', 'TIOCOUTQ', 'TIOCPKT', 'TIOCPKT_DATA', 'TIOCPKT_DOSTOP', 'TIOCPKT_FLUSHREAD', 'TIOCPKT_FLUSHWRITE', 'TIOCPKT_NOSTOP', 'TIOCPKT_START', 'TIOCPKT_STOP', 'TIOCSCTTY', 'TIOCSETD', 'TIOCSPGRP', 'TIOCSTI', 'TIOCSWINSZ', 'TOSTOP', 'VDISCARD', 'VEOF', 'VEOL', 'VEOL2', 'VERASE', 'VINTR', 'VKILL', 'VLNEXT', 'VMIN', 'VQUIT', 'VREPRINT', 'VSTART', 'VSTOP', 'VSUSP', 'VT0', 'VT1', 'VTDLY', 'VTIME', 'VWERASE', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'tcdrain', 'tcflow', 'tcflush', 'tcgetattr', 'tcsendbreak', 'tcsetattr']

This module provides an interface to the Posix calls for tty I/O control.
For a complete description of these calls, see the Posix or Unix manual
pages. It is only available for those Unix versions that support Posix
termios style tty I/O control.

All functions in this module take a file descriptor fd as their first
argument. This can be an integer file descriptor, such as returned by
sys.stdin.fileno(), or a file object, such as sys.stdin itself.

[unicodedata]
['UCD', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'bidirectional', 'category', 'combining', 'decimal', 'decomposition', 'digit', 'east_asian_width', 'lookup', 'mirrored', 'name', 'normalize', 'numeric', 'ucd_3_2_0', 'ucnhash_CAPI', 'unidata_version']

This module provides access to the Unicode Character Database which
defines character properties for all Unicode characters. The data in
this database is based on the UnicodeData.txt file version
11.0.0 which is publicly available from ftp://ftp.unicode.org/.

The module uses the same names and symbols as defined by the
UnicodeData File Format 11.0.0.

[xxlimited]
['Null', 'Str', 'Xxo', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'error', 'foo', 'new', 'roj']

This is a template module just for instruction.

[xxsubtype]
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'bench', 'spamdict', 'spamlist']

xxsubtype is an example module showing how to subtype builtin types from C.
test_descr.py in the standard test suite requires it in order to complete.
If you don't care about the examples, and don't intend to run the Python
test suite, you can recompile Python without Modules/xxsubtype.c.

[zlib]
['DEFLATED', 'DEF_BUF_SIZE', 'DEF_MEM_LEVEL', 'MAX_WBITS', 'ZLIB_RUNTIME_VERSION', 'ZLIB_VERSION', 'Z_BEST_COMPRESSION', 'Z_BEST_SPEED', 'Z_BLOCK', 'Z_DEFAULT_COMPRESSION', 'Z_DEFAULT_STRATEGY', 'Z_FILTERED', 'Z_FINISH', 'Z_FIXED', 'Z_FULL_FLUSH', 'Z_HUFFMAN_ONLY', 'Z_NO_COMPRESSION', 'Z_NO_FLUSH', 'Z_PARTIAL_FLUSH', 'Z_RLE', 'Z_SYNC_FLUSH', 'Z_TREES', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '__version__', 'adler32', 'compress', 'compressobj', 'crc32', 'decompress', 'decompressobj', 'error']

The functions in this module allow compression and decompression using the
zlib library, which is based on GNU zip.

adler32(string[, start]) -- Compute an Adler-32 checksum.
compress(data[, level]) -- Compress data, with compression level 0-9 or -1.
compressobj([level[, ...]]) -- Return a compressor object.
crc32(string[, start]) -- Compute a CRC-32 checksum.
decompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.
decompressobj([wbits[, zdict]]]) -- Return a decompressor object.

'wbits' is window buffer size and container format.
Compressor objects support compress() and flush() methods; decompressor
objects support decompress() and flush().

Pytho3IDE run end!
